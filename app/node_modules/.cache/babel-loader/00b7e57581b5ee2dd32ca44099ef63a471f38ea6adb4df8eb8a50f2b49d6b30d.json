{"ast":null,"code":"import * as d3 from \"d3\";\nimport { FA_Graph } from \"../structures/fa_graph\";\nimport { FAAddAllInstruction } from \"../Instructions/fa_add_all_instruction\";\nexport class FATransition {\n  constructor(animator) {\n    this.graph = void 0;\n    this.animator = void 0;\n    this.showClear = true;\n    this.showDelete = false;\n    this.showInsert = false;\n    this.showRandomize = false;\n    this.showSearch = false;\n    this.graph = new FA_Graph();\n    this.animator = animator;\n  }\n  getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  /* generateNewColor(): Color {\r\n      let c: Color = {r: this.getRandomInt(0, 255), g: this.getRandomInt(0, 255), b: this.getRandomInt(0, 255), a: 1};\r\n        let exists = this.colorUsed.some(\r\n          (color) => color.r === c.r &&\r\n              color.g === c.g &&\r\n              color.b === c.b &&\r\n              color.a === c.a\r\n      );\r\n        let attemps = 0;\r\n        while (exists) {\r\n            if (attemps > 50) break;\r\n            c = {r: this.getRandomInt(0, 255), g: this.getRandomInt(0, 255), b: this.getRandomInt(0, 255), a: 1};\r\n            exists = this.colorUsed.some(\r\n              (color) => color.r === c.r &&\r\n                  color.g === c.g &&\r\n                  color.b === c.b &&\r\n                  color.a === c.a\r\n          );\r\n            attemps++;\r\n      }\r\n        this.colorUsed.push(c);\r\n        return c;\r\n  } */\n\n  parse(area) {\n    // Is code valid?\n    const lines = area.split(\"\\n\");\n    let valid = true;\n    let currentNodeValue = \"\";\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n\n      // Ignore comments\n      if (line.startsWith('#') || line.startsWith('//')) continue;\n\n      // If it doesn't start with a space, it is the start of a state definition\n      if (!line.startsWith(' ')) {\n        const value = line.split(\":\")[0];\n        if (this.graph.get_node(value) == null) this.graph.create_node(value);\n        currentNodeValue = value;\n      }\n\n      // If it does, it is a value in a state definition\n      else {\n        // Get rid of spaces\n        const new_line = line.replace(/\\s+/g, '');\n\n        // Check if there is a : - if so, its a value, if not, its either Start or Final keywords\n        if (new_line.includes(':')) {\n          const pointer = new_line.split(\":\")[0];\n          const weights = new_line.split(\":\")[1].split(\",\").map(w => w.trim());\n\n          //this.states[currentState].push({state: state, values: values});\n\n          if (this.graph.get_node(pointer) == null) this.graph.create_node(pointer);\n          this.graph.add_node_pointers(currentNodeValue, weights, pointer);\n        }\n        // Keywords\n        else {\n          // Set the starting state\n          if (new_line.toUpperCase() === \"START\") {\n            this.graph.set_starting_node(currentNodeValue);\n          }\n\n          // Add onto the final states\n          if (new_line.toUpperCase() === \"FINAL\") {\n            this.graph.add_final_node(currentNodeValue);\n          }\n        }\n      }\n    }\n\n    // Is there a starting state? If not, cause error\n    if (!this.graph.has_starting_node()) {\n      valid = false;\n    }\n\n    // Is there any final states? Is not, cause error\n    if (!this.graph.has_one_final_node()) {\n      valid = false;\n    }\n\n    // If valid, generate animation / structure\n    if (valid) {\n      this.animator.addInstruction(new FAAddAllInstruction(this.graph));\n\n      /*\r\n      let indexStates : Record<string, number> | null = {};\r\n      let colorStates : Record<string, Color> = {};\r\n        let index = 0;\r\n      for (const state in this.states) {\r\n            indexStates[state] = index;\r\n          colorStates[state] = this.generateNewColor();\r\n            //const stateArray = this.states[state];\r\n            //stateArray.forEach((value) => {\r\n          //    this.animator.addInstruction(new FAAddInstruction(index, value, ))\r\n          //});\r\n            let isStarting = state === this.startingState;\r\n          let isFinal = this.finalStates.includes(state);\r\n            this.animator.addInstruction(new FAAddInstruction(index, state, Object.keys(this.states).length, this.states[state], indexStates, colorStates, isStarting, isFinal));\r\n            index += 1;\r\n      } */\n\n      this.animator.processInstructions();\n    }\n  }\n  clear() {\n    this.graph = new FA_Graph();\n    const svg = d3.select(\"#svg-container\").attr(\"width\", 500).attr(\"height\", 500);\n    svg.selectAll(\"*\").remove();\n  }\n  delete(value) {}\n  generate_random(min, max, size, allowStrings, allowNumbers, allowDecimal, maxDecimal, regex, stringLengthMin, stringLengthMax) {}\n  insert(value) {}\n}","map":{"version":3,"names":["d3","FA_Graph","FAAddAllInstruction","FATransition","constructor","animator","graph","showClear","showDelete","showInsert","showRandomize","showSearch","getRandomInt","min","max","Math","floor","random","parse","area","lines","split","valid","currentNodeValue","i","length","line","startsWith","value","get_node","create_node","new_line","replace","includes","pointer","weights","map","w","trim","add_node_pointers","toUpperCase","set_starting_node","add_final_node","has_starting_node","has_one_final_node","addInstruction","processInstructions","clear","svg","select","attr","selectAll","remove","delete","generate_random","size","allowStrings","allowNumbers","allowDecimal","maxDecimal","regex","stringLengthMin","stringLengthMax","insert"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/algorithms/fa_transition.tsx"],"sourcesContent":["import {Algorithm} from \"./algorithm_interface\";\r\nimport {AnimationPlayer} from \"../animation_player\";\r\nimport {FAAddInstruction, Color} from \"../Instructions/fa_add_instruction\";\r\nimport {TreeAddInstruction} from \"../Instructions/tree_add_instruction\";\r\nimport * as d3 from \"d3\";\r\nimport {useState} from \"react\";\r\nimport {FA_Graph} from \"../structures/fa_graph\";\r\nimport {FAAddAllInstruction} from \"../Instructions/fa_add_all_instruction\";\r\n\r\nexport type stateValues = {\r\n    state: string;\r\n    values: string[];\r\n}\r\n\r\nexport class FATransition implements Algorithm {\r\n\r\n    private graph: FA_Graph;\r\n\r\n    private animator: AnimationPlayer;\r\n\r\n    public showClear: boolean = true;\r\n    public showDelete: boolean = false;\r\n    public showInsert: boolean = false;\r\n    public showRandomize: boolean = false;\r\n    public showSearch: boolean = false;\r\n\r\n    constructor(\r\n        animator: AnimationPlayer,\r\n    ) {\r\n        this.graph = new FA_Graph();\r\n        this.animator = animator;\r\n    }\r\n\r\n    getRandomInt(min: number, max: number): number {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n\r\n    /* generateNewColor(): Color {\r\n        let c: Color = {r: this.getRandomInt(0, 255), g: this.getRandomInt(0, 255), b: this.getRandomInt(0, 255), a: 1};\r\n\r\n        let exists = this.colorUsed.some(\r\n            (color) => color.r === c.r &&\r\n                color.g === c.g &&\r\n                color.b === c.b &&\r\n                color.a === c.a\r\n        );\r\n\r\n        let attemps = 0;\r\n\r\n        while (exists) {\r\n\r\n            if (attemps > 50) break;\r\n\r\n            c = {r: this.getRandomInt(0, 255), g: this.getRandomInt(0, 255), b: this.getRandomInt(0, 255), a: 1};\r\n\r\n            exists = this.colorUsed.some(\r\n                (color) => color.r === c.r &&\r\n                    color.g === c.g &&\r\n                    color.b === c.b &&\r\n                    color.a === c.a\r\n            );\r\n\r\n            attemps++;\r\n        }\r\n\r\n        this.colorUsed.push(c);\r\n\r\n        return c;\r\n    } */\r\n\r\n    parse(area: string) {\r\n\r\n        // Is code valid?\r\n        const lines = area.split(\"\\n\");\r\n        let valid = true;\r\n        let currentNodeValue: string = \"\";\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const line = lines[i];\r\n\r\n            // Ignore comments\r\n            if (line.startsWith('#') || line.startsWith('//')) continue;\r\n\r\n            // If it doesn't start with a space, it is the start of a state definition\r\n            if (!line.startsWith(' ')) {\r\n                const value = line.split(\":\")[0];\r\n\r\n                if (this.graph.get_node(value) == null) this.graph.create_node(value);\r\n\r\n                currentNodeValue = value;\r\n            }\r\n\r\n            // If it does, it is a value in a state definition\r\n            else {\r\n\r\n                // Get rid of spaces\r\n                const new_line = line.replace(/\\s+/g, '');\r\n\r\n                // Check if there is a : - if so, its a value, if not, its either Start or Final keywords\r\n                if (new_line.includes(':')) {\r\n                    const pointer = new_line.split(\":\")[0];\r\n                    const weights = new_line\r\n                        .split(\":\")[1]\r\n                        .split(\",\")\r\n                        .map(w => w.trim());\r\n\r\n                    //this.states[currentState].push({state: state, values: values});\r\n\r\n                    if (this.graph.get_node(pointer) == null) this.graph.create_node(pointer);\r\n\r\n                    this.graph.add_node_pointers(currentNodeValue, weights, pointer);\r\n                }\r\n                // Keywords\r\n                else {\r\n\r\n                    // Set the starting state\r\n                    if (new_line.toUpperCase() === \"START\") {\r\n                        this.graph.set_starting_node(currentNodeValue);\r\n                    }\r\n\r\n                    // Add onto the final states\r\n                    if (new_line.toUpperCase() === \"FINAL\") {\r\n                        this.graph.add_final_node(currentNodeValue);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Is there a starting state? If not, cause error\r\n        if (!this.graph.has_starting_node()) {\r\n            valid = false;\r\n        }\r\n\r\n        // Is there any final states? Is not, cause error\r\n        if (!this.graph.has_one_final_node()) {\r\n            valid = false;\r\n        }\r\n\r\n        // If valid, generate animation / structure\r\n        if (valid) {\r\n\r\n            this.animator.addInstruction(new FAAddAllInstruction(this.graph));\r\n\r\n            /*\r\n            let indexStates : Record<string, number> | null = {};\r\n            let colorStates : Record<string, Color> = {};\r\n\r\n            let index = 0;\r\n            for (const state in this.states) {\r\n\r\n                indexStates[state] = index;\r\n                colorStates[state] = this.generateNewColor();\r\n\r\n                //const stateArray = this.states[state];\r\n\r\n                //stateArray.forEach((value) => {\r\n                //    this.animator.addInstruction(new FAAddInstruction(index, value, ))\r\n                //});\r\n\r\n                let isStarting = state === this.startingState;\r\n                let isFinal = this.finalStates.includes(state);\r\n\r\n                this.animator.addInstruction(new FAAddInstruction(index, state, Object.keys(this.states).length, this.states[state], indexStates, colorStates, isStarting, isFinal));\r\n\r\n                index += 1;\r\n            } */\r\n\r\n            this.animator.processInstructions();\r\n        }\r\n\r\n    }\r\n\r\n    clear(): void {\r\n        this.graph = new FA_Graph();\r\n        const svg = d3.select(\"#svg-container\").attr(\"width\", 500).attr(\"height\", 500);\r\n        svg.selectAll(\"*\").remove();\r\n\r\n    }\r\n\r\n    delete(value: string | number): void {\r\n    }\r\n\r\n    generate_random(min: number, max: number, size: number, allowStrings: boolean, allowNumbers: boolean, allowDecimal: boolean, maxDecimal: number, regex: string, stringLengthMin: number, stringLengthMax: number): void {\r\n    }\r\n\r\n    insert(value: string | number): void {\r\n    }\r\n\r\n}"],"mappings":"AAIA,OAAO,KAAKA,EAAE,MAAM,IAAI;AAExB,SAAQC,QAAQ,QAAO,wBAAwB;AAC/C,SAAQC,mBAAmB,QAAO,wCAAwC;AAO1E,OAAO,MAAMC,YAAY,CAAsB;EAY3CC,WAAWA,CACPC,QAAyB,EAC3B;IAAA,KAZMC,KAAK;IAAA,KAELD,QAAQ;IAAA,KAETE,SAAS,GAAY,IAAI;IAAA,KACzBC,UAAU,GAAY,KAAK;IAAA,KAC3BC,UAAU,GAAY,KAAK;IAAA,KAC3BC,aAAa,GAAY,KAAK;IAAA,KAC9BC,UAAU,GAAY,KAAK;IAK9B,IAAI,CAACL,KAAK,GAAG,IAAIL,QAAQ,CAAC,CAAC;IAC3B,IAAI,CAACI,QAAQ,GAAGA,QAAQ;EAC5B;EAEAO,YAAYA,CAACC,GAAW,EAAEC,GAAW,EAAU;IAC3C,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIH,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG;EAC5D;;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAWIK,KAAKA,CAACC,IAAY,EAAE;IAEhB;IACA,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC;IAC9B,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAIC,gBAAwB,GAAG,EAAE;IAEjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;MACnC,MAAME,IAAI,GAAGN,KAAK,CAACI,CAAC,CAAC;;MAErB;MACA,IAAIE,IAAI,CAACC,UAAU,CAAC,GAAG,CAAC,IAAID,IAAI,CAACC,UAAU,CAAC,IAAI,CAAC,EAAE;;MAEnD;MACA,IAAI,CAACD,IAAI,CAACC,UAAU,CAAC,GAAG,CAAC,EAAE;QACvB,MAAMC,KAAK,GAAGF,IAAI,CAACL,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAEhC,IAAI,IAAI,CAACf,KAAK,CAACuB,QAAQ,CAACD,KAAK,CAAC,IAAI,IAAI,EAAE,IAAI,CAACtB,KAAK,CAACwB,WAAW,CAACF,KAAK,CAAC;QAErEL,gBAAgB,GAAGK,KAAK;MAC5B;;MAEA;MAAA,KACK;QAED;QACA,MAAMG,QAAQ,GAAGL,IAAI,CAACM,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;;QAEzC;QACA,IAAID,QAAQ,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;UACxB,MAAMC,OAAO,GAAGH,QAAQ,CAACV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACtC,MAAMc,OAAO,GAAGJ,QAAQ,CACnBV,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CACbA,KAAK,CAAC,GAAG,CAAC,CACVe,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;;UAEvB;;UAEA,IAAI,IAAI,CAAChC,KAAK,CAACuB,QAAQ,CAACK,OAAO,CAAC,IAAI,IAAI,EAAE,IAAI,CAAC5B,KAAK,CAACwB,WAAW,CAACI,OAAO,CAAC;UAEzE,IAAI,CAAC5B,KAAK,CAACiC,iBAAiB,CAAChB,gBAAgB,EAAEY,OAAO,EAAED,OAAO,CAAC;QACpE;QACA;QAAA,KACK;UAED;UACA,IAAIH,QAAQ,CAACS,WAAW,CAAC,CAAC,KAAK,OAAO,EAAE;YACpC,IAAI,CAAClC,KAAK,CAACmC,iBAAiB,CAAClB,gBAAgB,CAAC;UAClD;;UAEA;UACA,IAAIQ,QAAQ,CAACS,WAAW,CAAC,CAAC,KAAK,OAAO,EAAE;YACpC,IAAI,CAAClC,KAAK,CAACoC,cAAc,CAACnB,gBAAgB,CAAC;UAC/C;QACJ;MACJ;IACJ;;IAEA;IACA,IAAI,CAAC,IAAI,CAACjB,KAAK,CAACqC,iBAAiB,CAAC,CAAC,EAAE;MACjCrB,KAAK,GAAG,KAAK;IACjB;;IAEA;IACA,IAAI,CAAC,IAAI,CAAChB,KAAK,CAACsC,kBAAkB,CAAC,CAAC,EAAE;MAClCtB,KAAK,GAAG,KAAK;IACjB;;IAEA;IACA,IAAIA,KAAK,EAAE;MAEP,IAAI,CAACjB,QAAQ,CAACwC,cAAc,CAAC,IAAI3C,mBAAmB,CAAC,IAAI,CAACI,KAAK,CAAC,CAAC;;MAEjE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MASY,IAAI,CAACD,QAAQ,CAACyC,mBAAmB,CAAC,CAAC;IACvC;EAEJ;EAEAC,KAAKA,CAAA,EAAS;IACV,IAAI,CAACzC,KAAK,GAAG,IAAIL,QAAQ,CAAC,CAAC;IAC3B,MAAM+C,GAAG,GAAGhD,EAAE,CAACiD,MAAM,CAAC,gBAAgB,CAAC,CAACC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAACA,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC;IAC9EF,GAAG,CAACG,SAAS,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC;EAE/B;EAEAC,MAAMA,CAACzB,KAAsB,EAAQ,CACrC;EAEA0B,eAAeA,CAACzC,GAAW,EAAEC,GAAW,EAAEyC,IAAY,EAAEC,YAAqB,EAAEC,YAAqB,EAAEC,YAAqB,EAAEC,UAAkB,EAAEC,KAAa,EAAEC,eAAuB,EAAEC,eAAuB,EAAQ,CACxN;EAEAC,MAAMA,CAACnC,KAAsB,EAAQ,CACrC;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}