{"ast":null,"code":"import * as d3 from \"d3\";\nexport class TreeAnimate {\n  constructor() {\n    this.instructions = void 0;\n    this.current_nodes = void 0;\n    this.processInstructions = async svg => {\n      for (let instruction of this.instructions) {\n        if (instruction.type === 'add' && instruction.value) {\n          // Wait for the previous node to finish its animation before adding the next one\n          await this.addNode(svg, instruction);\n        }\n        if (instruction.type === 'swap') {\n          await this.swapNodes(svg, this.current_nodes[instruction.toIndex], this.current_nodes[instruction.fromIndex]);\n          const i = this.current_nodes[instruction.toIndex].index;\n          this.current_nodes[instruction.toIndex].index = this.current_nodes[instruction.fromIndex].index;\n          this.current_nodes[instruction.fromIndex].index = i;\n          const node = this.current_nodes[instruction.toIndex];\n          this.current_nodes[instruction.toIndex] = this.current_nodes[instruction.fromIndex];\n          this.current_nodes[instruction.fromIndex] = node;\n        }\n        if (instruction.type === 'remove') {\n          await this.removeNode(svg, instruction);\n        }\n      }\n      this.instructions = [];\n    };\n    this.removeNode = (svg, instruction) => {\n      return new Promise(resolve => {\n        for (let i = 0; i < this.current_nodes.length; i++) {\n          if (this.current_nodes[i].index === instruction.index) {\n            this.current_nodes.splice(i, 1);\n            break;\n          }\n        }\n        setTimeout(() => resolve(), 1000);\n      });\n    };\n    this.addNode = (svg, instruction) => {\n      return new Promise(resolve => {\n        const position = this.getNodePosition(instruction.index);\n        const parentIndex = Math.floor((instruction.index - 1) / 2);\n        const hasParent = parentIndex >= 0 && this.current_nodes[parentIndex];\n\n        // Ensure there are groups for edges and nodes\n        let edgesGroup = svg.select(\"g.edges\");\n        let nodesGroup = svg.select(\"g.nodes\");\n        if (edgesGroup.empty()) {\n          edgesGroup = svg.append(\"g\").attr(\"class\", \"edges\");\n        }\n        if (nodesGroup.empty()) {\n          nodesGroup = svg.append(\"g\").attr(\"class\", \"nodes\");\n        }\n        let edge = null;\n        if (hasParent) {\n          const parentPos = this.getNodePosition(parentIndex);\n          edge = edgesGroup.append(\"line\") // Append edge inside the 'edges' group\n          .attr(\"x1\", parentPos.x).attr(\"y1\", parentPos.y).attr(\"x2\", 200) // Temporary start position\n          .attr(\"y2\", 200).attr(\"stroke\", \"black\").attr(\"stroke-width\", 5).style(\"opacity\", 0);\n        }\n        const nodeElement = nodesGroup.append(\"circle\") // Append node inside the 'nodes' group\n        .attr(\"cx\", 200).attr(\"cy\", 200).attr(\"r\", 20).attr(\"class\", \"node\").style(\"opacity\", 0);\n        const label = nodesGroup.append(\"text\") // Append label inside the 'nodes' group\n        .attr(\"x\", 200).attr(\"y\", 200).attr(\"class\", \"label\").attr(\"text-anchor\", \"middle\").attr(\"alignment-baseline\", \"middle\").style(\"fill\", \"white\").style(\"font-size\", \"12px\").text(instruction.value);\n        const newNode = {\n          node: nodeElement,\n          label,\n          index: instruction.index\n        };\n        this.current_nodes.push(newNode);\n\n        // Animate the node: fade in and move\n        nodeElement.transition().duration(1000).style(\"opacity\", 1).attr(\"cx\", position.x).attr(\"cy\", position.y);\n        label.transition().duration(1000).style(\"opacity\", 1).attr(\"x\", position.x).attr(\"y\", position.y);\n        if (edge) {\n          edge.transition().duration(1000).style(\"opacity\", 1).attr(\"x2\", position.x).attr(\"y2\", position.y);\n        }\n        setTimeout(() => resolve(), 1000);\n      });\n    };\n    this.getNodePosition = index => {\n      if (index < 0 || isNaN(index)) return {\n        x: 0,\n        y: 0\n      };\n      if (index === 0) return {\n        x: 250,\n        y: 50\n      }; // Root at the center\n\n      const depth = Math.floor(Math.log2(index + 1)); // Get depth in the tree\n      const xSpacing = 200 / (depth + 1); // Adjust x spacing\n      const ySpacing = 80; // Vertical spacing\n\n      const parentIndex = Math.floor((index - 1) / 2);\n      const parentPos = this.getNodePosition(parentIndex);\n      const isLeftChild = index % 2 === 1;\n      const xOffset = isLeftChild ? -xSpacing : xSpacing;\n      return {\n        x: parentPos.x + xOffset,\n        y: parentPos.y + ySpacing\n      };\n    };\n    this.swapNodes = (svg, nodeA, nodeB) => {\n      //alert(nodes.length);\n\n      return new Promise(resolve => {\n        const node1 = nodeA.node;\n        const label1 = nodeA.label;\n        const node2 = nodeB.node;\n        const label2 = nodeB.label;\n        const node1Position = {\n          x: parseFloat(node1.attr(\"cx\")),\n          y: parseFloat(node1.attr(\"cy\"))\n        };\n        const node2Position = {\n          x: parseFloat(node2.attr(\"cx\")),\n          y: parseFloat(node2.attr(\"cy\"))\n        };\n\n        // Animate node1 to node2's position\n        node1.transition().duration(1000).attr(\"cx\", node2Position.x).attr(\"cy\", node2Position.y);\n\n        // Animate label1 to node2's position\n        label1.transition().duration(1000).attr(\"x\", node2Position.x).attr(\"y\", node2Position.y);\n\n        // Animate node2 to node1's position\n        node2.transition().duration(1000).attr(\"cx\", node1Position.x).attr(\"cy\", node1Position.y);\n\n        // Animate label2 to node1's position\n        label2.transition().duration(1000).attr(\"x\", node1Position.x).attr(\"y\", node1Position.y);\n        setTimeout(() => resolve(), 1000);\n      });\n    };\n    this.instructions = [];\n    this.current_nodes = [];\n  }\n  add_instruction(instruction) {\n    this.instructions.push(instruction);\n  }\n  start_processing() {\n    const svg = d3.select(\"#svg-container\").attr(\"width\", 500).attr(\"height\", 500);\n    this.processInstructions(svg);\n  }\n}","map":{"version":3,"names":["d3","TreeAnimate","constructor","instructions","current_nodes","processInstructions","svg","instruction","type","value","addNode","swapNodes","toIndex","fromIndex","i","index","node","removeNode","Promise","resolve","length","splice","setTimeout","position","getNodePosition","parentIndex","Math","floor","hasParent","edgesGroup","select","nodesGroup","empty","append","attr","edge","parentPos","x","y","style","nodeElement","label","text","newNode","push","transition","duration","isNaN","depth","log2","xSpacing","ySpacing","isLeftChild","xOffset","nodeA","nodeB","node1","label1","node2","label2","node1Position","parseFloat","node2Position","add_instruction","start_processing"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/structures/tree_animator.ts"],"sourcesContent":["import {Instruction, NodeData} from \"../algorithms/tree_intructions\";\r\nimport * as d3 from \"d3\";\r\nimport {BaseType} from \"d3\";\r\n\r\nexport class TreeAnimate {\r\n\r\n    private instructions : Instruction[];\r\n    private current_nodes : NodeData[];\r\n\r\n    constructor() {\r\n        this.instructions = [];\r\n        this.current_nodes = [];\r\n    }\r\n\r\n    add_instruction(instruction : Instruction) {\r\n        this.instructions.push(instruction);\r\n    }\r\n\r\n    start_processing() {\r\n        const svg = d3.select(\"#svg-container\")\r\n            .attr(\"width\", 500)\r\n            .attr(\"height\", 500);\r\n\r\n        this.processInstructions(svg);\r\n    }\r\n\r\n    processInstructions = async (svg: d3.Selection<BaseType, unknown, HTMLElement, any>) => {\r\n        for (let instruction of this.instructions) {\r\n            if (instruction.type === 'add' && instruction.value) {\r\n                // Wait for the previous node to finish its animation before adding the next one\r\n                await this.addNode(svg, instruction);\r\n            }\r\n\r\n            if (instruction.type === 'swap') {\r\n\r\n                await this.swapNodes(svg, this.current_nodes[instruction.toIndex as number], this.current_nodes[instruction.fromIndex as number]);\r\n\r\n                const i = this.current_nodes[instruction.toIndex as number].index;\r\n                this.current_nodes[instruction.toIndex as number].index = this.current_nodes[instruction.fromIndex as number].index;\r\n                this.current_nodes[instruction.fromIndex as number].index = i;\r\n\r\n                const node = this.current_nodes[instruction.toIndex as number]\r\n                this.current_nodes[instruction.toIndex as number] = this.current_nodes[instruction.fromIndex as number];\r\n                this.current_nodes[instruction.fromIndex as number] = node;\r\n            }\r\n\r\n            if (instruction.type === 'remove') {\r\n                await this.removeNode(svg, instruction);\r\n            }\r\n        }\r\n\r\n        this.instructions = [];\r\n\r\n    };\r\n\r\n    removeNode = (svg: d3.Selection<BaseType, unknown, HTMLElement, any>, instruction : Instruction) => {\r\n        return new Promise<void>((resolve) => {\r\n\r\n            for (let i = 0; i < this.current_nodes.length; i++) {\r\n\r\n                if (this.current_nodes[i].index === instruction.index) {\r\n                    this.current_nodes.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            setTimeout(() => resolve(), 1000);\r\n        });\r\n    }\r\n\r\n    addNode = (svg: d3.Selection<BaseType, unknown, HTMLElement, any>, instruction: Instruction) => {\r\n        return new Promise<void>((resolve) => {\r\n            const position = this.getNodePosition(instruction.index as number);\r\n            const parentIndex = Math.floor((instruction.index as number - 1) / 2);\r\n            const hasParent = parentIndex >= 0 && this.current_nodes[parentIndex];\r\n\r\n            // Ensure there are groups for edges and nodes\r\n            let edgesGroup = svg.select<SVGGElement>(\"g.edges\");\r\n            let nodesGroup = svg.select<SVGGElement>(\"g.nodes\");\r\n\r\n\r\n            if (edgesGroup.empty()) {\r\n                edgesGroup = svg.append(\"g\").attr(\"class\", \"edges\");\r\n            }\r\n            if (nodesGroup.empty()) {\r\n                nodesGroup = svg.append(\"g\").attr(\"class\", \"nodes\");\r\n            }\r\n\r\n            let edge: d3.Selection<SVGLineElement, unknown, HTMLElement, any> | null = null;\r\n            if (hasParent) {\r\n                const parentPos = this.getNodePosition(parentIndex as number);\r\n                edge = edgesGroup.append(\"line\") // Append edge inside the 'edges' group\r\n                    .attr(\"x1\", parentPos.x)\r\n                    .attr(\"y1\", parentPos.y)\r\n                    .attr(\"x2\", 200)  // Temporary start position\r\n                    .attr(\"y2\", 200)\r\n                    .attr(\"stroke\", \"black\")\r\n                    .attr(\"stroke-width\", 5)\r\n                    .style(\"opacity\", 0);\r\n            }\r\n\r\n            const nodeElement = nodesGroup.append(\"circle\") // Append node inside the 'nodes' group\r\n                .attr(\"cx\", 200)\r\n                .attr(\"cy\", 200)\r\n                .attr(\"r\", 20)\r\n                .attr(\"class\", \"node\")\r\n                .style(\"opacity\", 0);\r\n\r\n            const label = nodesGroup.append(\"text\") // Append label inside the 'nodes' group\r\n                .attr(\"x\", 200)\r\n                .attr(\"y\", 200)\r\n                .attr(\"class\", \"label\")\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .attr(\"alignment-baseline\", \"middle\")\r\n                .style(\"fill\", \"white\")\r\n                .style(\"font-size\", \"12px\")\r\n                .text(instruction.value as number | string);\r\n\r\n            const newNode: NodeData = { node: nodeElement, label, index: instruction.index as number };\r\n            this.current_nodes.push(newNode);\r\n\r\n            // Animate the node: fade in and move\r\n            nodeElement.transition()\r\n                .duration(1000)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"cx\", position.x)\r\n                .attr(\"cy\", position.y);\r\n\r\n            label.transition()\r\n                .duration(1000)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"x\", position.x)\r\n                .attr(\"y\", position.y);\r\n\r\n            if (edge) {\r\n                edge.transition()\r\n                    .duration(1000)\r\n                    .style(\"opacity\", 1)\r\n                    .attr(\"x2\", position.x)\r\n                    .attr(\"y2\", position.y);\r\n            }\r\n\r\n            setTimeout(() => resolve(), 1000);\r\n        });\r\n    };\r\n\r\n\r\n    getNodePosition = (index: number): { x: number, y: number } => {\r\n        if (index < 0 || isNaN(index)) return { x: 0, y: 0 };\r\n        if (index === 0) return { x: 250, y: 50 }; // Root at the center\r\n\r\n        const depth = Math.floor(Math.log2(index + 1)); // Get depth in the tree\r\n        const xSpacing = (200) / (depth + 1); // Adjust x spacing\r\n        const ySpacing = 80; // Vertical spacing\r\n\r\n        const parentIndex = Math.floor((index - 1) / 2);\r\n        const parentPos = this.getNodePosition(parentIndex);\r\n\r\n        const isLeftChild = index % 2 === 1;\r\n        const xOffset = isLeftChild ? -xSpacing : xSpacing;\r\n\r\n        return { x: parentPos.x + xOffset, y: parentPos.y + ySpacing };\r\n    };\r\n\r\n    swapNodes = (\r\n        svg: d3.Selection<BaseType, unknown, HTMLElement, any>,\r\n        nodeA: NodeData,\r\n        nodeB: NodeData,\r\n    ) => {\r\n\r\n        //alert(nodes.length);\r\n\r\n        return new Promise<void>((resolve) => {\r\n            const node1 = nodeA.node;\r\n            const label1 = nodeA.label;\r\n            const node2 = nodeB.node;\r\n            const label2 = nodeB.label;\r\n\r\n\r\n            const node1Position = { x: parseFloat(node1.attr(\"cx\")), y: parseFloat(node1.attr(\"cy\")) };\r\n            const node2Position = { x: parseFloat(node2.attr(\"cx\")), y: parseFloat(node2.attr(\"cy\")) };\r\n\r\n            // Animate node1 to node2's position\r\n            node1.transition()\r\n                .duration(1000)\r\n                .attr(\"cx\", node2Position.x)\r\n                .attr(\"cy\", node2Position.y);\r\n\r\n            // Animate label1 to node2's position\r\n            label1.transition()\r\n                .duration(1000)\r\n                .attr(\"x\", node2Position.x)\r\n                .attr(\"y\", node2Position.y);\r\n\r\n            // Animate node2 to node1's position\r\n            node2.transition()\r\n                .duration(1000)\r\n                .attr(\"cx\", node1Position.x)\r\n                .attr(\"cy\", node1Position.y);\r\n\r\n            // Animate label2 to node1's position\r\n            label2.transition()\r\n                .duration(1000)\r\n                .attr(\"x\", node1Position.x)\r\n                .attr(\"y\", node1Position.y);\r\n\r\n            setTimeout(() => resolve(), 1000);\r\n        });\r\n    };\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}