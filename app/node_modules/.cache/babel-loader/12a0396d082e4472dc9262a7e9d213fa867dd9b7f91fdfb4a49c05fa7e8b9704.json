{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Micha\\\\Documents\\\\GitHub\\\\dynamic-algorithm-visualizer\\\\app\\\\src\\\\components\\\\structures\\\\binary_tree.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { animated, useTransition } from \"@react-spring/web\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BinaryTree = () => {\n  _s();\n  const [values, setValues] = React.useState([]);\n  let length = 0;\n  const add = value => {\n    setValues(prev => [...prev, value]);\n    length++;\n  };\n  const nodeTransitions = useTransition(values, {\n    keys: item => `${item}`,\n    // Ensure unique keys for each item\n    from: {\n      opacity: 0,\n      transform: 'scale(0)'\n    },\n    enter: {\n      opacity: 1,\n      transform: 'scale(1)'\n    },\n    leave: {\n      opacity: 0,\n      transform: 'scale(0)'\n    }\n  });\n  const getNodePosition = index => {\n    const x = 100 + index * 150; // Example horizontal position\n    const y = 100; // All nodes aligned at the same vertical position\n    return {\n      x,\n      y\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    children: nodeTransitions((style, node, index) => {\n      const {\n        x,\n        y\n      } = getNodePosition(index);\n      return /*#__PURE__*/_jsxDEV(animated.g, {\n        style: style,\n        children: [index > 0 && /*#__PURE__*/_jsxDEV(animated.line, {\n          x1: getNodePosition(Math.floor((index - 1) / 2)).x,\n          y1: getNodePosition(Math.floor((index - 1) / 2)).y,\n          x2: x,\n          y2: y,\n          stroke: \"black\",\n          strokeWidth: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: x,\n          cy: y,\n          r: 30,\n          fill: \"steelblue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: x,\n          y: y,\n          dy: 5,\n          textAnchor: \"middle\",\n          fill: \"white\",\n          fontSize: \"12\",\n          children: node\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 29\n        }, this)]\n      }, node, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 25\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 13\n  }, this);\n};\n_s(BinaryTree, \"/1jBViwTV88Wgby9PJHOANQ2g2c=\", false, function () {\n  return [useTransition];\n});\n_c = BinaryTree;\nvar _c;\n$RefreshReg$(_c, \"BinaryTree\");","map":{"version":3,"names":["React","animated","useTransition","jsxDEV","_jsxDEV","BinaryTree","_s","values","setValues","useState","length","add","value","prev","nodeTransitions","keys","item","from","opacity","transform","enter","leave","getNodePosition","index","x","y","children","style","node","g","line","x1","Math","floor","y1","x2","y2","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","cx","cy","r","fill","dy","textAnchor","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/structures/binary_tree.tsx"],"sourcesContent":["import React from \"react\";\r\nimport {animated, useTransition} from \"@react-spring/web\";\r\n\r\nexport const BinaryTree = () => {\r\n\r\n    const [values, setValues] = React.useState<(string | number)[]>([]);\r\n    let length : number = 0\r\n\r\n    const add = (value : string | number) => {\r\n        setValues((prev) => [...prev, value]);\r\n        length++;\r\n    }\r\n\r\n    const nodeTransitions = useTransition(values, {\r\n        keys: (item) => `${item}`,  // Ensure unique keys for each item\r\n        from: { opacity: 0, transform: 'scale(0)' },\r\n        enter: { opacity: 1, transform: 'scale(1)' },\r\n        leave: { opacity: 0, transform: 'scale(0)' },\r\n    });\r\n\r\n    const getNodePosition = (index: number) => {\r\n        const x = 100 + index * 150;  // Example horizontal position\r\n        const y = 100;  // All nodes aligned at the same vertical position\r\n        return { x, y };\r\n    };\r\n\r\n    return (\r\n            <g>\r\n                {nodeTransitions((style, node, index) => {\r\n                    const { x, y } = getNodePosition(index);\r\n                    return (\r\n                        <animated.g key={node} style={style}>\r\n                            {/* Draw edges for binary tree structure */}\r\n                            {index > 0 && (\r\n                                <animated.line\r\n                                    x1={getNodePosition(Math.floor((index - 1) / 2)).x}\r\n                                    y1={getNodePosition(Math.floor((index - 1) / 2)).y}\r\n                                    x2={x}\r\n                                    y2={y}\r\n                                    stroke=\"black\"\r\n                                    strokeWidth=\"2\"\r\n                                />\r\n                            )}\r\n\r\n                            {/* Draw node */}\r\n                            <circle cx={x} cy={y} r={30} fill=\"steelblue\" />\r\n                            <text x={x} y={y} dy={5} textAnchor=\"middle\" fill=\"white\" fontSize=\"12\">\r\n                                {node}\r\n                            </text>\r\n                        </animated.g>\r\n                    );\r\n                })}\r\n            </g>\r\n    );\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}