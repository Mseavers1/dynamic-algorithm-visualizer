{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Micha\\\\Documents\\\\GitHub\\\\dynamic-algorithm-visualizer\\\\app\\\\src\\\\components\\\\algorithms\\\\min_heap.tsx\",\n  _s = $RefreshSig$();\nimport { useTransition, animated } from '@react-spring/web';\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialTreeData = {\n  id: \"1\",\n  label: \"Root\",\n  x: 250,\n  y: 50,\n  children: [{\n    id: \"2\",\n    label: \"Child 1\",\n    x: 150,\n    y: 150,\n    children: [{\n      id: \"3\",\n      label: \"Child 1.1\",\n      x: 100,\n      y: 250\n    }]\n  }, {\n    id: \"3\",\n    label: \"Child 2\",\n    x: 350,\n    y: 150,\n    children: []\n  }]\n};\nconst [treeData, setTreeData] = useState(initialTreeData);\nexport class MinHeap {\n  display() {\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"500\",\n      height: \"500\",\n      children: /*#__PURE__*/_jsxDEV(AnimatedTree, {\n        data: treeData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this);\n  }\n  insert(value) {\n    const newChild = {\n      id: \"2\",\n      label: value,\n      x: 200,\n      y: 200,\n      children: []\n    };\n  }\n}\n// Function to add a new child to a node\nconst addChild = (parentId, newChild) => {\n  const updatedTree = node => {\n    if (node.id === parentId) {\n      // Ensure `children` is always an array\n      const updatedChildren = node.children ? [...node.children, newChild] : [newChild];\n      return {\n        ...node,\n        children: updatedChildren\n      };\n    }\n    if (node.children) {\n      return {\n        ...node,\n        children: node.children.map(updatedTree)\n      };\n    }\n    return node;\n  };\n  setTreeData(updatedTree(treeData));\n};\nconst AnimatedTree = ({\n  data\n}) => {\n  _s();\n  // Transitions for animating each node\n  const nodeTransitions = useTransition([data], {\n    keys: item => item.id,\n    from: {\n      opacity: 0,\n      transform: 'scale(0)'\n    },\n    enter: {\n      opacity: 1,\n      transform: 'scale(1)'\n    },\n    leave: {\n      opacity: 0,\n      transform: 'scale(0)'\n    }\n  });\n\n  // Transitions for animating edges\n  const edgeTransitions = useTransition(data.children || [], {\n    keys: item => item.id,\n    from: {\n      strokeOpacity: 0\n    },\n    enter: {\n      strokeOpacity: 1\n    },\n    leave: {\n      strokeOpacity: 0\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    children: [edgeTransitions((style, item) => /*#__PURE__*/_jsxDEV(animated.line, {\n      x1: data.x,\n      y1: data.y,\n      x2: item.x,\n      y2: item.y,\n      stroke: \"black\",\n      strokeWidth: \"2\",\n      style: style\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }, this)), nodeTransitions((style, item) => /*#__PURE__*/_jsxDEV(animated.g, {\n      style: style,\n      children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: item.x,\n        cy: item.y,\n        r: 30,\n        fill: \"steelblue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: item.x,\n        y: item.y,\n        dy: 5,\n        textAnchor: \"middle\",\n        fill: \"white\",\n        fontSize: \"12\",\n        children: item.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }, this)), data.children && data.children.map(child => /*#__PURE__*/_jsxDEV(AnimatedTree, {\n      data: child\n    }, child.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n_s(AnimatedTree, \"FMAw/Z7K2gFLQlouuvIJdoGHR/0=\", false, function () {\n  return [useTransition, useTransition];\n});\n_c = AnimatedTree;\nvar _c;\n$RefreshReg$(_c, \"AnimatedTree\");","map":{"version":3,"names":["useTransition","animated","useState","jsxDEV","_jsxDEV","initialTreeData","id","label","x","y","children","treeData","setTreeData","MinHeap","display","width","height","AnimatedTree","data","fileName","_jsxFileName","lineNumber","columnNumber","insert","value","newChild","addChild","parentId","updatedTree","node","updatedChildren","map","_s","nodeTransitions","keys","item","from","opacity","transform","enter","leave","edgeTransitions","strokeOpacity","style","line","x1","y1","x2","y2","stroke","strokeWidth","g","cx","cy","r","fill","dy","textAnchor","fontSize","child","_c","$RefreshReg$"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/algorithms/min_heap.tsx"],"sourcesContent":["import {Algorithm} from \"./algorithm_interface\";\r\nimport { useTransition, animated } from '@react-spring/web';\r\nimport {useState} from \"react\";\r\n\r\nconst initialTreeData = {\r\n    id: \"1\",\r\n    label: \"Root\",\r\n    x: 250,\r\n    y: 50,\r\n    children: [\r\n        {\r\n            id: \"2\",\r\n            label: \"Child 1\",\r\n            x: 150,\r\n            y: 150,\r\n            children: [\r\n                { id: \"3\", label: \"Child 1.1\", x: 100, y: 250 }\r\n            ]\r\n        },\r\n        {\r\n            id: \"3\",\r\n            label: \"Child 2\",\r\n            x: 350,\r\n            y: 150,\r\n            children: []\r\n        }\r\n    ]\r\n};\r\n\r\nconst [treeData, setTreeData] = useState<TreeNode>(initialTreeData);\r\n\r\nexport class MinHeap implements Algorithm {\r\n\r\n    display() {\r\n\r\n        return (\r\n            <svg width=\"500\" height=\"500\">\r\n                <AnimatedTree data={treeData}/>\r\n            </svg>\r\n        )\r\n    }\r\n\r\n    insert(value : number | string) {\r\n        const newChild: TreeNode = {\r\n            id: \"2\",\r\n            label: value,\r\n            x: 200,\r\n            y: 200,\r\n            children: []\r\n        };\r\n\r\n    }\r\n}\r\n\r\ninterface TreeNode {\r\n    id: string;\r\n    label: string | number;\r\n    x: number;\r\n    y: number;\r\n    children: TreeNode[];\r\n}\r\n\r\n// Function to add a new child to a node\r\nconst addChild = (parentId: string, newChild: TreeNode) => {\r\n    const updatedTree = (node: TreeNode): TreeNode => {\r\n        if (node.id === parentId) {\r\n            // Ensure `children` is always an array\r\n            const updatedChildren = node.children ? [...node.children, newChild] : [newChild];\r\n            return { ...node, children: updatedChildren };\r\n        }\r\n\r\n        if (node.children) {\r\n            return { ...node, children: node.children.map(updatedTree) };\r\n        }\r\n\r\n        return node;\r\n    };\r\n\r\n    setTreeData(updatedTree(treeData));\r\n};\r\n\r\nconst AnimatedTree = ({ data }: { data: TreeNode }) => {\r\n    // Transitions for animating each node\r\n    const nodeTransitions = useTransition([data], {\r\n        keys: (item) => item.id,\r\n        from: { opacity: 0, transform: 'scale(0)' },\r\n        enter: { opacity: 1, transform: 'scale(1)' },\r\n        leave: { opacity: 0, transform: 'scale(0)' },\r\n    });\r\n\r\n    // Transitions for animating edges\r\n    const edgeTransitions = useTransition(data.children || [], {\r\n        keys: (item) => item.id,\r\n        from: { strokeOpacity: 0 },\r\n        enter: { strokeOpacity: 1 },\r\n        leave: { strokeOpacity: 0 },\r\n    });\r\n\r\n    return (\r\n        <g>\r\n\r\n            {/* Render the edges (lines) */}\r\n            {edgeTransitions((style, item) => (\r\n                <animated.line\r\n                    x1={data.x}\r\n                    y1={data.y}\r\n                    x2={item.x}\r\n                    y2={item.y}\r\n                    stroke=\"black\"\r\n                    strokeWidth=\"2\"\r\n                    style={style}\r\n                />\r\n            ))}\r\n\r\n            {/* Render the node (circle) */}\r\n            {nodeTransitions((style, item) => (\r\n                <animated.g style={style}>\r\n                    <circle cx={item.x} cy={item.y} r={30} fill=\"steelblue\" />\r\n                    <text x={item.x} y={item.y} dy={5} textAnchor=\"middle\" fill=\"white\" fontSize=\"12\">\r\n                        {item.label}\r\n                    </text>\r\n                </animated.g>\r\n            ))}\r\n\r\n            {/* Recursively render child nodes */}\r\n            {data.children && data.children.map((child) => (\r\n                <AnimatedTree key={child.id} data={child} />\r\n            ))}\r\n        </g>\r\n    );\r\n};\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}