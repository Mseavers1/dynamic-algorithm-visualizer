{"ast":null,"code":"export class TreeAddInstruction {\n  constructor(_index, value) {\n    this.index = void 0;\n    this.value = void 0;\n    this.getNodePosition = index => {\n      if (index < 0 || isNaN(index)) return {\n        x: 0,\n        y: 0\n      };\n      if (index === 0) return {\n        x: 250,\n        y: 50\n      }; // Root at the center\n\n      const depth = Math.floor(Math.log2(index + 1)); // Get depth in the tree\n      const xSpacing = 200 / (depth + 1); // Adjust x spacing\n      const ySpacing = 80; // Vertical spacing\n\n      const parentIndex = Math.floor((index - 1) / 2);\n      const parentPos = this.getNodePosition(parentIndex);\n      const isLeftChild = index % 2 === 1;\n      const xOffset = isLeftChild ? -xSpacing : xSpacing;\n      return {\n        x: parentPos.x + xOffset,\n        y: parentPos.y + ySpacing\n      };\n    };\n    this.index = _index;\n    this.value = value;\n  }\n  async process(svg) {\n    const position = this.getNodePosition(this.index);\n    const parentIndex = Math.floor((this.index - 1) / 2);\n    const hasParent = parentIndex >= 0;\n    let nodesGroup = svg.select(\"g.nodes\");\n    let edgesGroup = svg.select(\"g.edges\");\n    if (nodesGroup.empty()) {\n      nodesGroup = svg.append(\"g\").attr(\"class\", \"nodes\");\n    }\n    if (edgesGroup.empty()) {\n      edgesGroup = svg.append(\"g\").attr(\"class\", \"edges\");\n    }\n\n    // Creates the circle node on screen\n    const nodeElement = nodesGroup.append(\"circle\").attr(\"cx\", 200).attr(\"cy\", 200).attr(\"r\", 20).attr(\"class\", \"node\").style(\"opacity\", 0);\n\n    // Creates the text label on screen\n    const label = nodesGroup.append(\"text\").attr(\"x\", 200).attr(\"y\", 200).attr(\"class\", \"label\").attr(\"text-anchor\", \"middle\").attr(\"alignment-baseline\", \"middle\").style(\"fill\", \"white\").style(\"font-size\", \"12px\").text(this.value);\n    const nodeTransition = nodeElement.transition().duration(1000).style(\"opacity\", 1).attr(\"cx\", position.x).attr(\"cy\", position.y);\n    const labelTransition = label.transition().duration(1000).style(\"opacity\", 1).attr(\"x\", position.x).attr(\"y\", position.y);\n    await Promise.all([nodeTransition.end(), labelTransition.end()]);\n  }\n}","map":{"version":3,"names":["TreeAddInstruction","constructor","index","value","getNodePosition","isNaN","x","y","depth","Math","floor","log2","xSpacing","ySpacing","parentIndex","parentPos","isLeftChild","xOffset","process","svg","position","hasParent","nodesGroup","select","edgesGroup","empty","append","attr","nodeElement","style","label","text","nodeTransition","transition","duration","labelTransition","Promise","all","end"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/tree_add_instruction.tsx"],"sourcesContent":["import {Instruction} from \"./i_instruction\";\r\nimport * as d3 from \"d3\";\r\nimport {BaseType} from \"d3\";\r\n\r\nexport class TreeAddInstruction implements Instruction {\r\n\r\n    index: number;\r\n    value: number | string;\r\n\r\n    constructor(index: number, value: number | string) {\r\n        this.index = index;\r\n        this.value = value;\r\n    }\r\n\r\n    async process(svg: d3.Selection<BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n\r\n        const position = this.getNodePosition(this.index);\r\n        const parentIndex = Math.floor((this.index as number - 1) / 2);\r\n        const hasParent = parentIndex >= 0;\r\n\r\n        let nodesGroup = svg.select<SVGGElement>(\"g.nodes\");\r\n        let edgesGroup = svg.select<SVGGElement>(\"g.edges\");\r\n\r\n        if (nodesGroup.empty()) {\r\n            nodesGroup = svg.append(\"g\").attr(\"class\", \"nodes\");\r\n        }\r\n\r\n        if (edgesGroup.empty()) {\r\n            edgesGroup = svg.append(\"g\").attr(\"class\", \"edges\");\r\n        }\r\n\r\n        // Creates the circle node on screen\r\n        const nodeElement = nodesGroup.append(\"circle\")\r\n            .attr(\"cx\", 200)\r\n            .attr(\"cy\", 200)\r\n            .attr(\"r\", 20)\r\n            .attr(\"class\", \"node\")\r\n            .style(\"opacity\", 0);\r\n\r\n        // Creates the text label on screen\r\n        const label = nodesGroup.append(\"text\")\r\n            .attr(\"x\", 200)\r\n            .attr(\"y\", 200)\r\n            .attr(\"class\", \"label\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .attr(\"alignment-baseline\", \"middle\")\r\n            .style(\"fill\", \"white\")\r\n            .style(\"font-size\", \"12px\")\r\n            .text(this.value);\r\n\r\n        const nodeTransition = nodeElement.transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"cx\", position.x)\r\n            .attr(\"cy\", position.y)\r\n\r\n        const labelTransition = label.transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"x\", position.x)\r\n            .attr(\"y\", position.y)\r\n\r\n\r\n        await Promise.all([nodeTransition.end(), labelTransition.end()]);\r\n    }\r\n\r\n    getNodePosition = (index: number): { x: number, y: number } => {\r\n        if (index < 0 || isNaN(index)) return { x: 0, y: 0 };\r\n        if (index === 0) return { x: 250, y: 50 }; // Root at the center\r\n\r\n        const depth = Math.floor(Math.log2(index + 1)); // Get depth in the tree\r\n        const xSpacing = (200) / (depth + 1); // Adjust x spacing\r\n        const ySpacing = 80; // Vertical spacing\r\n\r\n        const parentIndex = Math.floor((index - 1) / 2);\r\n        const parentPos = this.getNodePosition(parentIndex);\r\n\r\n        const isLeftChild = index % 2 === 1;\r\n        const xOffset = isLeftChild ? -xSpacing : xSpacing;\r\n\r\n        return { x: parentPos.x + xOffset, y: parentPos.y + ySpacing };\r\n    };\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}