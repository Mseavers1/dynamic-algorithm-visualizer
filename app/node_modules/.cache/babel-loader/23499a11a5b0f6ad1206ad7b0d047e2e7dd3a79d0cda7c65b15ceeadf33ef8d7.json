{"ast":null,"code":"import { BinaryTree } from \"../structures/binary_tree\";\nexport class MinHeap {\n  constructor(isDynamicSize, animator) {\n    this.isDynamicSize = isDynamicSize;\n    this.tree = void 0;\n    this.animator = void 0;\n    this.tree = new BinaryTree();\n    this.animator = animator;\n  }\n  getIsAnimating() {\n    return this.animator.getIsAnimating();\n  }\n  insert(value) {\n    var _this$tree;\n    (_this$tree = this.tree) === null || _this$tree === void 0 ? void 0 : _this$tree.add(value);\n    const newInstruction = {\n      type: 'add',\n      value: value,\n      index: this.tree.length - 1\n    };\n\n    //this.setInstructions((prevInstructions) => [...prevInstructions, newInstruction]);\n    this.animator.add_instruction(newInstruction);\n    this.heapify(this.tree.length);\n    this.animator.start_processing();\n\n    //alert(this.tree?.get_current_height())\n\n    //if (this.isDynamicSize && current_height > this.current_max_height) this.current_max_height = current_height + 1;\n  }\n  delete(value) {\n    var _this$tree2;\n    const i = this.tree.search(value);\n    if (i < 0) return;\n\n    // First Swap current and Last index\n    this.tree.swap(i + 1, this.tree.length);\n    let newInstruction = {\n      type: 'swap',\n      fromIndex: this.tree.length - 1,\n      toIndex: i\n    };\n    this.animator.add_instruction(newInstruction);\n    (_this$tree2 = this.tree) === null || _this$tree2 === void 0 ? void 0 : _this$tree2.remove(this.tree.length - 1);\n    newInstruction = {\n      type: 'remove',\n      index: this.tree.length\n    };\n    this.animator.add_instruction(newInstruction);\n    this.heapifyDown(i);\n    this.animator.start_processing();\n  }\n  heapify(cur_index) {\n    // At root, do not heapify.\n    if (cur_index == 1) return;\n\n    // Check if parent is less than the current index\n    const cur = this.tree.get(cur_index);\n    const par_index = this.tree.get_parent(cur_index);\n    const par_val = this.tree.get(par_index);\n    if (cur >= par_val) return;\n\n    // If so swap the indexes\n    this.tree.swap(cur_index, par_index);\n    const newInstruction = {\n      type: 'swap',\n      fromIndex: par_index - 1,\n      toIndex: cur_index - 1\n    };\n\n    //this.setInstructions((prevInstructions) => [...prevInstructions, newInstruction]);\n    this.animator.add_instruction(newInstruction);\n\n    // Heapify on the new cur index\n    this.heapify(par_index);\n  }\n  heapifyDown(cur_index) {\n    const left = 2 * cur_index + 1;\n    const right = 2 * cur_index + 2;\n    const vals = this.tree.values;\n    const smallest = vals[left] > vals[right] ? right : left;\n    if (vals[smallest] < vals[cur_index]) {\n      this.tree.swap(cur_index, smallest);\n      const newInstruction = {\n        type: 'swap',\n        fromIndex: cur_index,\n        toIndex: smallest\n      };\n      this.animator.add_instruction(newInstruction);\n      this.heapifyDown(smallest);\n    }\n  }\n}","map":{"version":3,"names":["BinaryTree","MinHeap","constructor","isDynamicSize","animator","tree","getIsAnimating","insert","value","_this$tree","add","newInstruction","type","index","length","add_instruction","heapify","start_processing","delete","_this$tree2","i","search","swap","fromIndex","toIndex","remove","heapifyDown","cur_index","cur","get","par_index","get_parent","par_val","left","right","vals","values","smallest"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/algorithms/min_heap.tsx"],"sourcesContent":["import { Algorithm } from \"./algorithm_interface\";\r\nimport {BinaryTree} from \"../structures/binary_tree\";\r\n\r\nimport {Instruction} from \"./tree_intructions\";\r\nimport React from \"react\";\r\nimport {TreeAnimate} from \"../structures/tree_animator\";\r\n\r\nexport class MinHeap implements Algorithm {\r\n\r\n    private tree : BinaryTree;\r\n\r\n    private animator: TreeAnimate;\r\n\r\n    constructor(\r\n        private isDynamicSize: boolean,\r\n        animator: TreeAnimate,\r\n    ) {\r\n        this.tree = new BinaryTree();\r\n        this.animator = animator;\r\n    }\r\n\r\n    getIsAnimating(): boolean {\r\n        return this.animator.getIsAnimating();\r\n    }\r\n\r\n    insert(value: string | number) : void {\r\n\r\n        this.tree?.add(value);\r\n\r\n        const newInstruction: Instruction = {\r\n            type: 'add',\r\n            value: value,\r\n            index: this.tree.length - 1,\r\n        };\r\n\r\n        //this.setInstructions((prevInstructions) => [...prevInstructions, newInstruction]);\r\n        this.animator.add_instruction(newInstruction);\r\n\r\n        this.heapify(this.tree.length);\r\n\r\n        this.animator.start_processing()\r\n\r\n        //alert(this.tree?.get_current_height())\r\n\r\n        //if (this.isDynamicSize && current_height > this.current_max_height) this.current_max_height = current_height + 1;\r\n\r\n    }\r\n\r\n    delete(value: string | number) : void {\r\n\r\n        const i = this.tree.search(value);\r\n\r\n        if (i < 0) return;\r\n\r\n        // First Swap current and Last index\r\n        this.tree.swap(i + 1, this.tree.length);\r\n\r\n        let newInstruction: Instruction = {\r\n            type: 'swap',\r\n            fromIndex: this.tree.length - 1,\r\n            toIndex: i,\r\n        };\r\n\r\n        this.animator.add_instruction(newInstruction)\r\n\r\n        this.tree?.remove(this.tree.length - 1);\r\n\r\n        newInstruction = {\r\n            type: 'remove',\r\n            index: this.tree.length,\r\n        };\r\n\r\n        this.animator.add_instruction(newInstruction);\r\n\r\n        this.heapifyDown(i);\r\n\r\n        this.animator.start_processing();\r\n    }\r\n\r\n    heapify(cur_index : number): void {\r\n\r\n        // At root, do not heapify.\r\n        if (cur_index == 1) return;\r\n\r\n        // Check if parent is less than the current index\r\n        const cur = this.tree.get(cur_index);\r\n        const par_index = this.tree.get_parent(cur_index);\r\n        const par_val = this.tree.get(par_index);\r\n\r\n        if (cur >= par_val) return;\r\n\r\n        // If so swap the indexes\r\n        this.tree.swap(cur_index, par_index);\r\n\r\n        const newInstruction: Instruction = {\r\n            type: 'swap',\r\n            fromIndex: par_index - 1,\r\n            toIndex: cur_index - 1,\r\n        };\r\n\r\n        //this.setInstructions((prevInstructions) => [...prevInstructions, newInstruction]);\r\n        this.animator.add_instruction(newInstruction);\r\n\r\n        // Heapify on the new cur index\r\n        this.heapify(par_index);\r\n    }\r\n\r\n    heapifyDown(cur_index : number) : void {\r\n\r\n        const left: number = 2 * cur_index + 1;\r\n        const right: number = 2 * cur_index + 2;\r\n        const vals = this.tree.values;\r\n\r\n        const smallest = vals[left] > vals[right] ? right : left;\r\n\r\n        if (vals[smallest] < vals[cur_index]) {\r\n            this.tree.swap(cur_index, smallest);\r\n\r\n            const newInstruction: Instruction = {\r\n                type: 'swap',\r\n                fromIndex: cur_index,\r\n                toIndex: smallest,\r\n            };\r\n\r\n            this.animator.add_instruction(newInstruction);\r\n\r\n            this.heapifyDown(smallest);\r\n        }\r\n    }\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}