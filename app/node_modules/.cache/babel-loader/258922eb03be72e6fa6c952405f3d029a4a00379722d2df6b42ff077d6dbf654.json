{"ast":null,"code":"import * as d3 from \"d3\";\nexport class TreeAnimate {\n  constructor() {\n    this.instructions = void 0;\n    this.current_nodes = void 0;\n    this.processInstructions = async svg => {\n      for (let instruction of this.instructions) {\n        if (instruction.type === 'add' && instruction.value) {\n          // Wait for the previous node to finish its animation before adding the next one\n          await this.addNode(svg, instruction);\n        }\n        if (instruction.type === 'swap') {\n          await this.swapNodes(svg, this.current_nodes[instruction.toIndex], this.current_nodes[instruction.fromIndex]);\n          const i = this.current_nodes[instruction.toIndex].index;\n          this.current_nodes[instruction.toIndex].index = this.current_nodes[instruction.fromIndex].index;\n          this.current_nodes[instruction.fromIndex].index = i;\n          const node = this.current_nodes[instruction.toIndex];\n          this.current_nodes[instruction.toIndex] = this.current_nodes[instruction.fromIndex];\n          this.current_nodes[instruction.fromIndex] = node;\n        }\n      }\n    };\n    this.addNode = (svg, instruction) => {\n      return new Promise(resolve => {\n        const nodeElement = svg.append(\"circle\").attr(\"cx\", 200) // Set starting x position\n        .attr(\"cy\", 200) // Set starting y position\n        .attr(\"r\", 20).attr(\"class\", \"node\").style(\"opacity\", 0); // Start with invisible node\n\n        const label = svg.append(\"text\").attr(\"x\", 200) // Same x position as the circle\n        .attr(\"y\", 200) // Same y position as the circle\n        .attr(\"class\", \"label\").attr(\"text-anchor\", \"middle\") // Center the text horizontally\n        .attr(\"alignment-baseline\", \"middle\") // Center the text vertically\n        .style(\"fill\", \"white\") // Set text color\n        .style(\"font-size\", \"12px\").text(instruction.value);\n        const newNode = {\n          node: nodeElement,\n          label: label,\n          index: instruction.index\n        };\n        this.current_nodes.push(newNode);\n\n        // Animate the node: fade in and move\n        nodeElement.transition().duration(1000) // Duration of 1 second\n        .style(\"opacity\", 1) // Fade in the node\n        .attr(\"cx\", this.getNodePosition(instruction.index).x).attr(\"cy\", this.getNodePosition(instruction.index).y); // Keep y position constant for simplicity\n\n        label.transition().duration(1000) // Duration of 1 second (same as node)\n        .style(\"opacity\", 1).attr(\"x\", this.getNodePosition(instruction.index).x).attr(\"y\", this.getNodePosition(instruction.index).y);\n\n        // Resolve the promise after the animation duration\n        setTimeout(() => resolve(), 1000); // Wait for the animation to finish (1000ms)\n      });\n    };\n    this.getNodePosition = index => {\n      if (index < 0 || isNaN(index)) return {\n        x: 0,\n        y: 0\n      };\n      if (index === 0) return {\n        x: 250,\n        y: 50\n      }; // Root at the center\n\n      const depth = Math.floor(Math.log2(index + 1)); // Get depth in the tree\n      const xSpacing = 200 / (depth + 1); // Adjust x spacing\n      const ySpacing = 80; // Vertical spacing\n\n      const parentIndex = Math.floor((index - 1) / 2);\n      const parentPos = this.getNodePosition(parentIndex);\n      const isLeftChild = index % 2 === 1;\n      const xOffset = isLeftChild ? -xSpacing : xSpacing;\n      return {\n        x: parentPos.x + xOffset,\n        y: parentPos.y + ySpacing\n      };\n    };\n    this.swapNodes = (svg, nodeA, nodeB) => {\n      //alert(nodes.length);\n\n      return new Promise(resolve => {\n        const node1 = nodeA.node;\n        const label1 = nodeA.label;\n        const node2 = nodeB.node;\n        const label2 = nodeB.label;\n        const node1Position = {\n          x: parseFloat(node1.attr(\"cx\")),\n          y: parseFloat(node1.attr(\"cy\"))\n        };\n        const node2Position = {\n          x: parseFloat(node2.attr(\"cx\")),\n          y: parseFloat(node2.attr(\"cy\"))\n        };\n\n        // Animate node1 to node2's position\n        node1.transition().duration(1000).attr(\"cx\", node2Position.x).attr(\"cy\", node2Position.y);\n\n        // Animate label1 to node2's position\n        label1.transition().duration(1000).attr(\"x\", node2Position.x).attr(\"y\", node2Position.y);\n\n        // Animate node2 to node1's position\n        node2.transition().duration(1000).attr(\"cx\", node1Position.x).attr(\"cy\", node1Position.y);\n\n        // Animate label2 to node1's position\n        label2.transition().duration(1000).attr(\"x\", node1Position.x).attr(\"y\", node1Position.y);\n        setTimeout(() => resolve(), 1000);\n      });\n    };\n    this.instructions = [];\n    this.current_nodes = [];\n  }\n  add_instruction(instruction) {\n    // Adds it\n    this.instructions.push(instruction);\n  }\n  start_processing() {\n    const svg = d3.select(\"#svg-container\").attr(\"width\", 500).attr(\"height\", 500);\n    this.processInstructions(svg);\n  }\n}","map":{"version":3,"names":["d3","TreeAnimate","constructor","instructions","current_nodes","processInstructions","svg","instruction","type","value","addNode","swapNodes","toIndex","fromIndex","i","index","node","Promise","resolve","nodeElement","append","attr","style","label","text","newNode","push","transition","duration","getNodePosition","x","y","setTimeout","isNaN","depth","Math","floor","log2","xSpacing","ySpacing","parentIndex","parentPos","isLeftChild","xOffset","nodeA","nodeB","node1","label1","node2","label2","node1Position","parseFloat","node2Position","add_instruction","start_processing","select"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/algorithms/tree_animator.ts"],"sourcesContent":["import {Instruction, NodeData} from \"./tree_intructions\";\r\nimport * as d3 from \"d3\";\r\nimport {BaseType} from \"d3\";\r\n\r\nexport class TreeAnimate {\r\n\r\n    private instructions : Instruction[];\r\n    private current_nodes : NodeData[];\r\n\r\n    constructor() {\r\n        this.instructions = [];\r\n        this.current_nodes = [];\r\n    }\r\n\r\n    add_instruction(instruction : Instruction) {\r\n\r\n        // Adds it\r\n        this.instructions.push(instruction);\r\n    }\r\n\r\n    start_processing() {\r\n        const svg = d3.select(\"#svg-container\")\r\n            .attr(\"width\", 500)\r\n            .attr(\"height\", 500);\r\n\r\n        this.processInstructions(svg);\r\n    }\r\n\r\n    processInstructions = async (svg: d3.Selection<BaseType, unknown, HTMLElement, any>) => {\r\n        for (let instruction of this.instructions) {\r\n            if (instruction.type === 'add' && instruction.value) {\r\n                // Wait for the previous node to finish its animation before adding the next one\r\n                await this.addNode(svg, instruction);\r\n            }\r\n\r\n            if (instruction.type === 'swap') {\r\n\r\n                await this.swapNodes(svg, this.current_nodes[instruction.toIndex as number], this.current_nodes[instruction.fromIndex as number]);\r\n\r\n                const i = this.current_nodes[instruction.toIndex as number].index;\r\n                this.current_nodes[instruction.toIndex as number].index = this.current_nodes[instruction.fromIndex as number].index;\r\n                this.current_nodes[instruction.fromIndex as number].index = i;\r\n\r\n                const node = this.current_nodes[instruction.toIndex as number]\r\n                this.current_nodes[instruction.toIndex as number] = this.current_nodes[instruction.fromIndex as number];\r\n                this.current_nodes[instruction.fromIndex as number] = node;\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    addNode = (svg: d3.Selection<BaseType, unknown, HTMLElement, any>, instruction: Instruction) => {\r\n\r\n        return new Promise<void>((resolve) => {\r\n            const nodeElement = svg.append(\"circle\")\r\n                .attr(\"cx\", 200)  // Set starting x position\r\n                .attr(\"cy\", 200)  // Set starting y position\r\n                .attr(\"r\", 20)\r\n                .attr(\"class\", \"node\")\r\n                .style(\"opacity\", 0);  // Start with invisible node\r\n\r\n            const label = svg.append(\"text\")\r\n                .attr(\"x\", 200)  // Same x position as the circle\r\n                .attr(\"y\", 200)  // Same y position as the circle\r\n                .attr(\"class\", \"label\")\r\n                .attr(\"text-anchor\", \"middle\")  // Center the text horizontally\r\n                .attr(\"alignment-baseline\", \"middle\")  // Center the text vertically\r\n                .style(\"fill\", \"white\")  // Set text color\r\n                .style(\"font-size\", \"12px\")\r\n                .text(instruction.value as number | string);\r\n\r\n            const newNode: NodeData = {\r\n                node: nodeElement,\r\n                label: label,\r\n                index: instruction.index as number,\r\n            };\r\n\r\n            this.current_nodes.push(newNode);\r\n\r\n            // Animate the node: fade in and move\r\n            nodeElement.transition()\r\n                .duration(1000)  // Duration of 1 second\r\n                .style(\"opacity\", 1)  // Fade in the node\r\n                .attr(\"cx\", this.getNodePosition(instruction.index as number).x)\r\n                .attr(\"cy\", this.getNodePosition(instruction.index as number).y);  // Keep y position constant for simplicity\r\n\r\n            label.transition()\r\n                .duration(1000)  // Duration of 1 second (same as node)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"x\", this.getNodePosition(instruction.index as number).x)\r\n                .attr(\"y\", this.getNodePosition(instruction.index as number).y);\r\n\r\n            // Resolve the promise after the animation duration\r\n            setTimeout(() => resolve(), 1000);  // Wait for the animation to finish (1000ms)\r\n        });\r\n    };\r\n\r\n    getNodePosition = (index: number): { x: number, y: number } => {\r\n        if (index < 0 || isNaN(index)) return { x: 0, y: 0 };\r\n        if (index === 0) return { x: 250, y: 50 }; // Root at the center\r\n\r\n        const depth = Math.floor(Math.log2(index + 1)); // Get depth in the tree\r\n        const xSpacing = (200) / (depth + 1); // Adjust x spacing\r\n        const ySpacing = 80; // Vertical spacing\r\n\r\n        const parentIndex = Math.floor((index - 1) / 2);\r\n        const parentPos = this.getNodePosition(parentIndex);\r\n\r\n        const isLeftChild = index % 2 === 1;\r\n        const xOffset = isLeftChild ? -xSpacing : xSpacing;\r\n\r\n        return { x: parentPos.x + xOffset, y: parentPos.y + ySpacing };\r\n    };\r\n\r\n    swapNodes = (\r\n        svg: d3.Selection<BaseType, unknown, HTMLElement, any>,\r\n        nodeA: NodeData,\r\n        nodeB: NodeData,\r\n    ) => {\r\n\r\n        //alert(nodes.length);\r\n\r\n        return new Promise<void>((resolve) => {\r\n            const node1 = nodeA.node;\r\n            const label1 = nodeA.label;\r\n            const node2 = nodeB.node;\r\n            const label2 = nodeB.label;\r\n\r\n\r\n            const node1Position = { x: parseFloat(node1.attr(\"cx\")), y: parseFloat(node1.attr(\"cy\")) };\r\n            const node2Position = { x: parseFloat(node2.attr(\"cx\")), y: parseFloat(node2.attr(\"cy\")) };\r\n\r\n            // Animate node1 to node2's position\r\n            node1.transition()\r\n                .duration(1000)\r\n                .attr(\"cx\", node2Position.x)\r\n                .attr(\"cy\", node2Position.y);\r\n\r\n            // Animate label1 to node2's position\r\n            label1.transition()\r\n                .duration(1000)\r\n                .attr(\"x\", node2Position.x)\r\n                .attr(\"y\", node2Position.y);\r\n\r\n            // Animate node2 to node1's position\r\n            node2.transition()\r\n                .duration(1000)\r\n                .attr(\"cx\", node1Position.x)\r\n                .attr(\"cy\", node1Position.y);\r\n\r\n            // Animate label2 to node1's position\r\n            label2.transition()\r\n                .duration(1000)\r\n                .attr(\"x\", node1Position.x)\r\n                .attr(\"y\", node1Position.y);\r\n\r\n            setTimeout(() => resolve(), 1000);\r\n        });\r\n    };\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}