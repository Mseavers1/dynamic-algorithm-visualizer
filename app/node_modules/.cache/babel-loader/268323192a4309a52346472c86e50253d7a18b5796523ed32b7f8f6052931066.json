{"ast":null,"code":"import { BinaryTree } from \"../structures/binary_tree\";\nimport { TreeAddInstruction } from \"../Instructions/tree_add_instruction\";\nexport class MinHeap {\n  constructor(isDynamicSize, animator) {\n    this.isDynamicSize = isDynamicSize;\n    this.tree = void 0;\n    this.animator = void 0;\n    this.maxSize = 5;\n    this.nodes = [];\n    this.tree = new BinaryTree();\n    this.animator = animator;\n  }\n  getRandomString(length) {\n    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    let result = \"\";\n    for (let i = 0; i < length; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n  generate_random(min, max, size, allowStrings = false, allowNumbers = false, allowDecimal = true, maxDecimal = 3) {\n    // Clear heap\n    this.empty_tree();\n\n    // Check if both are false\n    if (!allowNumbers && !allowStrings) allowNumbers = true;\n    let numElement = null;\n    let stringElement = \"\";\n\n    // Randomize\n    for (let i = 0; i < size; i++) {\n      if (allowNumbers) {\n        if (allowDecimal) {\n          let additional = Math.pow(10, -maxDecimal);\n          numElement = parseFloat((Math.random() * (max - min + additional) + min).toFixed(maxDecimal));\n        } else {\n          numElement = Math.floor(Math.random() * (max - min) + min);\n        }\n      }\n      if (allowStrings) {\n        stringElement = this.getRandomString(5);\n      }\n\n      // If both are allowed, add only one\n      if (allowNumbers && allowStrings) {\n        let rand = Math.random();\n\n        // Add number\n        if (rand >= 0.5) {\n          this.add_instant_random(numElement);\n        }\n        // Add string\n        else {\n          this.add_instant_random(stringElement);\n        }\n      }\n      // Only adds number\n      else if (allowNumbers) {\n        this.add_instant_random(numElement);\n      }\n      // Only adds strings\n      else {\n        this.add_instant_random(stringElement);\n      }\n    }\n\n    //alert(this.tree.values)\n\n    // Heapify\n    this.heapify_full();\n\n    //alert(this.tree.values)\n    //this.animator.start_processing();\n  }\n  add_instant_random(value) {\n    var _this$tree;\n    (_this$tree = this.tree) === null || _this$tree === void 0 ? void 0 : _this$tree.add(value);\n\n    //this.animator.add_instruction(instruction);\n  }\n  clear() {\n    this.empty_tree();\n    //this.animator.start_processing()\n  }\n  empty_tree() {\n    this.tree.clear();\n\n    //this.animator.add_instruction(newInstruction);\n  }\n  insert(value) {\n    var _this$tree2, _this$tree3;\n    (_this$tree2 = this.tree) === null || _this$tree2 === void 0 ? void 0 : _this$tree2.add(value);\n    this.animator.addInstruction(new TreeAddInstruction(((_this$tree3 = this.tree) === null || _this$tree3 === void 0 ? void 0 : _this$tree3.length) - 1, value, this.nodes));\n    this.heapifyUp();\n    this.animator.processInstructions();\n  }\n  delete(value) {\n    const i = this.tree.search(value);\n    if (i < 0) return;\n\n    // Swap the last element with the element to be deleted\n    this.tree.swap(i, this.tree.length - 1);\n\n    //this.animator.add_instruction(newInstruction);\n\n    this.tree.remove(this.tree.length - 1);\n\n    //this.animator.add_instruction({\n    //    type: 'remove',\n    //    index: i,\n    //});\n\n    // Now restore the heap property after deletion (heapify down)\n    this.heapifyDown(i);\n\n    //this.animator.start_processing();\n  }\n  heapify_full() {\n    let last_node_with_children = this.tree.length / 2 - 1;\n    for (let i = last_node_with_children; i >= 0; --i) {\n      this.heapifyDown(i);\n    }\n  }\n  heapifyUp() {\n    let cur_index = this.tree.length - 1; // Start from the last node\n    let parentIndex = this.tree.get_parent(cur_index);\n\n    // Ensure the current index is greater than 0 (non-root node)\n    while (cur_index > 0 && this.tree.get(cur_index) < this.tree.get(parentIndex)) {\n      this.tree.swap(cur_index, parentIndex);\n      //this.animator.add_instruction({\n      //    type: 'swap',\n      //    fromIndex: cur_index,\n      //    toIndex: parentIndex,\n      //});\n\n      cur_index = parentIndex;\n      parentIndex = this.tree.get_parent(cur_index);\n    }\n  }\n  heapifyDown(cur_index) {\n    let x = cur_index;\n    while (true) {\n      const left = 2 * x + 1;\n      const right = 2 * x + 2;\n      let smallest = x;\n      const vals = this.tree.values;\n      if (left < this.tree.length && vals[left] < vals[smallest]) {\n        smallest = left;\n      }\n      if (right < this.tree.length && vals[right] < vals[smallest]) {\n        smallest = right;\n      }\n      if (smallest === x) break;\n\n      // Swap current node with the smallest child\n      this.tree.swap(x, smallest);\n      //this.animator.add_instruction({\n      //    type: 'swap',\n      //    fromIndex: x,\n      //    toIndex: smallest,\n      //});\n\n      x = smallest;\n    }\n  }\n}","map":{"version":3,"names":["BinaryTree","TreeAddInstruction","MinHeap","constructor","isDynamicSize","animator","tree","maxSize","nodes","getRandomString","length","chars","result","i","charAt","Math","floor","random","generate_random","min","max","size","allowStrings","allowNumbers","allowDecimal","maxDecimal","empty_tree","numElement","stringElement","additional","pow","parseFloat","toFixed","rand","add_instant_random","heapify_full","value","_this$tree","add","clear","insert","_this$tree2","_this$tree3","addInstruction","heapifyUp","processInstructions","delete","search","swap","remove","heapifyDown","last_node_with_children","cur_index","parentIndex","get_parent","get","x","left","right","smallest","vals","values"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/algorithms/min_heap.tsx"],"sourcesContent":["import { Algorithm } from \"./algorithm_interface\";\r\nimport {BinaryTree} from \"../structures/binary_tree\";\r\nimport {AnimationPlayer} from \"../animation_player\";\r\nimport {TreeAddInstruction} from \"../Instructions/tree_add_instruction\";\r\nimport {Node} from \"../pictures/node\"\r\n\r\nexport class MinHeap implements Algorithm {\r\n\r\n    private tree : BinaryTree;\r\n    private animator: AnimationPlayer;\r\n    private maxSize:number = 5;\r\n\r\n    private nodes : Node[] = [];\r\n\r\n    constructor(\r\n        private isDynamicSize: boolean,\r\n        animator: AnimationPlayer,\r\n    ) {\r\n        this.tree = new BinaryTree();\r\n        this.animator = animator;\r\n    }\r\n\r\n    getRandomString(length: number): string {\r\n        const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n        let result = \"\";\r\n        for (let i = 0; i < length; i++) {\r\n            result += chars.charAt(Math.floor(Math.random() * chars.length));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    generate_random(min:number, max:number, size: number, allowStrings: boolean = false, allowNumbers: boolean = false, allowDecimal: boolean = true, maxDecimal: number = 3): void {\r\n\r\n        // Clear heap\r\n        this.empty_tree();\r\n\r\n        // Check if both are false\r\n        if (!allowNumbers && !allowStrings) allowNumbers = true\r\n\r\n        let numElement : number | null = null;\r\n        let stringElement : string = \"\";\r\n\r\n        // Randomize\r\n        for (let i = 0; i < size; i++) {\r\n\r\n            if (allowNumbers) {\r\n\r\n                if (allowDecimal) {\r\n                    let additional = Math.pow(10, -maxDecimal);\r\n                    numElement = parseFloat((Math.random() * (max - min + additional) + min).toFixed(maxDecimal));\r\n                } else {\r\n                    numElement = Math.floor(Math.random() * (max - min) + min);\r\n                }\r\n            }\r\n\r\n            if (allowStrings) {\r\n                stringElement = this.getRandomString(5);\r\n            }\r\n\r\n            // If both are allowed, add only one\r\n            if (allowNumbers && allowStrings) {\r\n\r\n                let rand = Math.random();\r\n\r\n                // Add number\r\n                if (rand >= 0.5) {\r\n                    this.add_instant_random(numElement as number)\r\n                }\r\n                // Add string\r\n                else {\r\n                    this.add_instant_random(stringElement)\r\n                }\r\n            }\r\n            // Only adds number\r\n            else if (allowNumbers) {\r\n                this.add_instant_random(numElement as number)\r\n            }\r\n            // Only adds strings\r\n            else {\r\n                this.add_instant_random(stringElement)\r\n            }\r\n        }\r\n\r\n        //alert(this.tree.values)\r\n\r\n        // Heapify\r\n        this.heapify_full();\r\n\r\n        //alert(this.tree.values)\r\n        //this.animator.start_processing();\r\n    }\r\n\r\n    add_instant_random(value : number | string) {\r\n        this.tree?.add(value);\r\n\r\n        //this.animator.add_instruction(instruction);\r\n    }\r\n\r\n    clear() : void {\r\n        this.empty_tree();\r\n        //this.animator.start_processing()\r\n    }\r\n\r\n    empty_tree() : void {\r\n        this.tree.clear();\r\n\r\n        //this.animator.add_instruction(newInstruction);\r\n    }\r\n\r\n    insert(value: string | number): void {\r\n        this.tree?.add(value);\r\n\r\n        this.animator.addInstruction(new TreeAddInstruction(this.tree?.length - 1, value, this.nodes))\r\n\r\n        this.heapifyUp();\r\n\r\n        this.animator.processInstructions();\r\n\r\n    }\r\n\r\n    delete(value: string | number): void {\r\n        const i = this.tree.search(value);\r\n\r\n        if (i < 0) return;\r\n\r\n        // Swap the last element with the element to be deleted\r\n        this.tree.swap(i, this.tree.length - 1);\r\n\r\n        //this.animator.add_instruction(newInstruction);\r\n\r\n        this.tree.remove(this.tree.length - 1);\r\n\r\n        //this.animator.add_instruction({\r\n        //    type: 'remove',\r\n        //    index: i,\r\n        //});\r\n\r\n        // Now restore the heap property after deletion (heapify down)\r\n        this.heapifyDown(i);\r\n\r\n        //this.animator.start_processing();\r\n    }\r\n\r\n    heapify_full(): void {\r\n        let last_node_with_children = (this.tree.length / 2) - 1;\r\n\r\n        for (let i = last_node_with_children; i >= 0; --i) {\r\n            this.heapifyDown(i)\r\n        }\r\n    }\r\n\r\n    heapifyUp(): void {\r\n        let cur_index = this.tree.length - 1; // Start from the last node\r\n        let parentIndex = this.tree.get_parent(cur_index);\r\n\r\n        // Ensure the current index is greater than 0 (non-root node)\r\n        while (cur_index > 0 && this.tree.get(cur_index) < this.tree.get(parentIndex)) {\r\n            this.tree.swap(cur_index, parentIndex);\r\n            //this.animator.add_instruction({\r\n            //    type: 'swap',\r\n            //    fromIndex: cur_index,\r\n            //    toIndex: parentIndex,\r\n            //});\r\n\r\n            cur_index = parentIndex;\r\n            parentIndex = this.tree.get_parent(cur_index);\r\n        }\r\n    }\r\n\r\n    heapifyDown(cur_index: number): void {\r\n\r\n        let x = cur_index\r\n        while (true) {\r\n            const left = 2 * x + 1;\r\n            const right = 2 * x + 2;\r\n            let smallest = x;\r\n\r\n            const vals = this.tree.values;\r\n            if (left < this.tree.length && vals[left] < vals[smallest]) {\r\n                smallest = left;\r\n            }\r\n\r\n            if (right < this.tree.length && vals[right] < vals[smallest]) {\r\n                smallest = right;\r\n            }\r\n\r\n            if (smallest === x) break;\r\n\r\n            // Swap current node with the smallest child\r\n            this.tree.swap(x, smallest);\r\n            //this.animator.add_instruction({\r\n            //    type: 'swap',\r\n            //    fromIndex: x,\r\n            //    toIndex: smallest,\r\n            //});\r\n\r\n            x = smallest;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}