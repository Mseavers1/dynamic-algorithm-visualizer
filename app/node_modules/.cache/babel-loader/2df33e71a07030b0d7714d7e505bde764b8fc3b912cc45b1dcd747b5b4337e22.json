{"ast":null,"code":"import { Node } from \"../pictures/node\";\nexport class TreeAddInstruction {\n  constructor(_index, value, nodes) {\n    this.index = void 0;\n    this.value = void 0;\n    this.nodes = void 0;\n    this.getNodePosition = index => {\n      if (index < 0 || isNaN(index)) return {\n        x: 0,\n        y: 0\n      };\n      if (index === 0) return {\n        x: 250,\n        y: 50\n      }; // Root at the center\n\n      const depth = Math.floor(Math.log2(index + 1)); // Get depth in the tree\n      const xSpacing = 200 / (depth + 1); // Adjust x spacing\n      const ySpacing = 80; // Vertical spacing\n\n      const parentIndex = Math.floor((index - 1) / 2);\n      const parentPos = this.getNodePosition(parentIndex);\n      const isLeftChild = index % 2 === 1;\n      const xOffset = isLeftChild ? -xSpacing : xSpacing;\n      return {\n        x: parentPos.x + xOffset,\n        y: parentPos.y + ySpacing\n      };\n    };\n    this.index = _index;\n    this.value = value;\n    this.nodes = nodes;\n  }\n  async process(svg) {\n    const position = this.getNodePosition(this.index);\n    const parentIndex = Math.floor((this.index - 1) / 2);\n    const hasParent = parentIndex >= 0;\n    let nodesGroup = svg.select(\"g.nodes\");\n    let edgesGroup = svg.select(\"g.edges\");\n    if (edgesGroup.empty()) {\n      edgesGroup = svg.append(\"g\").attr(\"class\", \"edges\");\n    }\n    if (nodesGroup.empty()) {\n      nodesGroup = svg.append(\"g\").attr(\"class\", \"nodes\");\n    }\n    let edge = null;\n    if (hasParent) {\n      const parentPos = this.getNodePosition(parentIndex);\n      edge = edgesGroup.append(\"line\").attr(\"x1\", parentPos.x).attr(\"y1\", parentPos.y).attr(\"x2\", 200).attr(\"y2\", 200).attr(\"stroke\", \"black\").attr(\"stroke-width\", 5).style(\"opacity\", 0);\n    }\n\n    // Creates the circle node on screen\n    const nodeElement = nodesGroup.append(\"circle\").attr(\"cx\", 200).attr(\"cy\", 200).attr(\"r\", 20).attr(\"class\", \"node\").style(\"opacity\", 0);\n\n    // Creates the text label on screen\n    const label = nodesGroup.append(\"text\").attr(\"x\", 200).attr(\"y\", 200).attr(\"class\", \"label\").attr(\"text-anchor\", \"middle\").attr(\"alignment-baseline\", \"middle\").style(\"fill\", \"white\").style(\"font-size\", \"12px\").text(this.value);\n    const nodeTransition = nodeElement.transition().duration(1000).style(\"opacity\", 1).attr(\"cx\", position.x).attr(\"cy\", position.y);\n    const labelTransition = label.transition().duration(1000).style(\"opacity\", 1).attr(\"x\", position.x).attr(\"y\", position.y);\n    let edgeTransitionPromise = null;\n    if (edge) {\n      const edgeTransition = edge.transition().duration(1000).style(\"opacity\", 1).attr(\"x2\", position.x).attr(\"y2\", position.y);\n      edgeTransitionPromise = edgeTransition.end();\n    }\n\n    // Saves node into array\n    this.nodes.push(new Node(this.value, this.index, nodeElement, edge, label));\n    await Promise.all([nodeTransition.end(), labelTransition.end(), edgeTransitionPromise]);\n  }\n}","map":{"version":3,"names":["Node","TreeAddInstruction","constructor","index","value","nodes","getNodePosition","isNaN","x","y","depth","Math","floor","log2","xSpacing","ySpacing","parentIndex","parentPos","isLeftChild","xOffset","process","svg","position","hasParent","nodesGroup","select","edgesGroup","empty","append","attr","edge","style","nodeElement","label","text","nodeTransition","transition","duration","labelTransition","edgeTransitionPromise","edgeTransition","end","push","Promise","all"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/tree_add_instruction.tsx"],"sourcesContent":["import {Instruction} from \"./i_instruction\";\r\nimport * as d3 from \"d3\";\r\nimport {BaseType} from \"d3\";\r\nimport {Node} from \"../pictures/node\";\r\n\r\nexport class TreeAddInstruction implements Instruction {\r\n\r\n    index: number;\r\n    value: number | string;\r\n    nodes: Node[];\r\n\r\n    constructor(index: number, value: number | string, nodes : Node[]) {\r\n        this.index = index;\r\n        this.value = value;\r\n        this.nodes = nodes;\r\n    }\r\n\r\n    async process(svg: d3.Selection<BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n\r\n        const position = this.getNodePosition(this.index);\r\n        const parentIndex = Math.floor((this.index as number - 1) / 2);\r\n        const hasParent = parentIndex >= 0;\r\n\r\n        let nodesGroup = svg.select<SVGGElement>(\"g.nodes\");\r\n        let edgesGroup = svg.select<SVGGElement>(\"g.edges\");\r\n\r\n        if (edgesGroup.empty()) {\r\n            edgesGroup = svg.append(\"g\").attr(\"class\", \"edges\");\r\n        }\r\n\r\n        if (nodesGroup.empty()) {\r\n            nodesGroup = svg.append(\"g\").attr(\"class\", \"nodes\");\r\n        }\r\n\r\n        let edge: d3.Selection<SVGLineElement, unknown, HTMLElement, any> | null = null;\r\n\r\n        if (hasParent) {\r\n            const parentPos = this.getNodePosition(parentIndex as number);\r\n            edge = edgesGroup.append(\"line\")\r\n                .attr(\"x1\", parentPos.x)\r\n                .attr(\"y1\", parentPos.y)\r\n                .attr(\"x2\", 200)\r\n                .attr(\"y2\", 200)\r\n                .attr(\"stroke\", \"black\")\r\n                .attr(\"stroke-width\", 5)\r\n                .style(\"opacity\", 0);\r\n        }\r\n\r\n        // Creates the circle node on screen\r\n        const nodeElement = nodesGroup.append(\"circle\")\r\n            .attr(\"cx\", 200)\r\n            .attr(\"cy\", 200)\r\n            .attr(\"r\", 20)\r\n            .attr(\"class\", \"node\")\r\n            .style(\"opacity\", 0);\r\n\r\n        // Creates the text label on screen\r\n        const label = nodesGroup.append(\"text\")\r\n            .attr(\"x\", 200)\r\n            .attr(\"y\", 200)\r\n            .attr(\"class\", \"label\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .attr(\"alignment-baseline\", \"middle\")\r\n            .style(\"fill\", \"white\")\r\n            .style(\"font-size\", \"12px\")\r\n            .text(this.value);\r\n\r\n        const nodeTransition = nodeElement.transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"cx\", position.x)\r\n            .attr(\"cy\", position.y)\r\n\r\n        const labelTransition = label.transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"x\", position.x)\r\n            .attr(\"y\", position.y)\r\n\r\n        let edgeTransitionPromise : Promise<void> | null = null;\r\n\r\n        if (edge) {\r\n            const edgeTransition = edge.transition()\r\n                .duration(1000)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"x2\", position.x)\r\n                .attr(\"y2\", position.y);\r\n\r\n            edgeTransitionPromise = edgeTransition.end();\r\n        }\r\n\r\n        // Saves node into array\r\n        this.nodes.push(new Node(this.value, this.index, nodeElement, edge, label))\r\n\r\n        await Promise.all([nodeTransition.end(), labelTransition.end(), edgeTransitionPromise]);\r\n    }\r\n\r\n    getNodePosition = (index: number): { x: number, y: number } => {\r\n        if (index < 0 || isNaN(index)) return { x: 0, y: 0 };\r\n        if (index === 0) return { x: 250, y: 50 }; // Root at the center\r\n\r\n        const depth = Math.floor(Math.log2(index + 1)); // Get depth in the tree\r\n        const xSpacing = (200) / (depth + 1); // Adjust x spacing\r\n        const ySpacing = 80; // Vertical spacing\r\n\r\n        const parentIndex = Math.floor((index - 1) / 2);\r\n        const parentPos = this.getNodePosition(parentIndex);\r\n\r\n        const isLeftChild = index % 2 === 1;\r\n        const xOffset = isLeftChild ? -xSpacing : xSpacing;\r\n\r\n        return { x: parentPos.x + xOffset, y: parentPos.y + ySpacing };\r\n    };\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}