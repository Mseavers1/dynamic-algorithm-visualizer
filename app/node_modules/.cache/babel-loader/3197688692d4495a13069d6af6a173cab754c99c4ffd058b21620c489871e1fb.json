{"ast":null,"code":"export class FAAddAllInstruction {\n  constructor(graph) {\n    this.graph = void 0;\n    this.graph = graph;\n  }\n  async process(svg) {\n    const nodeTransitions = [];\n    const nodesGroup = svg.append(\"g\").attr(\"id\", \"nodes\");\n    let index = 0;\n    const total = this.graph.get_nodes().size;\n    this.graph.get_nodes().forEach((node, value) => {\n      const pos = this.getPosition(index++, total, 350, 200);\n      const createdNode = this.createNode(nodesGroup, pos.x, pos.y);\n      const transition = this.applyNodeTransition(createdNode, pos); // This returns a Promise\n      nodeTransitions.push(transition); // Push the Promise into the array\n    });\n\n    // Wait for all transitions to finish\n    await Promise.all(nodeTransitions);\n  }\n  createNode(nodesGroup, cx, cy, r = 20, className = \"node\", opacity = 0) {\n    return nodesGroup.append(\"circle\").attr(\"cx\", cx).attr(\"cy\", cy).attr(\"r\", r).attr(\"class\", className).style(\"opacity\", opacity);\n  }\n  applyNodeTransition(node, position, duration = 1000) {\n    return new Promise(resolve => {\n      node.transition().duration(duration).attr(\"cx\", position.x).attr(\"cy\", position.y).style(\"opacity\", 1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"fill\", \"white\").on(\"end\", resolve);\n    });\n  }\n\n  // Gets the position in a shaped form\n  getPosition(index, numberOfNodes, centerX, centerY, radius = 100) {\n    const angle = 2 * Math.PI * index / numberOfNodes;\n\n    // Calculate x and y coordinates using polar to Cartesian conversion\n    const x = radius * Math.cos(angle);\n    const y = radius * Math.sin(angle);\n    return {\n      x: x + centerX,\n      y: y + centerY\n    };\n  }\n}","map":{"version":3,"names":["FAAddAllInstruction","constructor","graph","process","svg","nodeTransitions","nodesGroup","append","attr","index","total","get_nodes","size","forEach","node","value","pos","getPosition","createdNode","createNode","x","y","transition","applyNodeTransition","push","Promise","all","cx","cy","r","className","opacity","style","position","duration","resolve","on","numberOfNodes","centerX","centerY","radius","angle","Math","PI","cos","sin"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/fa_add_all_instruction.tsx"],"sourcesContent":["import {Instruction} from \"./i_instruction\";\r\nimport {BaseType, Selection} from \"d3\";\r\nimport {FA_Graph} from \"../structures/fa_graph\";\r\n\r\nexport class FAAddAllInstruction implements Instruction {\r\n\r\n    private graph: FA_Graph;\r\n\r\n    constructor(graph: FA_Graph) {\r\n        this.graph = graph;\r\n    }\r\n\r\n    async process(svg: Selection<BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n        const nodeTransitions: Promise<void>[] = [];\r\n        const nodesGroup = (svg.append(\"g\") as Selection<SVGGElement, unknown, null, undefined>).attr(\"id\", \"nodes\");\r\n\r\n\r\n        let index = 0;\r\n        const total = this.graph.get_nodes().size;\r\n\r\n        this.graph.get_nodes().forEach((node, value) => {\r\n            const pos = this.getPosition(index++, total, 350, 200);\r\n            const createdNode = this.createNode(nodesGroup, pos.x, pos.y);\r\n            const transition = this.applyNodeTransition(createdNode, pos); // This returns a Promise\r\n            nodeTransitions.push(transition); // Push the Promise into the array\r\n        });\r\n\r\n        // Wait for all transitions to finish\r\n        await Promise.all(nodeTransitions);\r\n    }\r\n\r\n\r\n    createNode(nodesGroup: d3.Selection<SVGGElement, unknown, null, undefined>, cx: number, cy: number, r: number = 20,\r\n                                        className: string = \"node\", opacity: number = 0\r\n    ): d3.Selection<SVGCircleElement, unknown, null, undefined> {\r\n\r\n        return nodesGroup.append(\"circle\")\r\n            .attr(\"cx\", cx)\r\n            .attr(\"cy\", cy)\r\n            .attr(\"r\", r)\r\n            .attr(\"class\", className)\r\n            .style(\"opacity\", opacity);\r\n    }\r\n\r\n    applyNodeTransition(\r\n        node: d3.Selection<SVGCircleElement, unknown, null, undefined>,\r\n        position: { x: number; y: number },\r\n        duration: number = 1000\r\n    ): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            node.transition()\r\n                .duration(duration)\r\n                .attr(\"cx\", position.x)\r\n                .attr(\"cy\", position.y)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"stroke\", \"black\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"white\")\r\n                .on(\"end\", resolve);\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    // Gets the position in a shaped form\r\n    getPosition(index: number, numberOfNodes: number, centerX: number, centerY: number, radius: number = 100) {\r\n        const angle = (2 * Math.PI * index) / numberOfNodes;\r\n\r\n        // Calculate x and y coordinates using polar to Cartesian conversion\r\n        const x = radius * Math.cos(angle);\r\n        const y = radius * Math.sin(angle);\r\n\r\n        return { x: x + centerX, y: y + centerY };\r\n    }\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}