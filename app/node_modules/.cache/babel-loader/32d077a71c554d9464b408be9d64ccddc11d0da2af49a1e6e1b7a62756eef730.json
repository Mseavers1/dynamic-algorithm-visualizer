{"ast":null,"code":"export class FATransition {\n  constructor(animator) {\n    this.animator = void 0;\n    this.states = void 0;\n    this.startingState = void 0;\n    this.finalStates = void 0;\n    this.animator = animator;\n    this.states = {};\n    this.startingState = \"\";\n    this.finalStates = [];\n  }\n  parse(area) {\n    // Is code valid?\n    const lines = area.split(\"\\n\");\n    let currentState = \"\";\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n\n      // Ignore comments\n      if (line.startsWith('#')) continue;\n\n      // If it doesn't start with a space, it is the start of a state definition\n      if (line.startsWith(' ')) {\n        const state = line.split(\":\")[0];\n        this.states[state] = [];\n        currentState = state;\n      }\n\n      // If it does, it is a value in a state definition\n      else {\n        // Get rid of spaces\n        const new_line = line.replace(/\\s+/g, '');\n\n        // Check if there is a : - if so, its a value, if not, its either Start or Final keywords\n        if (new_line.includes(':')) {\n          const state = new_line.split(\":\")[0];\n          const values = new_line.split(\":\")[1].split(\",\");\n          this.states[currentState].push({\n            state: state,\n            values: values\n          });\n        }\n        // Keywords\n        else {\n          // Set the starting state\n          if (new_line.toUpperCase() === \"START\") {\n            this.startingState = currentState;\n          }\n\n          // Add onto the final states\n          else if (new_line.toUpperCase() === \"FINAL\") {\n            this.finalStates.push(currentState);\n          }\n        }\n      }\n    }\n    alert(this.states);\n  }\n  clear() {}\n  delete(value) {}\n  generate_random(min, max, size, allowStrings, allowNumbers, allowDecimal, maxDecimal, regex, stringLengthMin, stringLengthMax) {}\n  insert(value) {}\n}","map":{"version":3,"names":["FATransition","constructor","animator","states","startingState","finalStates","parse","area","lines","split","currentState","i","length","line","startsWith","state","new_line","replace","includes","values","push","toUpperCase","alert","clear","delete","value","generate_random","min","max","size","allowStrings","allowNumbers","allowDecimal","maxDecimal","regex","stringLengthMin","stringLengthMax","insert"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/algorithms/fa_transition.tsx"],"sourcesContent":["import {Algorithm} from \"./algorithm_interface\";\r\nimport {AnimationPlayer} from \"../animation_player\";\r\nimport {BinaryTree} from \"../structures/binary_tree\";\r\n\r\ntype stateValues = {\r\n    state: string;\r\n    values: string[];\r\n}\r\n\r\nexport class FATransition implements Algorithm {\r\n\r\n    private animator: AnimationPlayer;\r\n    private states: Record<string, stateValues[]>;\r\n    private startingState: string;\r\n    private finalStates: string[];\r\n\r\n    constructor(\r\n        animator: AnimationPlayer,\r\n    ) {\r\n        this.animator = animator;\r\n        this.states = {};\r\n        this.startingState = \"\";\r\n        this.finalStates = [];\r\n    }\r\n\r\n    parse(area: string) {\r\n\r\n        // Is code valid?\r\n        const lines = area.split(\"\\n\");\r\n        let currentState = \"\";\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const line = lines[i];\r\n\r\n            // Ignore comments\r\n            if (line.startsWith('#')) continue;\r\n\r\n            // If it doesn't start with a space, it is the start of a state definition\r\n            if (line.startsWith(' ')) {\r\n                const state = line.split(\":\")[0];\r\n                this.states[state] = [];\r\n                currentState = state;\r\n            }\r\n\r\n            // If it does, it is a value in a state definition\r\n            else {\r\n\r\n                // Get rid of spaces\r\n                const new_line = line.replace(/\\s+/g, '');\r\n\r\n                // Check if there is a : - if so, its a value, if not, its either Start or Final keywords\r\n                if (new_line.includes(':')) {\r\n                    const state = new_line.split(\":\")[0];\r\n                    const values = new_line.split(\":\")[1].split(\",\");\r\n\r\n                    this.states[currentState].push({state: state, values: values});\r\n                }\r\n                // Keywords\r\n                else {\r\n\r\n                    // Set the starting state\r\n                    if (new_line.toUpperCase() === \"START\") {\r\n                        this.startingState = currentState;\r\n                    }\r\n\r\n                    // Add onto the final states\r\n                    else if (new_line.toUpperCase() === \"FINAL\") {\r\n                        this.finalStates.push(currentState);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        alert(this.states)\r\n\r\n    }\r\n\r\n    clear(): void {\r\n    }\r\n\r\n    delete(value: string | number): void {\r\n    }\r\n\r\n    generate_random(min: number, max: number, size: number, allowStrings: boolean, allowNumbers: boolean, allowDecimal: boolean, maxDecimal: number, regex: string, stringLengthMin: number, stringLengthMax: number): void {\r\n    }\r\n\r\n    insert(value: string | number): void {\r\n    }\r\n\r\n}"],"mappings":"AASA,OAAO,MAAMA,YAAY,CAAsB;EAO3CC,WAAWA,CACPC,QAAyB,EAC3B;IAAA,KAPMA,QAAQ;IAAA,KACRC,MAAM;IAAA,KACNC,aAAa;IAAA,KACbC,WAAW;IAKf,IAAI,CAACH,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;IAChB,IAAI,CAACC,aAAa,GAAG,EAAE;IACvB,IAAI,CAACC,WAAW,GAAG,EAAE;EACzB;EAEAC,KAAKA,CAACC,IAAY,EAAE;IAEhB;IACA,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC;IAC9B,IAAIC,YAAY,GAAG,EAAE;IAErB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MACnC,MAAME,IAAI,GAAGL,KAAK,CAACG,CAAC,CAAC;;MAErB;MACA,IAAIE,IAAI,CAACC,UAAU,CAAC,GAAG,CAAC,EAAE;;MAE1B;MACA,IAAID,IAAI,CAACC,UAAU,CAAC,GAAG,CAAC,EAAE;QACtB,MAAMC,KAAK,GAAGF,IAAI,CAACJ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAChC,IAAI,CAACN,MAAM,CAACY,KAAK,CAAC,GAAG,EAAE;QACvBL,YAAY,GAAGK,KAAK;MACxB;;MAEA;MAAA,KACK;QAED;QACA,MAAMC,QAAQ,GAAGH,IAAI,CAACI,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;;QAEzC;QACA,IAAID,QAAQ,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;UACxB,MAAMH,KAAK,GAAGC,QAAQ,CAACP,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACpC,MAAMU,MAAM,GAAGH,QAAQ,CAACP,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC;UAEhD,IAAI,CAACN,MAAM,CAACO,YAAY,CAAC,CAACU,IAAI,CAAC;YAACL,KAAK,EAAEA,KAAK;YAAEI,MAAM,EAAEA;UAAM,CAAC,CAAC;QAClE;QACA;QAAA,KACK;UAED;UACA,IAAIH,QAAQ,CAACK,WAAW,CAAC,CAAC,KAAK,OAAO,EAAE;YACpC,IAAI,CAACjB,aAAa,GAAGM,YAAY;UACrC;;UAEA;UAAA,KACK,IAAIM,QAAQ,CAACK,WAAW,CAAC,CAAC,KAAK,OAAO,EAAE;YACzC,IAAI,CAAChB,WAAW,CAACe,IAAI,CAACV,YAAY,CAAC;UACvC;QACJ;MACJ;IACJ;IAEAY,KAAK,CAAC,IAAI,CAACnB,MAAM,CAAC;EAEtB;EAEAoB,KAAKA,CAAA,EAAS,CACd;EAEAC,MAAMA,CAACC,KAAsB,EAAQ,CACrC;EAEAC,eAAeA,CAACC,GAAW,EAAEC,GAAW,EAAEC,IAAY,EAAEC,YAAqB,EAAEC,YAAqB,EAAEC,YAAqB,EAAEC,UAAkB,EAAEC,KAAa,EAAEC,eAAuB,EAAEC,eAAuB,EAAQ,CACxN;EAEAC,MAAMA,CAACZ,KAAsB,EAAQ,CACrC;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}