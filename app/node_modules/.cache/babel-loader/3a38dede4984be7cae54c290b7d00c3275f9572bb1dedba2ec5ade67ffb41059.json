{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Micha\\\\Documents\\\\GitHub\\\\dynamic-algorithm-visualizer\\\\app\\\\src\\\\components\\\\algorithms\\\\min_heap.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { animated, useTransition } from \"@react-spring/web\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class MinHeap {\n  constructor(data, setData) {\n    this.data = data;\n    this.setData = setData;\n  }\n  insert(value) {\n    this.setData(prev => [...prev, value]); // React detects change\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"500\",\n      height: \"500\",\n      children: /*#__PURE__*/_jsxDEV(AnimatedTree, {\n        values: this.data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this);\n  }\n}\nconst AnimatedTree = ({\n  values\n}) => {\n  _s();\n  const nodeTransitions = useTransition(values, {\n    keys: item => `${item}`,\n    // Ensure unique keys for each item\n    from: {\n      opacity: 0,\n      transform: 'scale(0)'\n    },\n    enter: {\n      opacity: 1,\n      transform: 'scale(1)'\n    },\n    leave: {\n      opacity: 0,\n      transform: 'scale(0)'\n    }\n  });\n  const getNodePosition = index => {\n    if (index < 0 || isNaN(index)) return {\n      x: 0,\n      y: 0\n    };\n    if (index === 0) return {\n      x: 500,\n      y: 100\n    }; // Root at the center\n\n    const depth = Math.floor(Math.log2(index + 1)); // Get depth in the tree\n    const xSpacing = 200 / (depth + 1); // Reduce spacing as depth increases\n    const ySpacing = 80; // Vertical spacing\n\n    const parentIndex = Math.floor((index - 1) / 2);\n    const parentPos = getNodePosition(parentIndex);\n\n    // Left child or right child\n    const isLeftChild = index % 2 === 1;\n    const xOffset = isLeftChild ? -xSpacing : xSpacing;\n    return {\n      x: parentPos.x + xOffset,\n      y: parentPos.y + ySpacing\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    children: nodeTransitions((style, node, index) => {\n      const posIndex = index; // Ensure index is treated as a number\n      const {\n        x,\n        y\n      } = getNodePosition(posIndex); // Get position for each node\n      return /*#__PURE__*/_jsxDEV(animated.g, {\n        style: style,\n        children: [posIndex > 0 && /*#__PURE__*/_jsxDEV(animated.line, {\n          x1: getNodePosition(Math.floor((posIndex - 1) / 2)).x // Parent's x\n          ,\n          y1: getNodePosition(Math.floor((posIndex - 1) / 2)).y // Parent's y\n          ,\n          x2: x,\n          y2: y,\n          stroke: \"black\",\n          strokeWidth: \"2\",\n          style: {\n            strokeOpacity: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: x,\n          cy: y,\n          r: 30,\n          fill: \"steelblue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: x,\n          y: y,\n          dy: 5,\n          textAnchor: \"middle\",\n          fill: \"white\",\n          fontSize: \"12\",\n          children: node\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this)]\n      }, node, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(AnimatedTree, \"7q9XJ/T8qFFFTlXCAVzO9hMqO4s=\", false, function () {\n  return [useTransition];\n});\n_c = AnimatedTree;\nvar _c;\n$RefreshReg$(_c, \"AnimatedTree\");","map":{"version":3,"names":["React","animated","useTransition","jsxDEV","_jsxDEV","MinHeap","constructor","data","setData","insert","value","prev","render","width","height","children","AnimatedTree","values","fileName","_jsxFileName","lineNumber","columnNumber","_s","nodeTransitions","keys","item","from","opacity","transform","enter","leave","getNodePosition","index","isNaN","x","y","depth","Math","floor","log2","xSpacing","ySpacing","parentIndex","parentPos","isLeftChild","xOffset","style","node","posIndex","g","line","x1","y1","x2","y2","stroke","strokeWidth","strokeOpacity","cx","cy","r","fill","dy","textAnchor","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/algorithms/min_heap.tsx"],"sourcesContent":["import { Algorithm } from \"./algorithm_interface\";\r\nimport {BinaryTree} from \"../structures/binary_tree\";\r\nimport React, {useState} from \"react\";\r\nimport {animated, useTransition} from \"@react-spring/web\";\r\n\r\nexport class MinHeap implements Algorithm {\r\n\r\n\r\n    constructor(\r\n        private data: (string | number)[],\r\n        private setData: React.Dispatch<React.SetStateAction<(string | number)[]>>\r\n    ) {}\r\n\r\n    insert(value: number) {\r\n        this.setData(prev => [...prev, value]); // React detects change\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        return (\r\n            <svg width=\"500\" height=\"500\">\r\n                <AnimatedTree values={this.data}/>\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n\r\nconst AnimatedTree = ({values}: {values : (string | number)[]}) => {\r\n\r\n    const nodeTransitions = useTransition(values, {\r\n        keys: (item) => `${item}`,  // Ensure unique keys for each item\r\n        from: { opacity: 0, transform: 'scale(0)' },\r\n        enter: { opacity: 1, transform: 'scale(1)' },\r\n        leave: { opacity: 0, transform: 'scale(0)' },\r\n    });\r\n\r\n    const getNodePosition = (index: number): { x: number, y:number } => {\r\n\r\n        if (index < 0 || isNaN(index)) return {x: 0, y: 0};\r\n        if (index === 0) return { x: 500, y: 100 }; // Root at the center\r\n\r\n        const depth = Math.floor(Math.log2(index + 1)); // Get depth in the tree\r\n        const xSpacing = 200 / (depth + 1); // Reduce spacing as depth increases\r\n        const ySpacing = 80; // Vertical spacing\r\n\r\n        const parentIndex = Math.floor((index - 1) / 2);\r\n        const parentPos = getNodePosition(parentIndex);\r\n\r\n        // Left child or right child\r\n        const isLeftChild = index % 2 === 1;\r\n        const xOffset = isLeftChild ? -xSpacing : xSpacing;\r\n\r\n        return { x: parentPos.x + xOffset, y: parentPos.y + ySpacing };\r\n    };\r\n\r\n\r\n    return (\r\n        <g>\r\n            {/* Render the animated nodes */}\r\n            {nodeTransitions((style, node, index) => {\r\n                const posIndex = index as unknown as number; // Ensure index is treated as a number\r\n                const {x, y} = getNodePosition(posIndex); // Get position for each node\r\n                return (\r\n                    <animated.g key={node} style={style}>\r\n                        {/* Render edges (lines) */}\r\n                        {posIndex > 0 && (\r\n                            <animated.line\r\n                                x1={getNodePosition(Math.floor((posIndex - 1) / 2)).x} // Parent's x\r\n                                y1={getNodePosition(Math.floor((posIndex - 1) / 2)).y} // Parent's y\r\n                                x2={x}\r\n                                y2={y}\r\n                                stroke=\"black\"\r\n                                strokeWidth=\"2\"\r\n                                style={{strokeOpacity: 1}}\r\n                            />\r\n                        )}\r\n\r\n                        {/* Render node (circle) */}\r\n                        <circle cx={x} cy={y} r={30} fill=\"steelblue\"/>\r\n                        <text x={x} y={y} dy={5} textAnchor=\"middle\" fill=\"white\" fontSize=\"12\">\r\n                            {node}\r\n                        </text>\r\n                    </animated.g>\r\n                );\r\n            })}\r\n        </g>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}