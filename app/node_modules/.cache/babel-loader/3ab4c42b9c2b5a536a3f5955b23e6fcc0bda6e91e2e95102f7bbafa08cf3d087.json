{"ast":null,"code":"export class FAAddInstruction {\n  constructor(index, value, numberOfStates) {\n    this.value = void 0;\n    this.index = void 0;\n    this.numberOfStates = void 0;\n    this.index = index;\n    this.value = value;\n    this.numberOfStates = numberOfStates;\n  }\n  async process(svg) {\n    const position = this.getPosition(this.index, this.numberOfStates, 350, 200);\n    let nodesGroup = svg.select(\"g.nodes\");\n    if (nodesGroup.empty()) {\n      nodesGroup = svg.append(\"g\").attr(\"class\", \"nodes\");\n    }\n    const nodeElement = nodesGroup.append(\"circle\").attr(\"cx\", 200).attr(\"cy\", 200).attr(\"r\", 20).attr(\"class\", \"node\").style(\"opacity\", 0);\n\n    // Creates the text label on screen\n    const label = nodesGroup.append(\"text\").attr(\"x\", 200).attr(\"y\", 200).attr(\"class\", \"label\").attr(\"text-anchor\", \"middle\").attr(\"alignment-baseline\", \"middle\").style(\"fill\", \"white\").style(\"font-size\", \"12px\").text(this.value);\n    const nodeTransition = nodeElement.transition().duration(1000).style(\"opacity\", 1).attr(\"cx\", position.x).attr(\"cy\", position.y);\n    const labelTransition = label.transition().duration(1000).style(\"opacity\", 1).attr(\"x\", position.x).attr(\"y\", position.y);\n    await Promise.all([nodeTransition.end(), labelTransition.end()]);\n  }\n  getPosition(index, numberOfStates, centerX, centerY, radius = 100) {\n    const angle = 2 * Math.PI * index / numberOfStates;\n\n    // Calculate x and y coordinates using polar to Cartesian conversion\n    const x = radius * Math.cos(angle);\n    const y = radius * Math.sin(angle);\n    return {\n      x: x + centerX,\n      y: y + centerY\n    };\n  }\n}","map":{"version":3,"names":["FAAddInstruction","constructor","index","value","numberOfStates","process","svg","position","getPosition","nodesGroup","select","empty","append","attr","nodeElement","style","label","text","nodeTransition","transition","duration","x","y","labelTransition","Promise","all","end","centerX","centerY","radius","angle","Math","PI","cos","sin"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/fa_add_instruction.tsx"],"sourcesContent":["import {Instruction} from \"./i_instruction\";\r\nimport {BaseType, Selection} from \"d3\";\r\nimport {Node} from \"../pictures/node\";\r\n\r\nexport class FAAddInstruction implements Instruction {\r\n\r\n    value: number | string;\r\n    index: number;\r\n    numberOfStates: number;\r\n\r\n    constructor(index: number, value: number | string, numberOfStates: number) {\r\n        this.index = index;\r\n        this.value = value;\r\n        this.numberOfStates = numberOfStates;\r\n    }\r\n\r\n    async process(svg: Selection<BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n\r\n        const position = this.getPosition(this.index, this.numberOfStates, 350, 200);\r\n\r\n        let nodesGroup = svg.select<SVGGElement>(\"g.nodes\");\r\n\r\n        if (nodesGroup.empty()) {\r\n            nodesGroup = svg.append(\"g\").attr(\"class\", \"nodes\");\r\n        }\r\n\r\n        const nodeElement = nodesGroup.append(\"circle\")\r\n            .attr(\"cx\", 200)\r\n            .attr(\"cy\", 200)\r\n            .attr(\"r\", 20)\r\n            .attr(\"class\", \"node\")\r\n            .style(\"opacity\", 0);\r\n\r\n        // Creates the text label on screen\r\n        const label = nodesGroup.append(\"text\")\r\n            .attr(\"x\", 200)\r\n            .attr(\"y\", 200)\r\n            .attr(\"class\", \"label\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .attr(\"alignment-baseline\", \"middle\")\r\n            .style(\"fill\", \"white\")\r\n            .style(\"font-size\", \"12px\")\r\n            .text(this.value);\r\n\r\n        const nodeTransition = nodeElement.transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"cx\", position.x)\r\n            .attr(\"cy\", position.y)\r\n\r\n        const labelTransition = label.transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"x\", position.x)\r\n            .attr(\"y\", position.y)\r\n\r\n        await Promise.all([nodeTransition.end(), labelTransition.end()]);\r\n    }\r\n\r\n    getPosition(index: number, numberOfStates: number, centerX: number, centerY: number, radius: number = 100) {\r\n        const angle = (2 * Math.PI * index) / numberOfStates;\r\n\r\n        // Calculate x and y coordinates using polar to Cartesian conversion\r\n        const x = radius * Math.cos(angle);\r\n        const y = radius * Math.sin(angle);\r\n\r\n        return { x: x + centerX, y: y + centerY };\r\n    }\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}