{"ast":null,"code":"// Define the BinaryTree logic in a separate class (without React dependencies)\nexport class BinaryTree {\n  constructor() {\n    this.values = [];\n    this.length = 0;\n  }\n  clear() {\n    this.values = [];\n    this.length = 0;\n  }\n  get_parent(nodeID) {\n    if (!Number.isInteger(nodeID)) throw new Error(\"NodeID must be an integer.\");\n    if (this.length <= 0 || nodeID <= 0) return -1;\n    return Math.floor(nodeID / 2);\n  }\n  get_current_height() {\n    return this.length > 0 ? Math.floor(Math.log2(this.length)) : 0;\n  }\n  is_empty() {\n    return !this.length;\n  }\n  add(value) {\n    this.values.push(value);\n    this.length++;\n  }\n  remove(index = null) {\n    if (this.length <= 0) throw new Error(\"Cannot remove from an empty tree.\");\n    if (index != null && index >= this.length) throw new Error(\"Index out of range.\");\n    this.length--;\n    if (index == null) return this.values.pop();\n    const val = this.values[index];\n    this.values.splice(index, 1);\n    return val;\n  }\n  swap(nodeA, nodeB) {\n    const a = this.values[nodeA - 1];\n    this.values[nodeA - 1] = this.values[nodeB - 1];\n    this.values[nodeB - 1] = a;\n  }\n  size() {\n    return this.length;\n  }\n  get(nodeID) {\n    if (!Number.isInteger(nodeID)) throw new Error(\"NodeID must be an integer.\");\n    if (nodeID > this.length || nodeID <= 0) throw new Error(\"NodeID not within range.\");\n    return this.values[nodeID - 1];\n  }\n}","map":{"version":3,"names":["BinaryTree","constructor","values","length","clear","get_parent","nodeID","Number","isInteger","Error","Math","floor","get_current_height","log2","is_empty","add","value","push","remove","index","pop","val","splice","swap","nodeA","nodeB","a","size","get"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/structures/binary_tree.tsx"],"sourcesContent":["import { ITree } from './ITree';\r\nimport {IData} from \"./IData\";\r\n\r\n// Define the BinaryTree logic in a separate class (without React dependencies)\r\nexport class BinaryTree implements ITree, IData {\r\n    values: (string | number)[] = [];\r\n    length: number = 0;\r\n\r\n    clear(): void {\r\n        this.values = [];\r\n        this.length = 0;\r\n    }\r\n\r\n    get_parent(nodeID: number): number {\r\n        if (!Number.isInteger(nodeID)) throw new Error(\"NodeID must be an integer.\");\r\n        if (this.length <= 0 || nodeID <= 0) return -1;\r\n        return Math.floor(nodeID / 2);\r\n    }\r\n\r\n    get_current_height(): number {\r\n        return this.length > 0 ? Math.floor(Math.log2(this.length)) : 0;\r\n    }\r\n\r\n    is_empty(): boolean {\r\n        return !this.length;\r\n    }\r\n\r\n    add(value: string | number): void {\r\n        this.values.push(value);\r\n        this.length++;\r\n    }\r\n\r\n    remove(index : number | null = null): string | number {\r\n        if (this.length <= 0) throw new Error(\"Cannot remove from an empty tree.\");\r\n\r\n        if (index != null && index >= this.length) throw new Error(\"Index out of range.\");\r\n\r\n        this.length--;\r\n\r\n        if (index == null)\r\n            return this.values.pop() as string | number;\r\n\r\n        const val = this.values[index];\r\n        this.values.splice(index, 1);\r\n\r\n        return val;\r\n    }\r\n\r\n    swap(nodeA: number, nodeB: number): void {\r\n        const a = this.values[nodeA - 1];\r\n        this.values[nodeA - 1] = this.values[nodeB - 1];\r\n        this.values[nodeB - 1] = a;\r\n    }\r\n\r\n    size(): number {\r\n        return this.length;\r\n    }\r\n\r\n    get(nodeID: number): number | string {\r\n        if (!Number.isInteger(nodeID)) throw new Error(\"NodeID must be an integer.\");\r\n        if (nodeID > this.length || nodeID <= 0) throw new Error(\"NodeID not within range.\");\r\n        return this.values[nodeID - 1];\r\n    }\r\n}"],"mappings":"AAGA;AACA,OAAO,MAAMA,UAAU,CAAyB;EAAAC,YAAA;IAAA,KAC5CC,MAAM,GAAwB,EAAE;IAAA,KAChCC,MAAM,GAAW,CAAC;EAAA;EAElBC,KAAKA,CAAA,EAAS;IACV,IAAI,CAACF,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,MAAM,GAAG,CAAC;EACnB;EAEAE,UAAUA,CAACC,MAAc,EAAU;IAC/B,IAAI,CAACC,MAAM,CAACC,SAAS,CAACF,MAAM,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,4BAA4B,CAAC;IAC5E,IAAI,IAAI,CAACN,MAAM,IAAI,CAAC,IAAIG,MAAM,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;IAC9C,OAAOI,IAAI,CAACC,KAAK,CAACL,MAAM,GAAG,CAAC,CAAC;EACjC;EAEAM,kBAAkBA,CAAA,EAAW;IACzB,OAAO,IAAI,CAACT,MAAM,GAAG,CAAC,GAAGO,IAAI,CAACC,KAAK,CAACD,IAAI,CAACG,IAAI,CAAC,IAAI,CAACV,MAAM,CAAC,CAAC,GAAG,CAAC;EACnE;EAEAW,QAAQA,CAAA,EAAY;IAChB,OAAO,CAAC,IAAI,CAACX,MAAM;EACvB;EAEAY,GAAGA,CAACC,KAAsB,EAAQ;IAC9B,IAAI,CAACd,MAAM,CAACe,IAAI,CAACD,KAAK,CAAC;IACvB,IAAI,CAACb,MAAM,EAAE;EACjB;EAEAe,MAAMA,CAACC,KAAqB,GAAG,IAAI,EAAmB;IAClD,IAAI,IAAI,CAAChB,MAAM,IAAI,CAAC,EAAE,MAAM,IAAIM,KAAK,CAAC,mCAAmC,CAAC;IAE1E,IAAIU,KAAK,IAAI,IAAI,IAAIA,KAAK,IAAI,IAAI,CAAChB,MAAM,EAAE,MAAM,IAAIM,KAAK,CAAC,qBAAqB,CAAC;IAEjF,IAAI,CAACN,MAAM,EAAE;IAEb,IAAIgB,KAAK,IAAI,IAAI,EACb,OAAO,IAAI,CAACjB,MAAM,CAACkB,GAAG,CAAC,CAAC;IAE5B,MAAMC,GAAG,GAAG,IAAI,CAACnB,MAAM,CAACiB,KAAK,CAAC;IAC9B,IAAI,CAACjB,MAAM,CAACoB,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;IAE5B,OAAOE,GAAG;EACd;EAEAE,IAAIA,CAACC,KAAa,EAAEC,KAAa,EAAQ;IACrC,MAAMC,CAAC,GAAG,IAAI,CAACxB,MAAM,CAACsB,KAAK,GAAG,CAAC,CAAC;IAChC,IAAI,CAACtB,MAAM,CAACsB,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAACtB,MAAM,CAACuB,KAAK,GAAG,CAAC,CAAC;IAC/C,IAAI,CAACvB,MAAM,CAACuB,KAAK,GAAG,CAAC,CAAC,GAAGC,CAAC;EAC9B;EAEAC,IAAIA,CAAA,EAAW;IACX,OAAO,IAAI,CAACxB,MAAM;EACtB;EAEAyB,GAAGA,CAACtB,MAAc,EAAmB;IACjC,IAAI,CAACC,MAAM,CAACC,SAAS,CAACF,MAAM,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,4BAA4B,CAAC;IAC5E,IAAIH,MAAM,GAAG,IAAI,CAACH,MAAM,IAAIG,MAAM,IAAI,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,0BAA0B,CAAC;IACpF,OAAO,IAAI,CAACP,MAAM,CAACI,MAAM,GAAG,CAAC,CAAC;EAClC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}