{"ast":null,"code":"export class FAAddInstruction {\n  constructor(index, value, numberOfStates, values, indexStates) {\n    this.value = void 0;\n    this.index = void 0;\n    this.numberOfStates = void 0;\n    this.indexStates = void 0;\n    this.values = void 0;\n    this.index = index;\n    this.value = value;\n    this.numberOfStates = numberOfStates;\n    this.indexStates = indexStates;\n    this.values = values;\n  }\n  async process(svg) {\n    const position = this.getPosition(this.index, this.numberOfStates, 350, 200);\n    let nodesGroup = svg.select(\"g.nodes\");\n    let edgesGroup = svg.select(\"g.edges\");\n    if (edgesGroup.empty()) {\n      edgesGroup = svg.append(\"g\").attr(\"class\", \"edges\");\n    }\n    if (nodesGroup.empty()) {\n      nodesGroup = svg.append(\"g\").attr(\"class\", \"nodes\");\n    }\n    const nodeElement = nodesGroup.append(\"circle\").attr(\"cx\", 200).attr(\"cy\", 200).attr(\"r\", 20).attr(\"class\", \"node\").style(\"opacity\", 0);\n\n    // Creates the text label on screen\n    const label = nodesGroup.append(\"text\").attr(\"x\", 200).attr(\"y\", 200).attr(\"class\", \"label\").attr(\"text-anchor\", \"middle\").attr(\"alignment-baseline\", \"middle\").style(\"fill\", \"white\").style(\"font-size\", \"12px\").text(this.value);\n    let edge = null;\n    for (const val in this.values) {\n      edge = edgesGroup.append(\"line\").attr(\"x1\", position.x).attr(\"y1\", position.y).attr(\"x2\", 200).attr(\"y2\", 200).attr(\"stroke\", \"black\").attr(\"stroke-width\", 5).style(\"opacity\", 0);\n    }\n    const nodeTransition = nodeElement.transition().duration(1000).style(\"opacity\", 1).attr(\"cx\", position.x).attr(\"cy\", position.y);\n    const labelTransition = label.transition().duration(1000).style(\"opacity\", 1).attr(\"x\", position.x).attr(\"y\", position.y);\n    let edgeTransitionPromise = null;\n    if (edge) {\n      const edgeTransition = edge.transition().duration(1000).style(\"opacity\", 1).attr(\"x2\", position.x).attr(\"y2\", position.y);\n      edgeTransitionPromise = edgeTransition.end();\n    }\n    await Promise.all([nodeTransition.end(), labelTransition.end(), edgeTransitionPromise]);\n  }\n  getPosition(index, numberOfStates, centerX, centerY, radius = 100) {\n    const angle = 2 * Math.PI * index / numberOfStates;\n\n    // Calculate x and y coordinates using polar to Cartesian conversion\n    const x = radius * Math.cos(angle);\n    const y = radius * Math.sin(angle);\n    return {\n      x: x + centerX,\n      y: y + centerY\n    };\n  }\n}","map":{"version":3,"names":["FAAddInstruction","constructor","index","value","numberOfStates","values","indexStates","process","svg","position","getPosition","nodesGroup","select","edgesGroup","empty","append","attr","nodeElement","style","label","text","edge","val","x","y","nodeTransition","transition","duration","labelTransition","edgeTransitionPromise","edgeTransition","end","Promise","all","centerX","centerY","radius","angle","Math","PI","cos","sin"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/fa_add_instruction.tsx"],"sourcesContent":["import {Instruction} from \"./i_instruction\";\r\nimport {BaseType, Selection} from \"d3\";\r\nimport {Node} from \"../pictures/node\";\r\nimport {stateValues} from \"../algorithms/fa_transition\";\r\nimport * as d3 from \"d3\";\r\n\r\nexport class FAAddInstruction implements Instruction {\r\n\r\n    value: number | string;\r\n    index: number;\r\n    numberOfStates: number;\r\n    indexStates: Record<string, number>;\r\n    values: stateValues[];\r\n\r\n    constructor(index: number, value: number | string, numberOfStates: number, values: stateValues[], indexStates: Record<string, number>) {\r\n        this.index = index;\r\n        this.value = value;\r\n        this.numberOfStates = numberOfStates;\r\n        this.indexStates = indexStates;\r\n        this.values = values;\r\n    }\r\n\r\n    async process(svg: Selection<BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n\r\n        const position = this.getPosition(this.index, this.numberOfStates, 350, 200);\r\n\r\n        let nodesGroup = svg.select<SVGGElement>(\"g.nodes\");\r\n\r\n        let edgesGroup = svg.select<SVGGElement>(\"g.edges\");\r\n\r\n        if (edgesGroup.empty()) {\r\n            edgesGroup = svg.append(\"g\").attr(\"class\", \"edges\");\r\n        }\r\n\r\n\r\n        if (nodesGroup.empty()) {\r\n            nodesGroup = svg.append(\"g\").attr(\"class\", \"nodes\");\r\n        }\r\n\r\n        const nodeElement = nodesGroup.append(\"circle\")\r\n            .attr(\"cx\", 200)\r\n            .attr(\"cy\", 200)\r\n            .attr(\"r\", 20)\r\n            .attr(\"class\", \"node\")\r\n            .style(\"opacity\", 0);\r\n\r\n        // Creates the text label on screen\r\n        const label = nodesGroup.append(\"text\")\r\n            .attr(\"x\", 200)\r\n            .attr(\"y\", 200)\r\n            .attr(\"class\", \"label\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .attr(\"alignment-baseline\", \"middle\")\r\n            .style(\"fill\", \"white\")\r\n            .style(\"font-size\", \"12px\")\r\n            .text(this.value);\r\n\r\n        let edge: d3.Selection<SVGLineElement, unknown, HTMLElement, any>[] | null = null;\r\n\r\n        for (const val in this.values) {\r\n\r\n            edge = edgesGroup.append(\"line\")\r\n                .attr(\"x1\", position.x)\r\n                .attr(\"y1\", position.y)\r\n                .attr(\"x2\", 200)\r\n                .attr(\"y2\", 200)\r\n                .attr(\"stroke\", \"black\")\r\n                .attr(\"stroke-width\", 5)\r\n                .style(\"opacity\", 0);\r\n        }\r\n\r\n        const nodeTransition = nodeElement.transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"cx\", position.x)\r\n            .attr(\"cy\", position.y)\r\n\r\n        const labelTransition = label.transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"x\", position.x)\r\n            .attr(\"y\", position.y)\r\n\r\n        let edgeTransitionPromise : Promise<void> | null = null;\r\n\r\n        if (edge) {\r\n            const edgeTransition = edge.transition()\r\n                .duration(1000)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"x2\", position.x)\r\n                .attr(\"y2\", position.y);\r\n\r\n            edgeTransitionPromise = edgeTransition.end();\r\n        }\r\n\r\n        await Promise.all([nodeTransition.end(), labelTransition.end(), edgeTransitionPromise]);\r\n    }\r\n\r\n    getPosition(index: number, numberOfStates: number, centerX: number, centerY: number, radius: number = 100) {\r\n        const angle = (2 * Math.PI * index) / numberOfStates;\r\n\r\n        // Calculate x and y coordinates using polar to Cartesian conversion\r\n        const x = radius * Math.cos(angle);\r\n        const y = radius * Math.sin(angle);\r\n\r\n        return { x: x + centerX, y: y + centerY };\r\n    }\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}