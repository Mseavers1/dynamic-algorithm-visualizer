{"ast":null,"code":"export class BinaryTree {\n  constructor() {\n    this.values = [];\n    this.length = 0;\n  }\n  clear() {\n    this.values = [];\n    this.length = 0;\n  }\n\n  // Returns the id within the array\n  get_parent(nodeID) {\n    if (!Number.isInteger(nodeID)) throw new Error(\"NodeID must be a integer.\");\n    if (this.length <= 0) return -1;\n    return Math.floor(nodeID / 2) - 1;\n  }\n  is_empty() {\n    return this.length === 0;\n  }\n  add(value) {\n    this.values.push(value);\n    this.length++;\n  }\n  remove() {\n    if (this.length <= 0) throw new Error(\"Cannot remove from an empty tree.\");\n    this.length--;\n    return this.values.pop();\n  }\n  size() {\n    return this.length;\n  }\n  get(nodeID) {\n    if (!Number.isInteger(nodeID)) throw new Error(\"NodeID must be a integer.\");\n    if (nodeID > this.length || nodeID <= 0) return null;\n    return this.values[nodeID - 1];\n  }\n}","map":{"version":3,"names":["BinaryTree","constructor","values","length","clear","get_parent","nodeID","Number","isInteger","Error","Math","floor","is_empty","add","value","push","remove","pop","size","get"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/structures/binary_tree.tsx"],"sourcesContent":["import {ITree} from \"./ITree\";\r\n\r\nexport class BinaryTree implements ITree {\r\n\r\n    values : (string | number)[] = [];\r\n    length : number = 0;\r\n\r\n    clear(): void {\r\n        this.values = [];\r\n        this.length = 0;\r\n    }\r\n\r\n    // Returns the id within the array\r\n    get_parent(nodeID: number): number {\r\n\r\n        if (!Number.isInteger(nodeID)) throw new Error(\"NodeID must be a integer.\");\r\n\r\n        if (this.length <= 0) return -1;\r\n\r\n        return Math.floor(nodeID / 2) - 1;\r\n    }\r\n\r\n    is_empty(): boolean {\r\n        return this.length === 0;\r\n    }\r\n\r\n    add(value : string | number) : void {\r\n        this.values.push(value);\r\n        this.length++;\r\n    }\r\n\r\n    remove(): string | number {\r\n\r\n        if (this.length <= 0) throw new Error(\"Cannot remove from an empty tree.\")\r\n\r\n        this.length--;\r\n        return this.values.pop() as string | number;\r\n    }\r\n\r\n    size(): number {\r\n        return this.length;\r\n    }\r\n\r\n    get(nodeID: number): number | string | null {\r\n\r\n        if (!Number.isInteger(nodeID)) throw new Error(\"NodeID must be a integer.\");\r\n\r\n        if (nodeID > this.length || nodeID <= 0) return null;\r\n\r\n        return this.values[nodeID - 1];\r\n\r\n    }\r\n\r\n\r\n\r\n}"],"mappings":"AAEA,OAAO,MAAMA,UAAU,CAAkB;EAAAC,YAAA;IAAA,KAErCC,MAAM,GAAyB,EAAE;IAAA,KACjCC,MAAM,GAAY,CAAC;EAAA;EAEnBC,KAAKA,CAAA,EAAS;IACV,IAAI,CAACF,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,MAAM,GAAG,CAAC;EACnB;;EAEA;EACAE,UAAUA,CAACC,MAAc,EAAU;IAE/B,IAAI,CAACC,MAAM,CAACC,SAAS,CAACF,MAAM,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,2BAA2B,CAAC;IAE3E,IAAI,IAAI,CAACN,MAAM,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;IAE/B,OAAOO,IAAI,CAACC,KAAK,CAACL,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC;EACrC;EAEAM,QAAQA,CAAA,EAAY;IAChB,OAAO,IAAI,CAACT,MAAM,KAAK,CAAC;EAC5B;EAEAU,GAAGA,CAACC,KAAuB,EAAS;IAChC,IAAI,CAACZ,MAAM,CAACa,IAAI,CAACD,KAAK,CAAC;IACvB,IAAI,CAACX,MAAM,EAAE;EACjB;EAEAa,MAAMA,CAAA,EAAoB;IAEtB,IAAI,IAAI,CAACb,MAAM,IAAI,CAAC,EAAE,MAAM,IAAIM,KAAK,CAAC,mCAAmC,CAAC;IAE1E,IAAI,CAACN,MAAM,EAAE;IACb,OAAO,IAAI,CAACD,MAAM,CAACe,GAAG,CAAC,CAAC;EAC5B;EAEAC,IAAIA,CAAA,EAAW;IACX,OAAO,IAAI,CAACf,MAAM;EACtB;EAEAgB,GAAGA,CAACb,MAAc,EAA0B;IAExC,IAAI,CAACC,MAAM,CAACC,SAAS,CAACF,MAAM,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,2BAA2B,CAAC;IAE3E,IAAIH,MAAM,GAAG,IAAI,CAACH,MAAM,IAAIG,MAAM,IAAI,CAAC,EAAE,OAAO,IAAI;IAEpD,OAAO,IAAI,CAACJ,MAAM,CAACI,MAAM,GAAG,CAAC,CAAC;EAElC;AAIJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}