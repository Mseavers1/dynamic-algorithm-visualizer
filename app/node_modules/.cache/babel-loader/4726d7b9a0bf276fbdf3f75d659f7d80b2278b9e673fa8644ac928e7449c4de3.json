{"ast":null,"code":"import{Node}from\"../pictures/node\";export class TreeAddInstruction{constructor(_index,value,nodes){this.index=void 0;this.value=void 0;this.nodes=void 0;this.getNodePosition=index=>{if(index<0||isNaN(index))return{x:0,y:0};if(index===0)return{x:250,y:50};// Root at the center\nconst depth=Math.floor(Math.log2(index+1));// Get depth in the tree\nconst xSpacing=200/(depth+1);// Adjust x spacing\nconst ySpacing=80;// Vertical spacing\nconst parentIndex=Math.floor((index-1)/2);const parentPos=this.getNodePosition(parentIndex);const isLeftChild=index%2===1;const xOffset=isLeftChild?-xSpacing:xSpacing;return{x:parentPos.x+xOffset,y:parentPos.y+ySpacing};};this.index=_index;this.value=value;this.nodes=nodes;}async process(svg){const position=this.getNodePosition(this.index);const parentIndex=Math.floor((this.index-1)/2);const hasParent=parentIndex>=0;let nodesGroup=svg.select(\"g.nodes\");let edgesGroup=svg.select(\"g.edges\");if(edgesGroup.empty()){edgesGroup=svg.append(\"g\").attr(\"class\",\"edges\");}if(nodesGroup.empty()){nodesGroup=svg.append(\"g\").attr(\"class\",\"nodes\");}let edge=null;if(hasParent){const parentPos=this.getNodePosition(parentIndex);edge=edgesGroup.append(\"line\").attr(\"x1\",parentPos.x).attr(\"y1\",parentPos.y).attr(\"x2\",200).attr(\"y2\",200).attr(\"stroke\",\"black\").attr(\"stroke-width\",5).style(\"opacity\",0);}// Creates the circle node on screen\nconst nodeElement=nodesGroup.append(\"circle\").attr(\"cx\",200).attr(\"cy\",200).attr(\"r\",20).attr(\"class\",\"node\").style(\"opacity\",0);// Creates the text label on screen\nconst label=nodesGroup.append(\"text\").attr(\"x\",200).attr(\"y\",200).attr(\"class\",\"label\").attr(\"text-anchor\",\"middle\").attr(\"alignment-baseline\",\"middle\").style(\"fill\",\"white\").style(\"font-size\",\"12px\").text(this.value);const nodeTransition=nodeElement.transition().duration(1000).style(\"opacity\",1).attr(\"cx\",position.x).attr(\"cy\",position.y);const labelTransition=label.transition().duration(1000).style(\"opacity\",1).attr(\"x\",position.x).attr(\"y\",position.y);let edgeTransitionPromise=null;if(edge){const edgeTransition=edge.transition().duration(1000).style(\"opacity\",1).attr(\"x2\",position.x).attr(\"y2\",position.y);edgeTransitionPromise=edgeTransition.end();}// Saves node into array\nthis.nodes.push(new Node(this.value,this.index,nodeElement,edge,label));await Promise.all([nodeTransition.end(),labelTransition.end(),edgeTransitionPromise]);}}","map":{"version":3,"names":["Node","TreeAddInstruction","constructor","index","value","nodes","getNodePosition","isNaN","x","y","depth","Math","floor","log2","xSpacing","ySpacing","parentIndex","parentPos","isLeftChild","xOffset","process","svg","position","hasParent","nodesGroup","select","edgesGroup","empty","append","attr","edge","style","nodeElement","label","text","nodeTransition","transition","duration","labelTransition","edgeTransitionPromise","edgeTransition","end","push","Promise","all"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/tree_add_instruction.tsx"],"sourcesContent":["import {Instruction} from \"./i_instruction\";\r\nimport * as d3 from \"d3\";\r\nimport {BaseType} from \"d3\";\r\nimport {Node} from \"../pictures/node\";\r\n\r\nexport class TreeAddInstruction implements Instruction {\r\n\r\n    index: number;\r\n    value: number | string;\r\n    nodes: Node[];\r\n\r\n    constructor(index: number, value: number | string, nodes : Node[]) {\r\n        this.index = index;\r\n        this.value = value;\r\n        this.nodes = nodes;\r\n    }\r\n\r\n    async process(svg: d3.Selection<BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n\r\n        const position = this.getNodePosition(this.index);\r\n        const parentIndex = Math.floor((this.index as number - 1) / 2);\r\n        const hasParent = parentIndex >= 0;\r\n\r\n        let nodesGroup = svg.select<SVGGElement>(\"g.nodes\");\r\n        let edgesGroup = svg.select<SVGGElement>(\"g.edges\");\r\n\r\n        if (edgesGroup.empty()) {\r\n            edgesGroup = svg.append(\"g\").attr(\"class\", \"edges\");\r\n        }\r\n\r\n        if (nodesGroup.empty()) {\r\n            nodesGroup = svg.append(\"g\").attr(\"class\", \"nodes\");\r\n        }\r\n\r\n        let edge: d3.Selection<SVGLineElement, unknown, HTMLElement, any> | null = null;\r\n\r\n        if (hasParent) {\r\n            const parentPos = this.getNodePosition(parentIndex as number);\r\n            edge = edgesGroup.append(\"line\")\r\n                .attr(\"x1\", parentPos.x)\r\n                .attr(\"y1\", parentPos.y)\r\n                .attr(\"x2\", 200)\r\n                .attr(\"y2\", 200)\r\n                .attr(\"stroke\", \"black\")\r\n                .attr(\"stroke-width\", 5)\r\n                .style(\"opacity\", 0);\r\n        }\r\n\r\n        // Creates the circle node on screen\r\n        const nodeElement = nodesGroup.append(\"circle\")\r\n            .attr(\"cx\", 200)\r\n            .attr(\"cy\", 200)\r\n            .attr(\"r\", 20)\r\n            .attr(\"class\", \"node\")\r\n            .style(\"opacity\", 0);\r\n\r\n        // Creates the text label on screen\r\n        const label = nodesGroup.append(\"text\")\r\n            .attr(\"x\", 200)\r\n            .attr(\"y\", 200)\r\n            .attr(\"class\", \"label\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .attr(\"alignment-baseline\", \"middle\")\r\n            .style(\"fill\", \"white\")\r\n            .style(\"font-size\", \"12px\")\r\n            .text(this.value);\r\n\r\n        const nodeTransition = nodeElement.transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"cx\", position.x)\r\n            .attr(\"cy\", position.y)\r\n\r\n        const labelTransition = label.transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"x\", position.x)\r\n            .attr(\"y\", position.y)\r\n\r\n        let edgeTransitionPromise : Promise<void> | null = null;\r\n\r\n        if (edge) {\r\n            const edgeTransition = edge.transition()\r\n                .duration(1000)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"x2\", position.x)\r\n                .attr(\"y2\", position.y);\r\n\r\n            edgeTransitionPromise = edgeTransition.end();\r\n        }\r\n\r\n        // Saves node into array\r\n        this.nodes.push(new Node(this.value, this.index, nodeElement, edge, label))\r\n\r\n        await Promise.all([nodeTransition.end(), labelTransition.end(), edgeTransitionPromise]);\r\n    }\r\n\r\n    getNodePosition = (index: number): { x: number, y: number } => {\r\n        if (index < 0 || isNaN(index)) return { x: 0, y: 0 };\r\n        if (index === 0) return { x: 250, y: 50 }; // Root at the center\r\n\r\n        const depth = Math.floor(Math.log2(index + 1)); // Get depth in the tree\r\n        const xSpacing = (200) / (depth + 1); // Adjust x spacing\r\n        const ySpacing = 80; // Vertical spacing\r\n\r\n        const parentIndex = Math.floor((index - 1) / 2);\r\n        const parentPos = this.getNodePosition(parentIndex);\r\n\r\n        const isLeftChild = index % 2 === 1;\r\n        const xOffset = isLeftChild ? -xSpacing : xSpacing;\r\n\r\n        return { x: parentPos.x + xOffset, y: parentPos.y + ySpacing };\r\n    };\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}