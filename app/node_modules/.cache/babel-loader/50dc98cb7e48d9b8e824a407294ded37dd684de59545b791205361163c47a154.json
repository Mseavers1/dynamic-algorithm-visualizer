{"ast":null,"code":"export class TreeSwapInstruction{constructor(nodeAIndex,nodeBIndex,nodes){this.nodeAIndex=void 0;this.nodeBIndex=void 0;this.nodes=void 0;this.nodeAIndex=nodeAIndex;this.nodeBIndex=nodeBIndex;this.nodes=nodes;}async process(svg){// Get Nodes\nconst nodeA=this.nodes[this.nodeAIndex];const nodeB=this.nodes[this.nodeBIndex];// Get positions\nconst nodeAPosition={x:parseFloat(nodeA.element.attr(\"cx\")),y:parseFloat(nodeA.element.attr(\"cy\"))};const nodeBPosition={x:parseFloat(nodeB.element.attr(\"cx\")),y:parseFloat(nodeB.element.attr(\"cy\"))};// Swap Nodes\nconst nodeATransition=nodeA.element.transition().duration(1000).style(\"opacity\",1).attr(\"cx\",nodeBPosition.x).attr(\"cy\",nodeBPosition.y);const nodeBTransition=nodeB.element.transition().duration(1000).style(\"opacity\",1).attr(\"cx\",nodeAPosition.x).attr(\"cy\",nodeAPosition.y);// Swap Labels\nconst nodeALabelTransition=nodeA.label.transition().duration(1000).style(\"opacity\",1).attr(\"x\",nodeBPosition.x).attr(\"y\",nodeBPosition.y);const nodeBLabelTransition=nodeB.label.transition().duration(1000).style(\"opacity\",1).attr(\"x\",nodeAPosition.x).attr(\"y\",nodeAPosition.y);// Switch indexes\nthis.nodes[this.nodeAIndex].index=this.nodeBIndex;this.nodes[this.nodeBIndex].index=this.nodeAIndex;// Switch edges\nconst nodeAEdge=this.nodes[this.nodeAIndex].edge;this.nodes[this.nodeAIndex].edge=this.nodes[this.nodeBIndex].edge;this.nodes[this.nodeBIndex].edge=nodeAEdge;// Swap actual array elements\nthis.nodes[this.nodeAIndex]=this.nodes[this.nodeBIndex];this.nodes[this.nodeBIndex]=nodeA;await Promise.all([nodeATransition.end(),nodeBTransition.end(),nodeALabelTransition.end(),nodeBLabelTransition.end()]);}}","map":{"version":3,"names":["TreeSwapInstruction","constructor","nodeAIndex","nodeBIndex","nodes","process","svg","nodeA","nodeB","nodeAPosition","x","parseFloat","element","attr","y","nodeBPosition","nodeATransition","transition","duration","style","nodeBTransition","nodeALabelTransition","label","nodeBLabelTransition","index","nodeAEdge","edge","Promise","all","end"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/tree_swap_instruction.tsx"],"sourcesContent":["import {Instruction} from \"./i_instruction\";\r\nimport * as d3 from \"d3\";\r\nimport {BaseType} from \"d3\";\r\nimport {Node} from \"../pictures/node\";\r\n\r\nexport class TreeSwapInstruction implements Instruction {\r\n\r\n    nodeAIndex: number;\r\n    nodeBIndex: number;\r\n    nodes: Node[];\r\n\r\n    constructor(nodeAIndex : number, nodeBIndex : number, nodes : Node[]) {\r\n        this.nodeAIndex = nodeAIndex;\r\n        this.nodeBIndex = nodeBIndex;\r\n        this.nodes = nodes;\r\n    }\r\n\r\n    async process(svg: d3.Selection<BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n\r\n        // Get Nodes\r\n        const nodeA = this.nodes[this.nodeAIndex];\r\n        const nodeB = this.nodes[this.nodeBIndex];\r\n\r\n        // Get positions\r\n        const nodeAPosition = { x: parseFloat(nodeA.element.attr(\"cx\")), y: parseFloat(nodeA.element.attr(\"cy\")) };\r\n        const nodeBPosition = { x: parseFloat(nodeB.element.attr(\"cx\")), y: parseFloat(nodeB.element.attr(\"cy\")) };\r\n\r\n        // Swap Nodes\r\n        const nodeATransition = nodeA.element.transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"cx\", nodeBPosition.x)\r\n            .attr(\"cy\", nodeBPosition.y)\r\n\r\n        const nodeBTransition = nodeB.element.transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"cx\", nodeAPosition.x)\r\n            .attr(\"cy\", nodeAPosition.y)\r\n\r\n        // Swap Labels\r\n        const nodeALabelTransition = nodeA.label.transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"x\", nodeBPosition.x)\r\n            .attr(\"y\", nodeBPosition.y)\r\n\r\n        const nodeBLabelTransition = nodeB.label.transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"x\", nodeAPosition.x)\r\n            .attr(\"y\", nodeAPosition.y)\r\n\r\n        // Switch indexes\r\n        this.nodes[this.nodeAIndex].index = this.nodeBIndex;\r\n        this.nodes[this.nodeBIndex].index = this.nodeAIndex;\r\n\r\n        // Switch edges\r\n        const nodeAEdge = this.nodes[this.nodeAIndex].edge;\r\n        this.nodes[this.nodeAIndex].edge = this.nodes[this.nodeBIndex].edge;\r\n        this.nodes[this.nodeBIndex].edge = nodeAEdge;\r\n\r\n        // Swap actual array elements\r\n        this.nodes[this.nodeAIndex] = this.nodes[this.nodeBIndex];\r\n        this.nodes[this.nodeBIndex] = nodeA;\r\n\r\n        await Promise.all([nodeATransition.end(), nodeBTransition.end(), nodeALabelTransition.end(), nodeBLabelTransition.end()]);\r\n    }\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}