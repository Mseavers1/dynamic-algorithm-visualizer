{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Micha\\\\Documents\\\\GitHub\\\\dynamic-algorithm-visualizer\\\\app\\\\src\\\\components\\\\structures\\\\binary_tree.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { animated, useTransition } from \"@react-spring/web\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BinaryTree = () => {\n  _s();\n  const [values, setValues] = useState([]);\n  const add = value => {\n    setValues(prevValues => [...prevValues, value]);\n  };\n  const remove = () => {\n    if (values.length <= 0) {\n      console.error(\"Cannot remove from an empty tree.\");\n      return null;\n    }\n    const newValues = [...values];\n    const removedValue = newValues.pop();\n    setValues(newValues);\n    return removedValue;\n  };\n  const size = () => values.length;\n  const get = nodeID => {\n    if (nodeID <= 0 || nodeID > values.length) {\n      console.error(\"NodeID is out of bounds\");\n      return null;\n    }\n    return values[nodeID - 1];\n  };\n  const nodeTransitions = useTransition(values, {\n    keys: item => item,\n    // Use the item itself as the key (item is of type string | number)\n    from: {\n      opacity: 0,\n      transform: 'scale(0)'\n    },\n    enter: {\n      opacity: 1,\n      transform: 'scale(1)'\n    },\n    leave: {\n      opacity: 0,\n      transform: 'scale(0)'\n    }\n  });\n  const getNodePosition = index => {\n    const x = 100 + index * 150; // Example horizontal position\n    const y = 100; // All nodes aligned at the same vertical position\n    return {\n      x,\n      y\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    children: nodeTransitions((style, node, index) => {\n      const posIndex = index;\n      const {\n        x,\n        y\n      } = getNodePosition(posIndex);\n      return /*#__PURE__*/_jsxDEV(animated.g, {\n        style: style,\n        children: [posIndex > 0 && /*#__PURE__*/_jsxDEV(animated.line, {\n          x1: getNodePosition(Math.floor((posIndex - 1) / 2)).x,\n          y1: getNodePosition(Math.floor((posIndex - 1) / 2)).y,\n          x2: x,\n          y2: y,\n          stroke: \"black\",\n          strokeWidth: \"2\",\n          style: {\n            strokeOpacity: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: x,\n          cy: y,\n          r: 30,\n          fill: \"steelblue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: x,\n          y: y,\n          dy: 5,\n          textAnchor: \"middle\",\n          fill: \"white\",\n          fontSize: \"12\",\n          children: node\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this)]\n      }, node, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s(BinaryTree, \"/1jBViwTV88Wgby9PJHOANQ2g2c=\", false, function () {\n  return [useTransition];\n});\n_c = BinaryTree;\nvar _c;\n$RefreshReg$(_c, \"BinaryTree\");","map":{"version":3,"names":["React","useState","animated","useTransition","jsxDEV","_jsxDEV","BinaryTree","_s","values","setValues","add","value","prevValues","remove","length","console","error","newValues","removedValue","pop","size","get","nodeID","nodeTransitions","keys","item","from","opacity","transform","enter","leave","getNodePosition","index","x","y","children","style","node","posIndex","g","line","x1","Math","floor","y1","x2","y2","stroke","strokeWidth","strokeOpacity","fileName","_jsxFileName","lineNumber","columnNumber","cx","cy","r","fill","dy","textAnchor","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/structures/binary_tree.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {animated, useTransition} from \"@react-spring/web\";\r\n\r\nexport const BinaryTree = () => {\r\n    const [values, setValues] = useState<(string | number)[]>([]);\r\n\r\n    const add = (value: string | number): void => {\r\n        setValues(prevValues => [...prevValues, value]);\r\n    };\r\n\r\n    const remove = (): string | number | null => {\r\n\r\n        if (values.length <= 0) {\r\n            console.error(\"Cannot remove from an empty tree.\");\r\n            return null;\r\n        }\r\n\r\n        const newValues = [...values];\r\n        const removedValue = newValues.pop();\r\n        setValues(newValues);\r\n\r\n        return removedValue as string | number;\r\n    };\r\n\r\n    const size = (): number => values.length;\r\n\r\n    const get = (nodeID: number): string | number | null => {\r\n        if (nodeID <= 0 || nodeID > values.length) {\r\n            console.error(\"NodeID is out of bounds\");\r\n            return null;\r\n        }\r\n        return values[nodeID - 1];\r\n    };\r\n\r\n    const nodeTransitions = useTransition(values, {\r\n        keys: (item) => item, // Use the item itself as the key (item is of type string | number)\r\n        from: { opacity: 0, transform: 'scale(0)' },\r\n        enter: { opacity: 1, transform: 'scale(1)' },\r\n        leave: { opacity: 0, transform: 'scale(0)' },\r\n    });\r\n\r\n    const getNodePosition = (index: number) => {\r\n        const x = 100 + index * 150; // Example horizontal position\r\n        const y = 100; // All nodes aligned at the same vertical position\r\n        return { x, y };\r\n    };\r\n\r\n    return (\r\n        <g>\r\n            {nodeTransitions((style, node, index) => {\r\n                const posIndex = index as unknown as number;\r\n                const { x, y } = getNodePosition(posIndex);\r\n                return (\r\n                    <animated.g key={node} style={style}>\r\n                        {posIndex > 0 && (\r\n                            <animated.line\r\n                                x1={getNodePosition(Math.floor((posIndex - 1) / 2)).x}\r\n                                y1={getNodePosition(Math.floor((posIndex - 1) / 2)).y}\r\n                                x2={x}\r\n                                y2={y}\r\n                                stroke=\"black\"\r\n                                strokeWidth=\"2\"\r\n                                style={{ strokeOpacity: 1 }}\r\n                            />\r\n                        )}\r\n                        <circle cx={x} cy={y} r={30} fill=\"steelblue\" />\r\n                        <text x={x} y={y} dy={5} textAnchor=\"middle\" fill=\"white\" fontSize=\"12\">\r\n                            {node}\r\n                        </text>\r\n                    </animated.g>\r\n                );\r\n            })}\r\n        </g>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}