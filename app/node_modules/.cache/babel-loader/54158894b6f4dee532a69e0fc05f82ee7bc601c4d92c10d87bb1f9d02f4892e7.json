{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nexport const TreeAnimator = ({\n  instructions,\n  setInstructions,\n  nodeData,\n  setNodeData\n}) => {\n  _s();\n  const [instructionStack, setInstructionStack] = useState([]);\n  const [nodes, setNodes] = useState([]);\n  useEffect(() => {\n    setInstructionStack(instructions);\n    setNodes(nodeData);\n  }, [instructions, nodeData]);\n  const processInstructions = async svg => {\n    for (let instruction of instructionStack) {\n      if (instruction.type === 'add' && instruction.value) {\n        // Wait for the previous node to finish its animation before adding the next one\n        await addNode(svg, instruction);\n      }\n      if (instruction.type === 'swap') {\n        await swapNodes(svg, nodes[instruction.toIndex], nodes[instruction.fromIndex]);\n        const i = nodes[instruction.toIndex].index;\n        nodes[instruction.toIndex].index = nodes[instruction.fromIndex].index;\n        nodes[instruction.fromIndex].index = i;\n        const node = nodes[instruction.toIndex];\n        nodes[instruction.toIndex] = nodes[instruction.fromIndex];\n        nodes[instruction.fromIndex] = node;\n      }\n    }\n    setInstructions([]);\n    setNodeData(nodes);\n    alert(nodeData.length);\n  };\n  const getNodePosition = index => {\n    if (index < 0 || isNaN(index)) return {\n      x: 0,\n      y: 0\n    };\n    if (index === 0) return {\n      x: 250,\n      y: 50\n    }; // Root at the center\n\n    const depth = Math.floor(Math.log2(index + 1)); // Get depth in the tree\n    const xSpacing = 200 / (depth + 1); // Adjust x spacing\n    const ySpacing = 80; // Vertical spacing\n\n    const parentIndex = Math.floor((index - 1) / 2);\n    const parentPos = getNodePosition(parentIndex);\n    const isLeftChild = index % 2 === 1;\n    const xOffset = isLeftChild ? -xSpacing : xSpacing;\n    return {\n      x: parentPos.x + xOffset,\n      y: parentPos.y + ySpacing\n    };\n  };\n\n  // Node function that appends a circle and returns the D3 selection\n  const addNode = (svg, instruction) => {\n    return new Promise(resolve => {\n      const nodeElement = svg.append(\"circle\").attr(\"cx\", 200) // Set starting x position\n      .attr(\"cy\", 200) // Set starting y position\n      .attr(\"r\", 20).attr(\"class\", \"node\").style(\"opacity\", 0); // Start with invisible node\n\n      const label = svg.append(\"text\").attr(\"x\", 200) // Same x position as the circle\n      .attr(\"y\", 200) // Same y position as the circle\n      .attr(\"class\", \"label\").attr(\"text-anchor\", \"middle\") // Center the text horizontally\n      .attr(\"alignment-baseline\", \"middle\") // Center the text vertically\n      .style(\"fill\", \"white\") // Set text color\n      .style(\"font-size\", \"12px\").text(instruction.value);\n      const newNode = {\n        node: nodeElement,\n        label: label,\n        index: instruction.index\n      };\n      setNodes(prevNodes => [...prevNodes, newNode]);\n\n      // Animate the node: fade in and move\n      nodeElement.transition().duration(1000) // Duration of 1 second\n      .style(\"opacity\", 1) // Fade in the node\n      .attr(\"cx\", getNodePosition(instruction.index).x).attr(\"cy\", getNodePosition(instruction.index).y); // Keep y position constant for simplicity\n\n      label.transition().duration(1000) // Duration of 1 second (same as node)\n      .style(\"opacity\", 1).attr(\"x\", getNodePosition(instruction.index).x).attr(\"y\", getNodePosition(instruction.index).y);\n\n      // Resolve the promise after the animation duration\n      setTimeout(() => resolve(), 1000); // Wait for the animation to finish (1000ms)\n    });\n  };\n  const swapNodes = (svg, nodeA, nodeB) => {\n    //alert(nodes.length);\n\n    return new Promise(resolve => {\n      const node1 = nodeA.node;\n      const label1 = nodeA.label;\n      const node2 = nodeB.node;\n      const label2 = nodeB.label;\n      const node1Position = {\n        x: parseFloat(node1.attr(\"cx\")),\n        y: parseFloat(node1.attr(\"cy\"))\n      };\n      const node2Position = {\n        x: parseFloat(node2.attr(\"cx\")),\n        y: parseFloat(node2.attr(\"cy\"))\n      };\n\n      // Animate node1 to node2's position\n      node1.transition().duration(1000).attr(\"cx\", node2Position.x).attr(\"cy\", node2Position.y);\n\n      // Animate label1 to node2's position\n      label1.transition().duration(1000).attr(\"x\", node2Position.x).attr(\"y\", node2Position.y);\n\n      // Animate node2 to node1's position\n      node2.transition().duration(1000).attr(\"cx\", node1Position.x).attr(\"cy\", node1Position.y);\n\n      // Animate label2 to node1's position\n      label2.transition().duration(1000).attr(\"x\", node1Position.x).attr(\"y\", node1Position.y);\n      setTimeout(() => resolve(), 1000);\n    });\n  };\n  useEffect(() => {\n    // Select the SVG element that the D3 code will operate on\n    const svg = d3.select(\"#svg-container\").attr(\"width\", 500).attr(\"height\", 500);\n\n    // Process the instructions to add nodes\n    processInstructions(svg);\n  }, [instructionStack]); // Empty dependency array to run the effect only once\n\n  return null; // No need to return an element here, as we're using D3 to manipulate the SVG\n};\n_s(TreeAnimator, \"DrVlLAnOJD4xx8juIXmz7oKzjGQ=\");\n_c = TreeAnimator;\nvar _c;\n$RefreshReg$(_c, \"TreeAnimator\");","map":{"version":3,"names":["useEffect","useState","d3","TreeAnimator","instructions","setInstructions","nodeData","setNodeData","_s","instructionStack","setInstructionStack","nodes","setNodes","processInstructions","svg","instruction","type","value","addNode","swapNodes","toIndex","fromIndex","i","index","node","alert","length","getNodePosition","isNaN","x","y","depth","Math","floor","log2","xSpacing","ySpacing","parentIndex","parentPos","isLeftChild","xOffset","Promise","resolve","nodeElement","append","attr","style","label","text","newNode","prevNodes","transition","duration","setTimeout","nodeA","nodeB","node1","label1","node2","label2","node1Position","parseFloat","node2Position","select","_c","$RefreshReg$"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/algorithms/animation_testing.tsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {BaseType} from \"d3\";\r\nimport {Instruction, NodeData} from \"./tree_intructions\";\r\n\r\ninterface TreeAnimatorProps {\r\n    instructions: Instruction[];\r\n    setInstructions: React.Dispatch<React.SetStateAction<Instruction[]>>;\r\n\r\n    nodeData: NodeData[];\r\n    setNodeData: React.Dispatch<React.SetStateAction<NodeData[]>>;\r\n}\r\n\r\nexport const TreeAnimator: React.FC<TreeAnimatorProps> = ({ instructions, setInstructions, nodeData, setNodeData}) => {\r\n\r\n    const [instructionStack, setInstructionStack] = useState<Instruction[]>([]);\r\n    const [nodes, setNodes] = useState<NodeData[]>([]);\r\n\r\n    useEffect(() => {\r\n        setInstructionStack(instructions);\r\n        setNodes(nodeData);\r\n    }, [instructions, nodeData]);\r\n\r\n    const processInstructions = async (svg: d3.Selection<BaseType, unknown, HTMLElement, any>) => {\r\n        for (let instruction of instructionStack) {\r\n            if (instruction.type === 'add' && instruction.value) {\r\n                // Wait for the previous node to finish its animation before adding the next one\r\n                await addNode(svg, instruction);\r\n            }\r\n\r\n            if (instruction.type === 'swap') {\r\n\r\n                await swapNodes(svg, nodes[instruction.toIndex as number], nodes[instruction.fromIndex as number]);\r\n\r\n                const i = nodes[instruction.toIndex as number].index;\r\n                nodes[instruction.toIndex as number].index = nodes[instruction.fromIndex as number].index;\r\n                nodes[instruction.fromIndex as number].index = i;\r\n\r\n                const node = nodes[instruction.toIndex as number]\r\n                nodes[instruction.toIndex as number] = nodes[instruction.fromIndex as number];\r\n                nodes[instruction.fromIndex as number] = node;\r\n            }\r\n\r\n        }\r\n\r\n\r\n        setInstructions([]);\r\n        setNodeData(nodes);\r\n\r\n        alert(nodeData.length)\r\n    };\r\n\r\n    const getNodePosition = (index: number): { x: number, y: number } => {\r\n        if (index < 0 || isNaN(index)) return { x: 0, y: 0 };\r\n        if (index === 0) return { x: 250, y: 50 }; // Root at the center\r\n\r\n        const depth = Math.floor(Math.log2(index + 1)); // Get depth in the tree\r\n        const xSpacing = (200) / (depth + 1); // Adjust x spacing\r\n        const ySpacing = 80; // Vertical spacing\r\n\r\n        const parentIndex = Math.floor((index - 1) / 2);\r\n        const parentPos = getNodePosition(parentIndex);\r\n\r\n        const isLeftChild = index % 2 === 1;\r\n        const xOffset = isLeftChild ? -xSpacing : xSpacing;\r\n\r\n        return { x: parentPos.x + xOffset, y: parentPos.y + ySpacing };\r\n    };\r\n\r\n    // Node function that appends a circle and returns the D3 selection\r\n    const addNode = (svg: d3.Selection<BaseType, unknown, HTMLElement, any>, instruction: Instruction) => {\r\n\r\n        return new Promise<void>((resolve) => {\r\n            const nodeElement = svg.append(\"circle\")\r\n                .attr(\"cx\", 200)  // Set starting x position\r\n                .attr(\"cy\", 200)  // Set starting y position\r\n                .attr(\"r\", 20)\r\n                .attr(\"class\", \"node\")\r\n                .style(\"opacity\", 0);  // Start with invisible node\r\n\r\n            const label = svg.append(\"text\")\r\n                .attr(\"x\", 200)  // Same x position as the circle\r\n                .attr(\"y\", 200)  // Same y position as the circle\r\n                .attr(\"class\", \"label\")\r\n                .attr(\"text-anchor\", \"middle\")  // Center the text horizontally\r\n                .attr(\"alignment-baseline\", \"middle\")  // Center the text vertically\r\n                .style(\"fill\", \"white\")  // Set text color\r\n                .style(\"font-size\", \"12px\")\r\n                .text(instruction.value as number | string);\r\n\r\n            const newNode: NodeData = {\r\n                node: nodeElement,\r\n                label: label,\r\n                index: instruction.index as number,\r\n            };\r\n\r\n            setNodes(prevNodes => [...prevNodes, newNode]);\r\n\r\n            // Animate the node: fade in and move\r\n            nodeElement.transition()\r\n                .duration(1000)  // Duration of 1 second\r\n                .style(\"opacity\", 1)  // Fade in the node\r\n                .attr(\"cx\", getNodePosition(instruction.index as number).x)\r\n                .attr(\"cy\", getNodePosition(instruction.index as number).y);  // Keep y position constant for simplicity\r\n\r\n            label.transition()\r\n                .duration(1000)  // Duration of 1 second (same as node)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"x\", getNodePosition(instruction.index as number).x)\r\n                .attr(\"y\", getNodePosition(instruction.index as number).y);\r\n\r\n            // Resolve the promise after the animation duration\r\n            setTimeout(() => resolve(), 1000);  // Wait for the animation to finish (1000ms)\r\n        });\r\n    };\r\n\r\n    const swapNodes = (\r\n        svg: d3.Selection<BaseType, unknown, HTMLElement, any>,\r\n        nodeA: NodeData,\r\n        nodeB: NodeData,\r\n    ) => {\r\n\r\n        //alert(nodes.length);\r\n\r\n        return new Promise<void>((resolve) => {\r\n            const node1 = nodeA.node;\r\n            const label1 = nodeA.label;\r\n            const node2 = nodeB.node;\r\n            const label2 = nodeB.label;\r\n\r\n\r\n            const node1Position = { x: parseFloat(node1.attr(\"cx\")), y: parseFloat(node1.attr(\"cy\")) };\r\n            const node2Position = { x: parseFloat(node2.attr(\"cx\")), y: parseFloat(node2.attr(\"cy\")) };\r\n\r\n            // Animate node1 to node2's position\r\n            node1.transition()\r\n                .duration(1000)\r\n                .attr(\"cx\", node2Position.x)\r\n                .attr(\"cy\", node2Position.y);\r\n\r\n            // Animate label1 to node2's position\r\n            label1.transition()\r\n                .duration(1000)\r\n                .attr(\"x\", node2Position.x)\r\n                .attr(\"y\", node2Position.y);\r\n\r\n            // Animate node2 to node1's position\r\n            node2.transition()\r\n                .duration(1000)\r\n                .attr(\"cx\", node1Position.x)\r\n                .attr(\"cy\", node1Position.y);\r\n\r\n            // Animate label2 to node1's position\r\n            label2.transition()\r\n                .duration(1000)\r\n                .attr(\"x\", node1Position.x)\r\n                .attr(\"y\", node1Position.y);\r\n\r\n            setTimeout(() => resolve(), 1000);\r\n        });\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        // Select the SVG element that the D3 code will operate on\r\n        const svg = d3.select(\"#svg-container\")\r\n            .attr(\"width\", 500)\r\n            .attr(\"height\", 500);\r\n\r\n        // Process the instructions to add nodes\r\n        processInstructions(svg);\r\n    }, [instructionStack]);   // Empty dependency array to run the effect only once\r\n\r\n    return null;  // No need to return an element here, as we're using D3 to manipulate the SVG\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}