{"ast":null,"code":"// Counter to generate unique IDs for curved paths\nlet pathIdCounter = 0;\nexport class FAAddAllInstruction {\n  // Define a consistent node radius\n\n  constructor(graph) {\n    this.graph = void 0;\n    this.nodeRadius = 20;\n    this.graph = graph;\n  }\n  async process(svg) {\n    const nodeTransitions = [];\n    const labelTransitions = [];\n    const linesGroup = svg.append(\"g\").attr(\"id\", \"lines\");\n    const layoutCenterX = 350;\n    const layoutCenterY = 200;\n    const nodesGroup = svg.append(\"g\");\n    let indexNodes = new Map();\n    let index = 0;\n    const total = this.graph.get_nodes().size;\n\n    // Draw all nodes\n    this.graph.get_nodes().forEach((node, value) => {\n      const pos = this.getPosition(index, total, layoutCenterX, layoutCenterY);\n      const is_starting_node = this.graph.is_starting_node(value);\n      const is_final_node = this.graph.is_final_node(value); // Get the final node status\n\n      // Create the node(s) and get the selections\n      const nodeSelections = this.createNode(nodesGroup, pos.x, pos.y, this.nodeRadius, \"node\", 0, is_final_node);\n      const label = this.createLabel(nodesGroup, pos, value);\n\n      // Apply transition to both the main circle and the outer ring\n      const node_transition = this.applyNodeTransition(nodeSelections.mainCircle, nodeSelections.outerRing, pos);\n      const label_transition = this.applyLabelTransition(label, pos);\n      indexNodes.set(value, [index++, nodeSelections.mainCircle]);\n      nodeTransitions.push(node_transition);\n      labelTransitions.push(label_transition);\n\n      // If node is a starting state, add a line to it pointing away from the center\n      if (is_starting_node) {\n        const startNodePos = pos;\n\n        // Calculate vector from layout center to starting node\n        const vx = startNodePos.x - layoutCenterX;\n        const vy = startNodePos.y - layoutCenterY;\n\n        // Normalize the vector\n        const magnitude = Math.sqrt(vx * vx + vy * vy);\n        const unitVx = magnitude === 0 ? 0 : vx / magnitude;\n        const unitVy = magnitude === 0 ? 0 : vy / magnitude;\n        const arrowLength = 50;\n\n        // Calculate the start point of the arrow\n        const arrowStartX = startNodePos.x + unitVx * arrowLength;\n        const arrowStartY = startNodePos.y + unitVy * arrowLength;\n\n        // The end point of the arrow is the starting node position (center)\n        const arrowEndX = startNodePos.x;\n        const arrowEndY = startNodePos.y;\n\n        // Create the starting arrow line, adjusted to end on the node's circumference\n        this.createLine(linesGroup, {\n          x: arrowStartX,\n          y: arrowStartY\n        }, {\n          x: arrowEndX,\n          y: arrowEndY\n        }, this.nodeRadius);\n      }\n    });\n\n    // Draw connectors\n    this.graph.get_nodes().forEach((node, value) => {\n      let pointers = this.graph.get_pointers(value);\n      if (pointers != null && pointers.size > 0) {\n        const entry = indexNodes.get(value);\n        if (!entry) return; // safety check\n\n        const [index, currentNode] = entry;\n        const current_node_pos = this.getPosition(index, total, layoutCenterX, layoutCenterY);\n        pointers.forEach((weights, pointer) => {\n          const targetEntry = indexNodes.get(pointer.get_value());\n          if (!targetEntry) return;\n          const [targetIndex, _] = targetEntry;\n          const target_node_pos = this.getPosition(targetIndex, total, 350, 200);\n          if (value == pointer.get_value()) {\n            // Loop arrow back to self\n\n            // Calculate angle of the node from the layout center\n            const nodeAngle = Math.atan2(current_node_pos.y - layoutCenterY, current_node_pos.x - layoutCenterX);\n\n            // Define loop parameters based on the node's angle\n            const loopRadius = 25; // Radius of the loop itself\n            const angleOffset = Math.PI / 6; // Offset angles from the radial direction (e.g., 30 degrees)\n\n            const startAngleRad = nodeAngle - angleOffset;\n            const endAngleRad = nodeAngle + angleOffset;\n\n            // Calculate start and end points on the node's circumference\n            const startX = current_node_pos.x + this.nodeRadius * Math.cos(startAngleRad);\n            const startY = current_node_pos.y + this.nodeRadius * Math.sin(startAngleRad);\n            const endX = current_node_pos.x + this.nodeRadius * Math.cos(endAngleRad);\n            const endY = current_node_pos.y + this.nodeRadius * Math.sin(endAngleRad);\n\n            // Calculate control point for the arc\n            // Position the control point further out along the radial direction\n            const controlPointDistance = this.nodeRadius + loopRadius * 1.5; // Distance from node center\n            const controlX = current_node_pos.x + controlPointDistance * Math.cos(nodeAngle);\n            const controlY = current_node_pos.y + controlPointDistance * Math.sin(nodeAngle);\n\n            // SVG path data for a self-loop using a quadratic bezier curve (Q)\n            const pathData = `M ${startX},${startY} Q ${controlX},${controlY} ${endX},${endY}`;\n            const selfLoopPath = linesGroup.append(\"path\").attr(\"d\", pathData).attr(\"fill\", \"none\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"marker-end\", \"url(#arrow)\"); // Add the arrow marker\n\n            // Create label for the self-loop\n            this.createLineLabel(linesGroup, selfLoopPath, weights);\n          } else if (this.hasMutualPointer(value, pointer.get_value())) {\n            const curvedPath = this.createCurvedLine(linesGroup, current_node_pos, target_node_pos, this.nodeRadius, 0.12);\n            this.createLineLabel(linesGroup, curvedPath, weights);\n          } else {\n            // Create straight line, adjusted to end on the target node's circumference\n            const straightLine = this.createLine(linesGroup, current_node_pos, target_node_pos, this.nodeRadius);\n            this.createLineLabel(linesGroup, straightLine, weights);\n          }\n        });\n      }\n    });\n    await Promise.all([...nodeTransitions, ...labelTransitions]);\n  }\n\n  // Creates a label for a line (edge) {Mostly generated through gpt and gemini -- edited by michael}\n  createLineLabel(group, lineOrPath, txts) {\n    const isLine = lineOrPath.node() instanceof SVGLineElement;\n    const createdLabels = [];\n    txts.forEach((txt, index) => {\n      // Append a text element for each weight\n      const text = group.append(\"text\").style(\"fill\", \"red\").style(\"font-size\", \"16px\").style(\"pointer-events\", \"none\");\n      if (isLine) {\n        const line = lineOrPath;\n        const x1 = parseFloat(line.attr(\"x1\"));\n        const y1 = parseFloat(line.attr(\"y1\"));\n        const x2 = parseFloat(line.attr(\"x2\"));\n        const y2 = parseFloat(line.attr(\"y2\"));\n\n        // Calculate midpoint\n        const midX = (x1 + x2) / 2;\n        const midY = (y1 + y2) / 2 - 10; // Slightly offset upwards\n\n        // Calculate perpendicular offset\n        const dx = x2 - x1;\n        const dy = y2 - y1;\n        const lineLength = Math.sqrt(dx * dx + dy * dy);\n        // Add a small check for zero length to avoid division by zero\n        const offsetX = lineLength === 0 ? 0 : -dy / lineLength;\n        const offsetY = lineLength === 0 ? 0 : -dx / lineLength;\n\n        // Adjust position based on the index for multiple labels\n        const labelSpacing = 15; // Adjust this value for desired spacing\n        const totalOffset = (index - (txts.length - 1) / 2) * labelSpacing; // Center the labels around the midpoint\n\n        text.attr(\"x\", midX + offsetX * totalOffset).attr(\"y\", midY + offsetY * totalOffset).attr(\"text-anchor\", \"middle\").attr(\"alignment-baseline\", \"middle\").text(txt);\n      } else {\n        const path = lineOrPath;\n        const pathId = path.attr(\"id\");\n\n        // Adjust startOffset for each label along the curve or self-loop\n        // For self-loops, 50% places it at the peak. For curved lines, adjust as needed.\n        let startOffsetValue = '50%'; // Default for self-loops\n\n        if (pathId.startsWith('curved-path-')) {\n          // Adjust offset for multiple labels on curved path\n          startOffsetValue = `${50 - (txts.length - 1) * 5 + index * 10}%`;\n        } else {\n          // Adjust offset for multiple labels on self-loop\n          startOffsetValue = `${50 + (index - (txts.length - 1) / 2) * 5}%`;\n        }\n        text.append(\"textPath\").attr(\"xlink:href\", `#${pathId}`).attr(\"startOffset\", startOffsetValue).attr(\"text-anchor\", \"middle\").text(txt);\n      }\n      createdLabels.push(text);\n    });\n    return createdLabels;\n  }\n  hasMutualPointer(from, to) {\n    const fromPointers = this.graph.get_pointers(from);\n    const toPointers = this.graph.get_pointers(to);\n    if (!fromPointers || !toPointers) return false;\n    return fromPointers.has(this.graph.get_node(to)) && toPointers.has(this.graph.get_node(from));\n  }\n  createCurvedLine(group, from, to,\n  // 'to' is the center of the target node\n  nodeRadius,\n  // Pass node radius\n  curvature = 0.3) {\n    // Midpoint between from and to (center)\n    const midX = (from.x + to.x) / 2;\n    const midY = (from.y + to.y) / 2;\n\n    // Offset for the curve (perpendicular to the line from -> to)\n    const dx_from_to = to.x - from.x;\n    const dy_from_to = to.y - from.y;\n    const norm_from_to = Math.sqrt(dx_from_to * dx_from_to + dy_from_to * dy_from_to);\n    const offsetX = -dy_from_to * curvature;\n    const offsetY = dx_from_to * curvature;\n    const controlX = midX + offsetX;\n    const controlY = midY + offsetY;\n\n    // Calculate the vector from the control point to the target node center\n    const dx_control_to = to.x - controlX;\n    const dy_control_to = to.y - controlY;\n    const distance_control_to = Math.sqrt(dx_control_to * dx_control_to + dy_control_to * dy_control_to);\n\n    // Calculate the point on the circumference of the target node\n    // Move back from the target node center by the node radius along the vector from control point\n    const adjustedEndX = to.x - dx_control_to / distance_control_to * nodeRadius;\n    const adjustedEndY = to.y - dy_control_to / distance_control_to * nodeRadius;\n\n    // Path data using the adjusted end point\n    const pathData = `M ${from.x} ${from.y} Q ${controlX} ${controlY}, ${adjustedEndX} ${adjustedEndY}`;\n    const uniqueId = `curved-path-${pathIdCounter++}`;\n    return group.append(\"path\").attr(\"id\", uniqueId).attr(\"d\", pathData).attr(\"fill\", \"none\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"marker-end\", \"url(#arrow)\");\n  }\n  createLine(svgGroup, start, end,\n  // 'end' is the center of the target node\n  nodeRadius,\n  // Pass node radius\n  strokeColor = \"black\", strokeWidth = 2, opacity = 1) {\n    // Calculate vector from start to end (center of target node)\n    const dx = end.x - start.x;\n    const dy = end.y - start.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n\n    // Calculate the point on the circumference of the target node\n    // Move back from the end point by the node radius\n    const adjustedEndX = end.x - dx / distance * nodeRadius;\n    const adjustedEndY = end.y - dy / distance * nodeRadius;\n    return svgGroup.append(\"line\").attr(\"x1\", start.x).attr(\"y1\", start.y).attr(\"x2\", adjustedEndX) // Use adjusted end point\n    .attr(\"y2\", adjustedEndY) // Use adjusted end point\n    .attr(\"stroke\", strokeColor).attr(\"stroke-width\", strokeWidth).style(\"opacity\", opacity).attr(\"marker-end\", \"url(#arrow)\");\n  }\n  createLabel(nodesGroup, position, txt) {\n    return nodesGroup.append(\"text\").attr(\"x\", position.x).attr(\"y\", position.y).attr(\"class\", \"label\").attr(\"text-anchor\", \"middle\").attr(\"alignment-baseline\", \"middle\").style(\"fill\", \"black\").style(\"font-size\", \"20px\").text(txt);\n  }\n  createNode(nodesGroup, cx, cy, r = 20, className = \"node\", initialOpacity = 0, isFinalNode = false) {\n    // Create the main node circle\n    const mainCircle = nodesGroup.append(\"circle\").attr(\"cx\", cx).attr(\"cy\", cy).attr(\"r\", r).attr(\"class\", className).style(\"opacity\", initialOpacity);\n    let outerRing = undefined;\n\n    // If it's a final node, add a second circle with a larger radius\n    if (isFinalNode) {\n      const outerRadius = r + 5;\n      outerRing = nodesGroup.append(\"circle\").attr(\"cx\", cx).attr(\"cy\", cy).attr(\"r\", outerRadius).attr(\"class\", className + \" final-node-ring\").style(\"fill\", \"none\").style(\"stroke\", \"black\").style(\"stroke-width\", 2).style(\"opacity\", initialOpacity);\n    }\n\n    // Return an object containing both selections\n    return {\n      mainCircle,\n      outerRing\n    };\n  }\n  applyNodeTransition(mainCircle, outerRing,\n  // Accept the optional outer ring\n  position, duration = 1000) {\n    return new Promise(resolve => {\n      const mainCircleTransition = mainCircle.transition().duration(duration).attr(\"cx\", position.x).attr(\"cy\", position.y).style(\"opacity\", 1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"fill\", \"white\");\n\n      // If an outer ring exists, apply the same transition to it\n      if (outerRing) {\n        outerRing.transition().duration(duration).attr(\"cx\", position.x).attr(\"cy\", position.y).style(\"opacity\", 1);\n      }\n      mainCircleTransition.on(\"end\", () => resolve());\n    });\n  }\n  applyLabelTransition(label, position, duration = 1000) {\n    return new Promise(resolve => {\n      label.transition().duration(duration).style(\"opacity\", 1).attr(\"x\", position.x).attr(\"y\", position.y).on(\"end\", () => resolve());\n    });\n  }\n\n  // Gets the position in a shaped form\n  getPosition(index, numberOfNodes, centerX, centerY, radius = 150) {\n    const angle = 2 * Math.PI * index / numberOfNodes;\n\n    // Calculate x and y coordinates using polar to Cartesian conversion\n    const x = radius * Math.cos(angle);\n    const y = radius * Math.sin(angle);\n    return {\n      x: x + centerX,\n      y: y + centerY\n    };\n  }\n}","map":{"version":3,"names":["pathIdCounter","FAAddAllInstruction","constructor","graph","nodeRadius","process","svg","nodeTransitions","labelTransitions","linesGroup","append","attr","layoutCenterX","layoutCenterY","nodesGroup","indexNodes","Map","index","total","get_nodes","size","forEach","node","value","pos","getPosition","is_starting_node","is_final_node","nodeSelections","createNode","x","y","label","createLabel","node_transition","applyNodeTransition","mainCircle","outerRing","label_transition","applyLabelTransition","set","push","startNodePos","vx","vy","magnitude","Math","sqrt","unitVx","unitVy","arrowLength","arrowStartX","arrowStartY","arrowEndX","arrowEndY","createLine","pointers","get_pointers","entry","get","currentNode","current_node_pos","weights","pointer","targetEntry","get_value","targetIndex","_","target_node_pos","nodeAngle","atan2","loopRadius","angleOffset","PI","startAngleRad","endAngleRad","startX","cos","startY","sin","endX","endY","controlPointDistance","controlX","controlY","pathData","selfLoopPath","createLineLabel","hasMutualPointer","curvedPath","createCurvedLine","straightLine","Promise","all","group","lineOrPath","txts","isLine","SVGLineElement","createdLabels","txt","text","style","line","x1","parseFloat","y1","x2","y2","midX","midY","dx","dy","lineLength","offsetX","offsetY","labelSpacing","totalOffset","length","path","pathId","startOffsetValue","startsWith","from","to","fromPointers","toPointers","has","get_node","curvature","dx_from_to","dy_from_to","norm_from_to","dx_control_to","dy_control_to","distance_control_to","adjustedEndX","adjustedEndY","uniqueId","svgGroup","start","end","strokeColor","strokeWidth","opacity","distance","position","cx","cy","r","className","initialOpacity","isFinalNode","undefined","outerRadius","duration","resolve","mainCircleTransition","transition","on","numberOfNodes","centerX","centerY","radius","angle"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/fa_add_all_instruction.tsx"],"sourcesContent":["import {Instruction} from \"./i_instruction\";\r\nimport {BaseType, Selection} from \"d3\";\r\nimport {FA_Graph} from \"../structures/fa_graph\";\r\nimport {FA_Node} from \"../structures/fa_node\";\r\n\r\n// Counter to generate unique IDs for curved paths\r\nlet pathIdCounter = 0;\r\n\r\nexport class FAAddAllInstruction implements Instruction {\r\n\r\n    private graph: FA_Graph;\r\n    private nodeRadius: number = 20; // Define a consistent node radius\r\n\r\n    constructor(graph: FA_Graph) {\r\n        this.graph = graph;\r\n    }\r\n\r\n    async process(svg: Selection<BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n        const nodeTransitions: Promise<void>[] = [];\r\n        const labelTransitions: Promise<void>[] = [];\r\n        const linesGroup = svg.append(\"g\").attr(\"id\", \"lines\") as unknown as d3.Selection<SVGGElement, unknown, null, undefined>;\r\n\r\n        const layoutCenterX = 350;\r\n        const layoutCenterY = 200;\r\n\r\n        const nodesGroup = (svg.append(\"g\") as unknown) as Selection<SVGGElement, unknown, null, undefined>;\r\n\r\n        let indexNodes: Map<string | number, [number, d3.Selection<SVGCircleElement, unknown, null, undefined>]> = new Map();\r\n        let index = 0;\r\n        const total = this.graph.get_nodes().size;\r\n\r\n        // Draw all nodes\r\n        this.graph.get_nodes().forEach((node, value) => {\r\n            const pos = this.getPosition(index, total, layoutCenterX, layoutCenterY);\r\n            const is_starting_node = this.graph.is_starting_node(value);\r\n            const is_final_node = this.graph.is_final_node(value); // Get the final node status\r\n\r\n            // Create the node(s) and get the selections\r\n            const nodeSelections = this.createNode(nodesGroup, pos.x, pos.y, this.nodeRadius, \"node\", 0, is_final_node);\r\n\r\n            const label = this.createLabel(nodesGroup, pos, value as string)\r\n\r\n            // Apply transition to both the main circle and the outer ring\r\n            const node_transition = this.applyNodeTransition(nodeSelections.mainCircle, nodeSelections.outerRing, pos);\r\n            const label_transition = this.applyLabelTransition(label, pos);\r\n\r\n            indexNodes.set(value, [index++, nodeSelections.mainCircle]);\r\n            nodeTransitions.push(node_transition);\r\n            labelTransitions.push(label_transition);\r\n\r\n            // If node is a starting state, add a line to it pointing away from the center\r\n            if (is_starting_node) {\r\n                const startNodePos = pos;\r\n\r\n                // Calculate vector from layout center to starting node\r\n                const vx = startNodePos.x - layoutCenterX;\r\n                const vy = startNodePos.y - layoutCenterY;\r\n\r\n                // Normalize the vector\r\n                const magnitude = Math.sqrt(vx * vx + vy * vy);\r\n                const unitVx = magnitude === 0 ? 0 : vx / magnitude;\r\n                const unitVy = magnitude === 0 ? 0 : vy / magnitude;\r\n\r\n                const arrowLength = 50;\r\n\r\n                // Calculate the start point of the arrow\r\n                const arrowStartX = startNodePos.x + unitVx * arrowLength;\r\n                const arrowStartY = startNodePos.y + unitVy * arrowLength;\r\n\r\n                // The end point of the arrow is the starting node position (center)\r\n                const arrowEndX = startNodePos.x;\r\n                const arrowEndY = startNodePos.y;\r\n\r\n                // Create the starting arrow line, adjusted to end on the node's circumference\r\n                this.createLine(linesGroup, {x: arrowStartX, y: arrowStartY}, {x: arrowEndX, y: arrowEndY}, this.nodeRadius);\r\n            }\r\n        });\r\n\r\n        // Draw connectors\r\n        this.graph.get_nodes().forEach((node, value) => {\r\n\r\n            let pointers = this.graph.get_pointers(value);\r\n\r\n            if (pointers != null && pointers.size > 0) {\r\n\r\n                const entry = indexNodes.get(value);\r\n                if (!entry) return; // safety check\r\n\r\n                const [index, currentNode] = entry;\r\n                const current_node_pos = this.getPosition(index, total, layoutCenterX, layoutCenterY);\r\n\r\n                pointers.forEach((weights, pointer) => {\r\n                    const targetEntry = indexNodes.get(pointer.get_value());\r\n                    if (!targetEntry) return;\r\n\r\n                    const [targetIndex, _] = targetEntry;\r\n                    const target_node_pos = this.getPosition(targetIndex, total, 350, 200);\r\n\r\n                    if (value == pointer.get_value()) {\r\n                        // Loop arrow back to self\r\n\r\n                        // Calculate angle of the node from the layout center\r\n                        const nodeAngle = Math.atan2(current_node_pos.y - layoutCenterY, current_node_pos.x - layoutCenterX);\r\n\r\n                        // Define loop parameters based on the node's angle\r\n                        const loopRadius = 25; // Radius of the loop itself\r\n                        const angleOffset = Math.PI / 6; // Offset angles from the radial direction (e.g., 30 degrees)\r\n\r\n                        const startAngleRad = nodeAngle - angleOffset;\r\n                        const endAngleRad = nodeAngle + angleOffset;\r\n\r\n                        // Calculate start and end points on the node's circumference\r\n                        const startX = current_node_pos.x + this.nodeRadius * Math.cos(startAngleRad);\r\n                        const startY = current_node_pos.y + this.nodeRadius * Math.sin(startAngleRad);\r\n                        const endX = current_node_pos.x + this.nodeRadius * Math.cos(endAngleRad);\r\n                        const endY = current_node_pos.y + this.nodeRadius * Math.sin(endAngleRad);\r\n\r\n                        // Calculate control point for the arc\r\n                        // Position the control point further out along the radial direction\r\n                        const controlPointDistance = this.nodeRadius + loopRadius * 1.5; // Distance from node center\r\n                        const controlX = current_node_pos.x + controlPointDistance * Math.cos(nodeAngle);\r\n                        const controlY = current_node_pos.y + controlPointDistance * Math.sin(nodeAngle);\r\n\r\n                        // SVG path data for a self-loop using a quadratic bezier curve (Q)\r\n                        const pathData = `M ${startX},${startY} Q ${controlX},${controlY} ${endX},${endY}`;\r\n\r\n\r\n                        const selfLoopPath = linesGroup.append(\"path\")\r\n                            .attr(\"d\", pathData)\r\n                            .attr(\"fill\", \"none\")\r\n                            .attr(\"stroke\", \"black\")\r\n                            .attr(\"stroke-width\", 2)\r\n                            .attr(\"marker-end\", \"url(#arrow)\"); // Add the arrow marker\r\n\r\n                        // Create label for the self-loop\r\n                        this.createLineLabel(linesGroup, selfLoopPath, weights as string[]);\r\n                    }\r\n                    else if (this.hasMutualPointer(value, pointer.get_value())){\r\n                        const curvedPath = this.createCurvedLine(linesGroup, current_node_pos, target_node_pos, this.nodeRadius, 0.12);\r\n                        this.createLineLabel(linesGroup, curvedPath, weights as string[]);\r\n                    }\r\n                    else\r\n                    {\r\n                        // Create straight line, adjusted to end on the target node's circumference\r\n                        const straightLine = this.createLine(linesGroup, current_node_pos, target_node_pos, this.nodeRadius);\r\n                        this.createLineLabel(linesGroup, straightLine as d3.Selection<SVGLineElement | SVGPathElement, unknown, null, undefined>, weights as string[]);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n\r\n        await Promise.all([...nodeTransitions, ...labelTransitions]);\r\n    }\r\n\r\n    // Creates a label for a line (edge) {Mostly generated through gpt and gemini -- edited by michael}\r\n    createLineLabel(\r\n        group: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n        lineOrPath: d3.Selection<SVGLineElement | SVGPathElement, unknown, null, undefined>,\r\n        txts: string[]\r\n    ): d3.Selection<SVGTextElement, unknown, null, undefined>[] {\r\n\r\n        const isLine = lineOrPath.node() instanceof SVGLineElement;\r\n        const createdLabels: d3.Selection<SVGTextElement, unknown, null, undefined>[] = [];\r\n\r\n        txts.forEach((txt, index) => {\r\n            // Append a text element for each weight\r\n            const text = group.append(\"text\")\r\n                .style(\"fill\", \"red\")\r\n                .style(\"font-size\", \"16px\")\r\n                .style(\"pointer-events\", \"none\");\r\n\r\n            if (isLine) {\r\n                const line = lineOrPath as d3.Selection<SVGLineElement, unknown, null, undefined>;\r\n                const x1 = parseFloat(line.attr(\"x1\"));\r\n                const y1 = parseFloat(line.attr(\"y1\"));\r\n                const x2 = parseFloat(line.attr(\"x2\"));\r\n                const y2 = parseFloat(line.attr(\"y2\"));\r\n\r\n                // Calculate midpoint\r\n                const midX = (x1 + x2) / 2;\r\n                const midY = (y1 + y2) / 2 - 10; // Slightly offset upwards\r\n\r\n                // Calculate perpendicular offset\r\n                const dx = x2 - x1;\r\n                const dy = y2 - y1;\r\n                const lineLength = Math.sqrt(dx * dx + dy * dy);\r\n                // Add a small check for zero length to avoid division by zero\r\n                const offsetX = lineLength === 0 ? 0 : (-dy / lineLength);\r\n                const offsetY = lineLength === 0 ? 0 : (-dx / lineLength);\r\n\r\n                // Adjust position based on the index for multiple labels\r\n                const labelSpacing = 15; // Adjust this value for desired spacing\r\n                const totalOffset = (index - (txts.length - 1) / 2) * labelSpacing; // Center the labels around the midpoint\r\n\r\n                text.attr(\"x\", midX + offsetX * totalOffset)\r\n                    .attr(\"y\", midY + offsetY * totalOffset)\r\n                    .attr(\"text-anchor\", \"middle\")\r\n                    .attr(\"alignment-baseline\", \"middle\")\r\n                    .text(txt);\r\n\r\n            } else {\r\n                const path = lineOrPath as d3.Selection<SVGPathElement, unknown, null, undefined>;\r\n                const pathId = path.attr(\"id\");\r\n\r\n                // Adjust startOffset for each label along the curve or self-loop\r\n                // For self-loops, 50% places it at the peak. For curved lines, adjust as needed.\r\n                let startOffsetValue = '50%'; // Default for self-loops\r\n\r\n                if (pathId.startsWith('curved-path-')) {\r\n                    // Adjust offset for multiple labels on curved path\r\n                    startOffsetValue = `${(50 - (txts.length - 1) * 5) + (index * 10)}%`;\r\n                } else {\r\n                    // Adjust offset for multiple labels on self-loop\r\n                    startOffsetValue = `${50 + (index - (txts.length - 1) / 2) * 5}%`;\r\n                }\r\n\r\n\r\n                text.append(\"textPath\")\r\n                    .attr(\"xlink:href\", `#${pathId}`)\r\n                    .attr(\"startOffset\", startOffsetValue)\r\n                    .attr(\"text-anchor\", \"middle\")\r\n                    .text(txt);\r\n            }\r\n            createdLabels.push(text);\r\n        });\r\n\r\n        return createdLabels;\r\n    }\r\n\r\n    hasMutualPointer(from: string | number, to: string | number): boolean {\r\n        const fromPointers = this.graph.get_pointers(from);\r\n        const toPointers = this.graph.get_pointers(to);\r\n\r\n        if (!fromPointers || !toPointers) return false;\r\n\r\n        return fromPointers.has(this.graph.get_node(to) as FA_Node) && toPointers.has(this.graph.get_node(from) as FA_Node);\r\n    }\r\n\r\n\r\n    createCurvedLine(\r\n        group: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n        from: { x: number, y: number },\r\n        to: { x: number, y: number }, // 'to' is the center of the target node\r\n        nodeRadius: number, // Pass node radius\r\n        curvature: number = 0.3\r\n    ): d3.Selection<SVGPathElement, unknown, null, undefined> {\r\n\r\n        // Midpoint between from and to (center)\r\n        const midX = (from.x + to.x) / 2;\r\n        const midY = (from.y + to.y) / 2;\r\n\r\n        // Offset for the curve (perpendicular to the line from -> to)\r\n        const dx_from_to = to.x - from.x;\r\n        const dy_from_to = to.y - from.y;\r\n        const norm_from_to = Math.sqrt(dx_from_to * dx_from_to + dy_from_to * dy_from_to);\r\n        const offsetX = -dy_from_to * curvature;\r\n        const offsetY = dx_from_to * curvature;\r\n\r\n        const controlX = midX + offsetX;\r\n        const controlY = midY + offsetY;\r\n\r\n        // Calculate the vector from the control point to the target node center\r\n        const dx_control_to = to.x - controlX;\r\n        const dy_control_to = to.y - controlY;\r\n        const distance_control_to = Math.sqrt(dx_control_to * dx_control_to + dy_control_to * dy_control_to);\r\n\r\n        // Calculate the point on the circumference of the target node\r\n        // Move back from the target node center by the node radius along the vector from control point\r\n        const adjustedEndX = to.x - (dx_control_to / distance_control_to) * nodeRadius;\r\n        const adjustedEndY = to.y - (dy_control_to / distance_control_to) * nodeRadius;\r\n\r\n\r\n        // Path data using the adjusted end point\r\n        const pathData = `M ${from.x} ${from.y} Q ${controlX} ${controlY}, ${adjustedEndX} ${adjustedEndY}`;\r\n\r\n        const uniqueId = `curved-path-${pathIdCounter++}`;\r\n\r\n        return group.append(\"path\")\r\n            .attr(\"id\", uniqueId)\r\n            .attr(\"d\", pathData)\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke\", \"black\")\r\n            .attr(\"stroke-width\", 2)\r\n            .attr(\"marker-end\", \"url(#arrow)\");\r\n    }\r\n\r\n    createLine(\r\n        svgGroup: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n        start: { x: number; y: number },\r\n        end: { x: number; y: number }, // 'end' is the center of the target node\r\n        nodeRadius: number, // Pass node radius\r\n        strokeColor: string = \"black\",\r\n        strokeWidth: number = 2,\r\n        opacity: number = 1\r\n    ): d3.Selection<SVGLineElement, unknown, null, undefined> {\r\n\r\n        // Calculate vector from start to end (center of target node)\r\n        const dx = end.x - start.x;\r\n        const dy = end.y - start.y;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n        // Calculate the point on the circumference of the target node\r\n        // Move back from the end point by the node radius\r\n        const adjustedEndX = end.x - (dx / distance) * nodeRadius;\r\n        const adjustedEndY = end.y - (dy / distance) * nodeRadius;\r\n\r\n        return svgGroup.append(\"line\")\r\n            .attr(\"x1\", start.x)\r\n            .attr(\"y1\", start.y)\r\n            .attr(\"x2\", adjustedEndX) // Use adjusted end point\r\n            .attr(\"y2\", adjustedEndY) // Use adjusted end point\r\n            .attr(\"stroke\", strokeColor)\r\n            .attr(\"stroke-width\", strokeWidth)\r\n            .style(\"opacity\", opacity)\r\n            .attr(\"marker-end\", \"url(#arrow)\");\r\n    }\r\n\r\n\r\n    createLabel(nodesGroup: d3.Selection<SVGGElement, unknown, null, undefined>, position: { x: number, y: number }, txt: string): d3.Selection<SVGTextElement, unknown, null, undefined> {\r\n        return nodesGroup.append(\"text\")\r\n            .attr(\"x\", position.x)\r\n            .attr(\"y\", position.y)\r\n            .attr(\"class\", \"label\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .attr(\"alignment-baseline\", \"middle\")\r\n            .style(\"fill\", \"black\")\r\n            .style(\"font-size\", \"20px\")\r\n            .text(txt);\r\n    }\r\n\r\n\r\n    createNode(\r\n        nodesGroup: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n        cx: number,\r\n        cy: number,\r\n        r: number = 20,\r\n        className: string = \"node\",\r\n        initialOpacity: number = 0,\r\n        isFinalNode: boolean = false\r\n    ): { mainCircle: d3.Selection<SVGCircleElement, unknown, null, undefined>, outerRing?: d3.Selection<SVGCircleElement, unknown, null, undefined> } {\r\n\r\n        // Create the main node circle\r\n        const mainCircle = nodesGroup.append(\"circle\")\r\n            .attr(\"cx\", cx)\r\n            .attr(\"cy\", cy)\r\n            .attr(\"r\", r)\r\n            .attr(\"class\", className)\r\n            .style(\"opacity\", initialOpacity);\r\n\r\n        let outerRing: d3.Selection<SVGCircleElement, unknown, null, undefined> | undefined = undefined;\r\n\r\n        // If it's a final node, add a second circle with a larger radius\r\n        if (isFinalNode) {\r\n            const outerRadius = r + 5;\r\n            outerRing = nodesGroup.append(\"circle\")\r\n                .attr(\"cx\", cx)\r\n                .attr(\"cy\", cy)\r\n                .attr(\"r\", outerRadius)\r\n                .attr(\"class\", className + \" final-node-ring\")\r\n                .style(\"fill\", \"none\")\r\n                .style(\"stroke\", \"black\")\r\n                .style(\"stroke-width\", 2)\r\n                .style(\"opacity\", initialOpacity);\r\n        }\r\n\r\n        // Return an object containing both selections\r\n        return { mainCircle, outerRing };\r\n    }\r\n\r\n    applyNodeTransition(\r\n        mainCircle: d3.Selection<SVGCircleElement, unknown, null, undefined>,\r\n        outerRing: d3.Selection<SVGCircleElement, unknown, null, undefined> | undefined, // Accept the optional outer ring\r\n        position: { x: number; y: number },\r\n        duration: number = 1000\r\n    ): Promise<void> {\r\n        return new Promise((resolve) => {\r\n\r\n            const mainCircleTransition = mainCircle.transition()\r\n                .duration(duration)\r\n                .attr(\"cx\", position.x)\r\n                .attr(\"cy\", position.y)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"stroke\", \"black\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"white\");\r\n\r\n            // If an outer ring exists, apply the same transition to it\r\n            if (outerRing) {\r\n                outerRing.transition()\r\n                    .duration(duration)\r\n                    .attr(\"cx\", position.x)\r\n                    .attr(\"cy\", position.y)\r\n                    .style(\"opacity\", 1);\r\n            }\r\n\r\n            mainCircleTransition.on(\"end\", () => resolve());\r\n        });\r\n    }\r\n\r\n    applyLabelTransition(\r\n        label: d3.Selection<SVGTextElement, unknown, null, undefined>,\r\n        position: { x: number; y: number },\r\n        duration: number = 1000\r\n    ): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            label.transition()\r\n                .duration(duration)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"x\", position.x)\r\n                .attr(\"y\", position.y)\r\n                .on(\"end\", () => resolve());\r\n        });\r\n    }\r\n\r\n\r\n    // Gets the position in a shaped form\r\n    getPosition(index: number, numberOfNodes: number, centerX: number, centerY: number, radius: number = 150) {\r\n        const angle = (2 * Math.PI * index) / numberOfNodes;\r\n\r\n        // Calculate x and y coordinates using polar to Cartesian conversion\r\n        const x = radius * Math.cos(angle);\r\n        const y = radius * Math.sin(angle);\r\n\r\n        return { x: x + centerX, y: y + centerY };\r\n    }\r\n\r\n}\r\n"],"mappings":"AAKA;AACA,IAAIA,aAAa,GAAG,CAAC;AAErB,OAAO,MAAMC,mBAAmB,CAAwB;EAGnB;;EAEjCC,WAAWA,CAACC,KAAe,EAAE;IAAA,KAHrBA,KAAK;IAAA,KACLC,UAAU,GAAW,EAAE;IAG3B,IAAI,CAACD,KAAK,GAAGA,KAAK;EACtB;EAEA,MAAME,OAAOA,CAACC,GAAmD,EAAiB;IAC9E,MAAMC,eAAgC,GAAG,EAAE;IAC3C,MAAMC,gBAAiC,GAAG,EAAE;IAC5C,MAAMC,UAAU,GAAGH,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAmE;IAExH,MAAMC,aAAa,GAAG,GAAG;IACzB,MAAMC,aAAa,GAAG,GAAG;IAEzB,MAAMC,UAAU,GAAIR,GAAG,CAACI,MAAM,CAAC,GAAG,CAAiE;IAEnG,IAAIK,UAAoG,GAAG,IAAIC,GAAG,CAAC,CAAC;IACpH,IAAIC,KAAK,GAAG,CAAC;IACb,MAAMC,KAAK,GAAG,IAAI,CAACf,KAAK,CAACgB,SAAS,CAAC,CAAC,CAACC,IAAI;;IAEzC;IACA,IAAI,CAACjB,KAAK,CAACgB,SAAS,CAAC,CAAC,CAACE,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAC5C,MAAMC,GAAG,GAAG,IAAI,CAACC,WAAW,CAACR,KAAK,EAAEC,KAAK,EAAEN,aAAa,EAAEC,aAAa,CAAC;MACxE,MAAMa,gBAAgB,GAAG,IAAI,CAACvB,KAAK,CAACuB,gBAAgB,CAACH,KAAK,CAAC;MAC3D,MAAMI,aAAa,GAAG,IAAI,CAACxB,KAAK,CAACwB,aAAa,CAACJ,KAAK,CAAC,CAAC,CAAC;;MAEvD;MACA,MAAMK,cAAc,GAAG,IAAI,CAACC,UAAU,CAACf,UAAU,EAAEU,GAAG,CAACM,CAAC,EAAEN,GAAG,CAACO,CAAC,EAAE,IAAI,CAAC3B,UAAU,EAAE,MAAM,EAAE,CAAC,EAAEuB,aAAa,CAAC;MAE3G,MAAMK,KAAK,GAAG,IAAI,CAACC,WAAW,CAACnB,UAAU,EAAEU,GAAG,EAAED,KAAe,CAAC;;MAEhE;MACA,MAAMW,eAAe,GAAG,IAAI,CAACC,mBAAmB,CAACP,cAAc,CAACQ,UAAU,EAAER,cAAc,CAACS,SAAS,EAAEb,GAAG,CAAC;MAC1G,MAAMc,gBAAgB,GAAG,IAAI,CAACC,oBAAoB,CAACP,KAAK,EAAER,GAAG,CAAC;MAE9DT,UAAU,CAACyB,GAAG,CAACjB,KAAK,EAAE,CAACN,KAAK,EAAE,EAAEW,cAAc,CAACQ,UAAU,CAAC,CAAC;MAC3D7B,eAAe,CAACkC,IAAI,CAACP,eAAe,CAAC;MACrC1B,gBAAgB,CAACiC,IAAI,CAACH,gBAAgB,CAAC;;MAEvC;MACA,IAAIZ,gBAAgB,EAAE;QAClB,MAAMgB,YAAY,GAAGlB,GAAG;;QAExB;QACA,MAAMmB,EAAE,GAAGD,YAAY,CAACZ,CAAC,GAAGlB,aAAa;QACzC,MAAMgC,EAAE,GAAGF,YAAY,CAACX,CAAC,GAAGlB,aAAa;;QAEzC;QACA,MAAMgC,SAAS,GAAGC,IAAI,CAACC,IAAI,CAACJ,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;QAC9C,MAAMI,MAAM,GAAGH,SAAS,KAAK,CAAC,GAAG,CAAC,GAAGF,EAAE,GAAGE,SAAS;QACnD,MAAMI,MAAM,GAAGJ,SAAS,KAAK,CAAC,GAAG,CAAC,GAAGD,EAAE,GAAGC,SAAS;QAEnD,MAAMK,WAAW,GAAG,EAAE;;QAEtB;QACA,MAAMC,WAAW,GAAGT,YAAY,CAACZ,CAAC,GAAGkB,MAAM,GAAGE,WAAW;QACzD,MAAME,WAAW,GAAGV,YAAY,CAACX,CAAC,GAAGkB,MAAM,GAAGC,WAAW;;QAEzD;QACA,MAAMG,SAAS,GAAGX,YAAY,CAACZ,CAAC;QAChC,MAAMwB,SAAS,GAAGZ,YAAY,CAACX,CAAC;;QAEhC;QACA,IAAI,CAACwB,UAAU,CAAC9C,UAAU,EAAE;UAACqB,CAAC,EAAEqB,WAAW;UAAEpB,CAAC,EAAEqB;QAAW,CAAC,EAAE;UAACtB,CAAC,EAAEuB,SAAS;UAAEtB,CAAC,EAAEuB;QAAS,CAAC,EAAE,IAAI,CAAClD,UAAU,CAAC;MAChH;IACJ,CAAC,CAAC;;IAEF;IACA,IAAI,CAACD,KAAK,CAACgB,SAAS,CAAC,CAAC,CAACE,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAE5C,IAAIiC,QAAQ,GAAG,IAAI,CAACrD,KAAK,CAACsD,YAAY,CAAClC,KAAK,CAAC;MAE7C,IAAIiC,QAAQ,IAAI,IAAI,IAAIA,QAAQ,CAACpC,IAAI,GAAG,CAAC,EAAE;QAEvC,MAAMsC,KAAK,GAAG3C,UAAU,CAAC4C,GAAG,CAACpC,KAAK,CAAC;QACnC,IAAI,CAACmC,KAAK,EAAE,OAAO,CAAC;;QAEpB,MAAM,CAACzC,KAAK,EAAE2C,WAAW,CAAC,GAAGF,KAAK;QAClC,MAAMG,gBAAgB,GAAG,IAAI,CAACpC,WAAW,CAACR,KAAK,EAAEC,KAAK,EAAEN,aAAa,EAAEC,aAAa,CAAC;QAErF2C,QAAQ,CAACnC,OAAO,CAAC,CAACyC,OAAO,EAAEC,OAAO,KAAK;UACnC,MAAMC,WAAW,GAAGjD,UAAU,CAAC4C,GAAG,CAACI,OAAO,CAACE,SAAS,CAAC,CAAC,CAAC;UACvD,IAAI,CAACD,WAAW,EAAE;UAElB,MAAM,CAACE,WAAW,EAAEC,CAAC,CAAC,GAAGH,WAAW;UACpC,MAAMI,eAAe,GAAG,IAAI,CAAC3C,WAAW,CAACyC,WAAW,EAAEhD,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC;UAEtE,IAAIK,KAAK,IAAIwC,OAAO,CAACE,SAAS,CAAC,CAAC,EAAE;YAC9B;;YAEA;YACA,MAAMI,SAAS,GAAGvB,IAAI,CAACwB,KAAK,CAACT,gBAAgB,CAAC9B,CAAC,GAAGlB,aAAa,EAAEgD,gBAAgB,CAAC/B,CAAC,GAAGlB,aAAa,CAAC;;YAEpG;YACA,MAAM2D,UAAU,GAAG,EAAE,CAAC,CAAC;YACvB,MAAMC,WAAW,GAAG1B,IAAI,CAAC2B,EAAE,GAAG,CAAC,CAAC,CAAC;;YAEjC,MAAMC,aAAa,GAAGL,SAAS,GAAGG,WAAW;YAC7C,MAAMG,WAAW,GAAGN,SAAS,GAAGG,WAAW;;YAE3C;YACA,MAAMI,MAAM,GAAGf,gBAAgB,CAAC/B,CAAC,GAAG,IAAI,CAAC1B,UAAU,GAAG0C,IAAI,CAAC+B,GAAG,CAACH,aAAa,CAAC;YAC7E,MAAMI,MAAM,GAAGjB,gBAAgB,CAAC9B,CAAC,GAAG,IAAI,CAAC3B,UAAU,GAAG0C,IAAI,CAACiC,GAAG,CAACL,aAAa,CAAC;YAC7E,MAAMM,IAAI,GAAGnB,gBAAgB,CAAC/B,CAAC,GAAG,IAAI,CAAC1B,UAAU,GAAG0C,IAAI,CAAC+B,GAAG,CAACF,WAAW,CAAC;YACzE,MAAMM,IAAI,GAAGpB,gBAAgB,CAAC9B,CAAC,GAAG,IAAI,CAAC3B,UAAU,GAAG0C,IAAI,CAACiC,GAAG,CAACJ,WAAW,CAAC;;YAEzE;YACA;YACA,MAAMO,oBAAoB,GAAG,IAAI,CAAC9E,UAAU,GAAGmE,UAAU,GAAG,GAAG,CAAC,CAAC;YACjE,MAAMY,QAAQ,GAAGtB,gBAAgB,CAAC/B,CAAC,GAAGoD,oBAAoB,GAAGpC,IAAI,CAAC+B,GAAG,CAACR,SAAS,CAAC;YAChF,MAAMe,QAAQ,GAAGvB,gBAAgB,CAAC9B,CAAC,GAAGmD,oBAAoB,GAAGpC,IAAI,CAACiC,GAAG,CAACV,SAAS,CAAC;;YAEhF;YACA,MAAMgB,QAAQ,GAAG,KAAKT,MAAM,IAAIE,MAAM,MAAMK,QAAQ,IAAIC,QAAQ,IAAIJ,IAAI,IAAIC,IAAI,EAAE;YAGlF,MAAMK,YAAY,GAAG7E,UAAU,CAACC,MAAM,CAAC,MAAM,CAAC,CACzCC,IAAI,CAAC,GAAG,EAAE0E,QAAQ,CAAC,CACnB1E,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CACpBA,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBA,IAAI,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,CAAC;;YAExC;YACA,IAAI,CAAC4E,eAAe,CAAC9E,UAAU,EAAE6E,YAAY,EAAExB,OAAmB,CAAC;UACvE,CAAC,MACI,IAAI,IAAI,CAAC0B,gBAAgB,CAACjE,KAAK,EAAEwC,OAAO,CAACE,SAAS,CAAC,CAAC,CAAC,EAAC;YACvD,MAAMwB,UAAU,GAAG,IAAI,CAACC,gBAAgB,CAACjF,UAAU,EAAEoD,gBAAgB,EAAEO,eAAe,EAAE,IAAI,CAAChE,UAAU,EAAE,IAAI,CAAC;YAC9G,IAAI,CAACmF,eAAe,CAAC9E,UAAU,EAAEgF,UAAU,EAAE3B,OAAmB,CAAC;UACrE,CAAC,MAED;YACI;YACA,MAAM6B,YAAY,GAAG,IAAI,CAACpC,UAAU,CAAC9C,UAAU,EAAEoD,gBAAgB,EAAEO,eAAe,EAAE,IAAI,CAAChE,UAAU,CAAC;YACpG,IAAI,CAACmF,eAAe,CAAC9E,UAAU,EAAEkF,YAAY,EAA6E7B,OAAmB,CAAC;UAClJ;QACJ,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;IAGF,MAAM8B,OAAO,CAACC,GAAG,CAAC,CAAC,GAAGtF,eAAe,EAAE,GAAGC,gBAAgB,CAAC,CAAC;EAChE;;EAEA;EACA+E,eAAeA,CACXO,KAA0D,EAC1DC,UAAmF,EACnFC,IAAc,EAC0C;IAExD,MAAMC,MAAM,GAAGF,UAAU,CAACzE,IAAI,CAAC,CAAC,YAAY4E,cAAc;IAC1D,MAAMC,aAAuE,GAAG,EAAE;IAElFH,IAAI,CAAC3E,OAAO,CAAC,CAAC+E,GAAG,EAAEnF,KAAK,KAAK;MACzB;MACA,MAAMoF,IAAI,GAAGP,KAAK,CAACpF,MAAM,CAAC,MAAM,CAAC,CAC5B4F,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CACpBA,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAC1BA,KAAK,CAAC,gBAAgB,EAAE,MAAM,CAAC;MAEpC,IAAIL,MAAM,EAAE;QACR,MAAMM,IAAI,GAAGR,UAAoE;QACjF,MAAMS,EAAE,GAAGC,UAAU,CAACF,IAAI,CAAC5F,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,MAAM+F,EAAE,GAAGD,UAAU,CAACF,IAAI,CAAC5F,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,MAAMgG,EAAE,GAAGF,UAAU,CAACF,IAAI,CAAC5F,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,MAAMiG,EAAE,GAAGH,UAAU,CAACF,IAAI,CAAC5F,IAAI,CAAC,IAAI,CAAC,CAAC;;QAEtC;QACA,MAAMkG,IAAI,GAAG,CAACL,EAAE,GAAGG,EAAE,IAAI,CAAC;QAC1B,MAAMG,IAAI,GAAG,CAACJ,EAAE,GAAGE,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;;QAEjC;QACA,MAAMG,EAAE,GAAGJ,EAAE,GAAGH,EAAE;QAClB,MAAMQ,EAAE,GAAGJ,EAAE,GAAGF,EAAE;QAClB,MAAMO,UAAU,GAAGnE,IAAI,CAACC,IAAI,CAACgE,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;QAC/C;QACA,MAAME,OAAO,GAAGD,UAAU,KAAK,CAAC,GAAG,CAAC,GAAI,CAACD,EAAE,GAAGC,UAAW;QACzD,MAAME,OAAO,GAAGF,UAAU,KAAK,CAAC,GAAG,CAAC,GAAI,CAACF,EAAE,GAAGE,UAAW;;QAEzD;QACA,MAAMG,YAAY,GAAG,EAAE,CAAC,CAAC;QACzB,MAAMC,WAAW,GAAG,CAACpG,KAAK,GAAG,CAAC+E,IAAI,CAACsB,MAAM,GAAG,CAAC,IAAI,CAAC,IAAIF,YAAY,CAAC,CAAC;;QAEpEf,IAAI,CAAC1F,IAAI,CAAC,GAAG,EAAEkG,IAAI,GAAGK,OAAO,GAAGG,WAAW,CAAC,CACvC1G,IAAI,CAAC,GAAG,EAAEmG,IAAI,GAAGK,OAAO,GAAGE,WAAW,CAAC,CACvC1G,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BA,IAAI,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CACpC0F,IAAI,CAACD,GAAG,CAAC;MAElB,CAAC,MAAM;QACH,MAAMmB,IAAI,GAAGxB,UAAoE;QACjF,MAAMyB,MAAM,GAAGD,IAAI,CAAC5G,IAAI,CAAC,IAAI,CAAC;;QAE9B;QACA;QACA,IAAI8G,gBAAgB,GAAG,KAAK,CAAC,CAAC;;QAE9B,IAAID,MAAM,CAACE,UAAU,CAAC,cAAc,CAAC,EAAE;UACnC;UACAD,gBAAgB,GAAG,GAAI,EAAE,GAAG,CAACzB,IAAI,CAACsB,MAAM,GAAG,CAAC,IAAI,CAAC,GAAKrG,KAAK,GAAG,EAAG,GAAG;QACxE,CAAC,MAAM;UACH;UACAwG,gBAAgB,GAAG,GAAG,EAAE,GAAG,CAACxG,KAAK,GAAG,CAAC+E,IAAI,CAACsB,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG;QACrE;QAGAjB,IAAI,CAAC3F,MAAM,CAAC,UAAU,CAAC,CAClBC,IAAI,CAAC,YAAY,EAAE,IAAI6G,MAAM,EAAE,CAAC,CAChC7G,IAAI,CAAC,aAAa,EAAE8G,gBAAgB,CAAC,CACrC9G,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7B0F,IAAI,CAACD,GAAG,CAAC;MAClB;MACAD,aAAa,CAAC1D,IAAI,CAAC4D,IAAI,CAAC;IAC5B,CAAC,CAAC;IAEF,OAAOF,aAAa;EACxB;EAEAX,gBAAgBA,CAACmC,IAAqB,EAAEC,EAAmB,EAAW;IAClE,MAAMC,YAAY,GAAG,IAAI,CAAC1H,KAAK,CAACsD,YAAY,CAACkE,IAAI,CAAC;IAClD,MAAMG,UAAU,GAAG,IAAI,CAAC3H,KAAK,CAACsD,YAAY,CAACmE,EAAE,CAAC;IAE9C,IAAI,CAACC,YAAY,IAAI,CAACC,UAAU,EAAE,OAAO,KAAK;IAE9C,OAAOD,YAAY,CAACE,GAAG,CAAC,IAAI,CAAC5H,KAAK,CAAC6H,QAAQ,CAACJ,EAAE,CAAY,CAAC,IAAIE,UAAU,CAACC,GAAG,CAAC,IAAI,CAAC5H,KAAK,CAAC6H,QAAQ,CAACL,IAAI,CAAY,CAAC;EACvH;EAGAjC,gBAAgBA,CACZI,KAA0D,EAC1D6B,IAA8B,EAC9BC,EAA4B;EAAE;EAC9BxH,UAAkB;EAAE;EACpB6H,SAAiB,GAAG,GAAG,EAC+B;IAEtD;IACA,MAAMpB,IAAI,GAAG,CAACc,IAAI,CAAC7F,CAAC,GAAG8F,EAAE,CAAC9F,CAAC,IAAI,CAAC;IAChC,MAAMgF,IAAI,GAAG,CAACa,IAAI,CAAC5F,CAAC,GAAG6F,EAAE,CAAC7F,CAAC,IAAI,CAAC;;IAEhC;IACA,MAAMmG,UAAU,GAAGN,EAAE,CAAC9F,CAAC,GAAG6F,IAAI,CAAC7F,CAAC;IAChC,MAAMqG,UAAU,GAAGP,EAAE,CAAC7F,CAAC,GAAG4F,IAAI,CAAC5F,CAAC;IAChC,MAAMqG,YAAY,GAAGtF,IAAI,CAACC,IAAI,CAACmF,UAAU,GAAGA,UAAU,GAAGC,UAAU,GAAGA,UAAU,CAAC;IACjF,MAAMjB,OAAO,GAAG,CAACiB,UAAU,GAAGF,SAAS;IACvC,MAAMd,OAAO,GAAGe,UAAU,GAAGD,SAAS;IAEtC,MAAM9C,QAAQ,GAAG0B,IAAI,GAAGK,OAAO;IAC/B,MAAM9B,QAAQ,GAAG0B,IAAI,GAAGK,OAAO;;IAE/B;IACA,MAAMkB,aAAa,GAAGT,EAAE,CAAC9F,CAAC,GAAGqD,QAAQ;IACrC,MAAMmD,aAAa,GAAGV,EAAE,CAAC7F,CAAC,GAAGqD,QAAQ;IACrC,MAAMmD,mBAAmB,GAAGzF,IAAI,CAACC,IAAI,CAACsF,aAAa,GAAGA,aAAa,GAAGC,aAAa,GAAGA,aAAa,CAAC;;IAEpG;IACA;IACA,MAAME,YAAY,GAAGZ,EAAE,CAAC9F,CAAC,GAAIuG,aAAa,GAAGE,mBAAmB,GAAInI,UAAU;IAC9E,MAAMqI,YAAY,GAAGb,EAAE,CAAC7F,CAAC,GAAIuG,aAAa,GAAGC,mBAAmB,GAAInI,UAAU;;IAG9E;IACA,MAAMiF,QAAQ,GAAG,KAAKsC,IAAI,CAAC7F,CAAC,IAAI6F,IAAI,CAAC5F,CAAC,MAAMoD,QAAQ,IAAIC,QAAQ,KAAKoD,YAAY,IAAIC,YAAY,EAAE;IAEnG,MAAMC,QAAQ,GAAG,eAAe1I,aAAa,EAAE,EAAE;IAEjD,OAAO8F,KAAK,CAACpF,MAAM,CAAC,MAAM,CAAC,CACtBC,IAAI,CAAC,IAAI,EAAE+H,QAAQ,CAAC,CACpB/H,IAAI,CAAC,GAAG,EAAE0E,QAAQ,CAAC,CACnB1E,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CACpBA,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBA,IAAI,CAAC,YAAY,EAAE,aAAa,CAAC;EAC1C;EAEA4C,UAAUA,CACNoF,QAA6D,EAC7DC,KAA+B,EAC/BC,GAA6B;EAAE;EAC/BzI,UAAkB;EAAE;EACpB0I,WAAmB,GAAG,OAAO,EAC7BC,WAAmB,GAAG,CAAC,EACvBC,OAAe,GAAG,CAAC,EACmC;IAEtD;IACA,MAAMjC,EAAE,GAAG8B,GAAG,CAAC/G,CAAC,GAAG8G,KAAK,CAAC9G,CAAC;IAC1B,MAAMkF,EAAE,GAAG6B,GAAG,CAAC9G,CAAC,GAAG6G,KAAK,CAAC7G,CAAC;IAC1B,MAAMkH,QAAQ,GAAGnG,IAAI,CAACC,IAAI,CAACgE,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;;IAE7C;IACA;IACA,MAAMwB,YAAY,GAAGK,GAAG,CAAC/G,CAAC,GAAIiF,EAAE,GAAGkC,QAAQ,GAAI7I,UAAU;IACzD,MAAMqI,YAAY,GAAGI,GAAG,CAAC9G,CAAC,GAAIiF,EAAE,GAAGiC,QAAQ,GAAI7I,UAAU;IAEzD,OAAOuI,QAAQ,CAACjI,MAAM,CAAC,MAAM,CAAC,CACzBC,IAAI,CAAC,IAAI,EAAEiI,KAAK,CAAC9G,CAAC,CAAC,CACnBnB,IAAI,CAAC,IAAI,EAAEiI,KAAK,CAAC7G,CAAC,CAAC,CACnBpB,IAAI,CAAC,IAAI,EAAE6H,YAAY,CAAC,CAAC;IAAA,CACzB7H,IAAI,CAAC,IAAI,EAAE8H,YAAY,CAAC,CAAC;IAAA,CACzB9H,IAAI,CAAC,QAAQ,EAAEmI,WAAW,CAAC,CAC3BnI,IAAI,CAAC,cAAc,EAAEoI,WAAW,CAAC,CACjCzC,KAAK,CAAC,SAAS,EAAE0C,OAAO,CAAC,CACzBrI,IAAI,CAAC,YAAY,EAAE,aAAa,CAAC;EAC1C;EAGAsB,WAAWA,CAACnB,UAA+D,EAAEoI,QAAkC,EAAE9C,GAAW,EAA0D;IAClL,OAAOtF,UAAU,CAACJ,MAAM,CAAC,MAAM,CAAC,CAC3BC,IAAI,CAAC,GAAG,EAAEuI,QAAQ,CAACpH,CAAC,CAAC,CACrBnB,IAAI,CAAC,GAAG,EAAEuI,QAAQ,CAACnH,CAAC,CAAC,CACrBpB,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CACtBA,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BA,IAAI,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CACpC2F,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CACtBA,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAC1BD,IAAI,CAACD,GAAG,CAAC;EAClB;EAGAvE,UAAUA,CACNf,UAA+D,EAC/DqI,EAAU,EACVC,EAAU,EACVC,CAAS,GAAG,EAAE,EACdC,SAAiB,GAAG,MAAM,EAC1BC,cAAsB,GAAG,CAAC,EAC1BC,WAAoB,GAAG,KAAK,EACkH;IAE9I;IACA,MAAMpH,UAAU,GAAGtB,UAAU,CAACJ,MAAM,CAAC,QAAQ,CAAC,CACzCC,IAAI,CAAC,IAAI,EAAEwI,EAAE,CAAC,CACdxI,IAAI,CAAC,IAAI,EAAEyI,EAAE,CAAC,CACdzI,IAAI,CAAC,GAAG,EAAE0I,CAAC,CAAC,CACZ1I,IAAI,CAAC,OAAO,EAAE2I,SAAS,CAAC,CACxBhD,KAAK,CAAC,SAAS,EAAEiD,cAAc,CAAC;IAErC,IAAIlH,SAA+E,GAAGoH,SAAS;;IAE/F;IACA,IAAID,WAAW,EAAE;MACb,MAAME,WAAW,GAAGL,CAAC,GAAG,CAAC;MACzBhH,SAAS,GAAGvB,UAAU,CAACJ,MAAM,CAAC,QAAQ,CAAC,CAClCC,IAAI,CAAC,IAAI,EAAEwI,EAAE,CAAC,CACdxI,IAAI,CAAC,IAAI,EAAEyI,EAAE,CAAC,CACdzI,IAAI,CAAC,GAAG,EAAE+I,WAAW,CAAC,CACtB/I,IAAI,CAAC,OAAO,EAAE2I,SAAS,GAAG,kBAAkB,CAAC,CAC7ChD,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CACrBA,KAAK,CAAC,QAAQ,EAAE,OAAO,CAAC,CACxBA,KAAK,CAAC,cAAc,EAAE,CAAC,CAAC,CACxBA,KAAK,CAAC,SAAS,EAAEiD,cAAc,CAAC;IACzC;;IAEA;IACA,OAAO;MAAEnH,UAAU;MAAEC;IAAU,CAAC;EACpC;EAEAF,mBAAmBA,CACfC,UAAoE,EACpEC,SAA+E;EAAE;EACjF6G,QAAkC,EAClCS,QAAgB,GAAG,IAAI,EACV;IACb,OAAO,IAAI/D,OAAO,CAAEgE,OAAO,IAAK;MAE5B,MAAMC,oBAAoB,GAAGzH,UAAU,CAAC0H,UAAU,CAAC,CAAC,CAC/CH,QAAQ,CAACA,QAAQ,CAAC,CAClBhJ,IAAI,CAAC,IAAI,EAAEuI,QAAQ,CAACpH,CAAC,CAAC,CACtBnB,IAAI,CAAC,IAAI,EAAEuI,QAAQ,CAACnH,CAAC,CAAC,CACtBuE,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CACnB3F,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBA,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC;;MAE1B;MACA,IAAI0B,SAAS,EAAE;QACXA,SAAS,CAACyH,UAAU,CAAC,CAAC,CACjBH,QAAQ,CAACA,QAAQ,CAAC,CAClBhJ,IAAI,CAAC,IAAI,EAAEuI,QAAQ,CAACpH,CAAC,CAAC,CACtBnB,IAAI,CAAC,IAAI,EAAEuI,QAAQ,CAACnH,CAAC,CAAC,CACtBuE,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;MAC5B;MAEAuD,oBAAoB,CAACE,EAAE,CAAC,KAAK,EAAE,MAAMH,OAAO,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC;EACN;EAEArH,oBAAoBA,CAChBP,KAA6D,EAC7DkH,QAAkC,EAClCS,QAAgB,GAAG,IAAI,EACV;IACb,OAAO,IAAI/D,OAAO,CAAEgE,OAAO,IAAK;MAC5B5H,KAAK,CAAC8H,UAAU,CAAC,CAAC,CACbH,QAAQ,CAACA,QAAQ,CAAC,CAClBrD,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CACnB3F,IAAI,CAAC,GAAG,EAAEuI,QAAQ,CAACpH,CAAC,CAAC,CACrBnB,IAAI,CAAC,GAAG,EAAEuI,QAAQ,CAACnH,CAAC,CAAC,CACrBgI,EAAE,CAAC,KAAK,EAAE,MAAMH,OAAO,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC;EACN;;EAGA;EACAnI,WAAWA,CAACR,KAAa,EAAE+I,aAAqB,EAAEC,OAAe,EAAEC,OAAe,EAAEC,MAAc,GAAG,GAAG,EAAE;IACtG,MAAMC,KAAK,GAAI,CAAC,GAAGtH,IAAI,CAAC2B,EAAE,GAAGxD,KAAK,GAAI+I,aAAa;;IAEnD;IACA,MAAMlI,CAAC,GAAGqI,MAAM,GAAGrH,IAAI,CAAC+B,GAAG,CAACuF,KAAK,CAAC;IAClC,MAAMrI,CAAC,GAAGoI,MAAM,GAAGrH,IAAI,CAACiC,GAAG,CAACqF,KAAK,CAAC;IAElC,OAAO;MAAEtI,CAAC,EAAEA,CAAC,GAAGmI,OAAO;MAAElI,CAAC,EAAEA,CAAC,GAAGmI;IAAQ,CAAC;EAC7C;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}