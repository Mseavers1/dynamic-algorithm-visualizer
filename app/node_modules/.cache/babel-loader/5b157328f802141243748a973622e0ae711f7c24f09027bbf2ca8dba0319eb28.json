{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nexport const Testing = () => {\n  _s();\n  const [instructionStack, setInstructionStack] = useState([]);\n  useEffect(() => {\n    const newInstructions = [{\n      type: 'add',\n      value: '1',\n      index: 0\n    }, {\n      type: 'add',\n      value: '2',\n      index: 1\n    }, {\n      type: 'add',\n      value: '3',\n      index: 2\n    }, {\n      type: 'add',\n      value: '3',\n      index: 3\n    }];\n    setInstructionStack(newInstructions);\n  }, []);\n  const processInstructions = async svg => {\n    for (let instruction of instructionStack) {\n      if (instruction.type === 'add' && instruction.value) {\n        // Wait for the previous node to finish its animation before adding the next one\n        await addNode(svg, instruction);\n      }\n    }\n  };\n\n  // Node function that appends a circle and returns the D3 selection\n  const addNode = (svg, instruction) => {\n    return new Promise(resolve => {\n      const nodeElement = svg.append(\"circle\").attr(\"cx\", 200) // Set starting x position\n      .attr(\"cy\", 200) // Set starting y position\n      .attr(\"r\", 20).attr(\"class\", \"node\").style(\"opacity\", 0); // Start with invisible node\n\n      // Animate the node: fade in and move\n      nodeElement.transition().duration(1000) // Duration of 1 second\n      .style(\"opacity\", 1) // Fade in the node\n      .attr(\"cx\", 100 + (instruction.index || 0) * 50) // Place based on index, space out the nodes\n      .attr(\"cy\", 100); // Keep y position constant for simplicity\n\n      // Resolve the promise after the animation duration\n      setTimeout(() => resolve(), 1000); // Wait for the animation to finish (1000ms)\n    });\n  };\n  useEffect(() => {\n    // Select the SVG element that the D3 code will operate on\n    const svg = d3.select(\"#svg-container\").attr(\"width\", 500).attr(\"height\", 500);\n\n    // Process the instructions to add nodes\n    processInstructions(svg);\n  }, [instructionStack]); // Empty dependency array to run the effect only once\n\n  return null; // No need to return an element here, as we're using D3 to manipulate the SVG\n};\n_s(Testing, \"TFYHpKeMWd12HTpksPsVMW+UKFk=\");\n_c = Testing;\nvar _c;\n$RefreshReg$(_c, \"Testing\");","map":{"version":3,"names":["useEffect","useState","d3","Testing","_s","instructionStack","setInstructionStack","newInstructions","type","value","index","processInstructions","svg","instruction","addNode","Promise","resolve","nodeElement","append","attr","style","transition","duration","setTimeout","select","_c","$RefreshReg$"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/algorithms/animation_testing.tsx"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {BaseType} from \"d3\";\r\n\r\nexport const Testing: React.FC = () => {\r\n\r\n    const [instructionStack, setInstructionStack] = useState<Instruction[]>([]);\r\n\r\n    type Instruction = {\r\n        type: 'add' | 'swap';\r\n        value?: string | number;\r\n        index?: number;\r\n        fromIndex?: number;\r\n        toIndex?: number;\r\n    };\r\n\r\n    useEffect(() => {\r\n        const newInstructions: Instruction[] = [\r\n            { type: 'add', value: '1', index: 0 },\r\n            { type: 'add', value: '2', index: 1 },\r\n            { type: 'add', value: '3', index: 2 },\r\n            { type: 'add', value: '3', index: 3 },\r\n        ];\r\n        setInstructionStack(newInstructions);\r\n    }, []);\r\n\r\n    const processInstructions = async (svg: d3.Selection<BaseType, unknown, HTMLElement, any>) => {\r\n        for (let instruction of instructionStack) {\r\n            if (instruction.type === 'add' && instruction.value) {\r\n                // Wait for the previous node to finish its animation before adding the next one\r\n                await addNode(svg, instruction);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Node function that appends a circle and returns the D3 selection\r\n    const addNode = (svg: d3.Selection<BaseType, unknown, HTMLElement, any>, instruction: Instruction) => {\r\n        return new Promise<void>((resolve) => {\r\n            const nodeElement = svg.append(\"circle\")\r\n                .attr(\"cx\", 200)  // Set starting x position\r\n                .attr(\"cy\", 200)  // Set starting y position\r\n                .attr(\"r\", 20)\r\n                .attr(\"class\", \"node\")\r\n                .style(\"opacity\", 0);  // Start with invisible node\r\n\r\n            // Animate the node: fade in and move\r\n            nodeElement.transition()\r\n                .duration(1000)  // Duration of 1 second\r\n                .style(\"opacity\", 1)  // Fade in the node\r\n                .attr(\"cx\", 100 + (instruction.index || 0) * 50)  // Place based on index, space out the nodes\r\n                .attr(\"cy\", 100);  // Keep y position constant for simplicity\r\n\r\n            // Resolve the promise after the animation duration\r\n            setTimeout(() => resolve(), 1000);  // Wait for the animation to finish (1000ms)\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Select the SVG element that the D3 code will operate on\r\n        const svg = d3.select(\"#svg-container\")\r\n            .attr(\"width\", 500)\r\n            .attr(\"height\", 500);\r\n\r\n        // Process the instructions to add nodes\r\n        processInstructions(svg);\r\n    }, [instructionStack]);   // Empty dependency array to run the effect only once\r\n\r\n    return null;  // No need to return an element here, as we're using D3 to manipulate the SVG\r\n};\r\n"],"mappings":";AAAA,SAAeA,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AAGxB,OAAO,MAAMC,OAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEnC,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGL,QAAQ,CAAgB,EAAE,CAAC;EAU3ED,SAAS,CAAC,MAAM;IACZ,MAAMO,eAA8B,GAAG,CACnC;MAAEC,IAAI,EAAE,KAAK;MAAEC,KAAK,EAAE,GAAG;MAAEC,KAAK,EAAE;IAAE,CAAC,EACrC;MAAEF,IAAI,EAAE,KAAK;MAAEC,KAAK,EAAE,GAAG;MAAEC,KAAK,EAAE;IAAE,CAAC,EACrC;MAAEF,IAAI,EAAE,KAAK;MAAEC,KAAK,EAAE,GAAG;MAAEC,KAAK,EAAE;IAAE,CAAC,EACrC;MAAEF,IAAI,EAAE,KAAK;MAAEC,KAAK,EAAE,GAAG;MAAEC,KAAK,EAAE;IAAE,CAAC,CACxC;IACDJ,mBAAmB,CAACC,eAAe,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,mBAAmB,GAAG,MAAOC,GAAsD,IAAK;IAC1F,KAAK,IAAIC,WAAW,IAAIR,gBAAgB,EAAE;MACtC,IAAIQ,WAAW,CAACL,IAAI,KAAK,KAAK,IAAIK,WAAW,CAACJ,KAAK,EAAE;QACjD;QACA,MAAMK,OAAO,CAACF,GAAG,EAAEC,WAAW,CAAC;MACnC;IACJ;EACJ,CAAC;;EAED;EACA,MAAMC,OAAO,GAAGA,CAACF,GAAsD,EAAEC,WAAwB,KAAK;IAClG,OAAO,IAAIE,OAAO,CAAQC,OAAO,IAAK;MAClC,MAAMC,WAAW,GAAGL,GAAG,CAACM,MAAM,CAAC,QAAQ,CAAC,CACnCC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAE;MAAA,CACjBA,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAE;MAAA,CACjBA,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CACbA,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CACrBC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAE;;MAE3B;MACAH,WAAW,CAACI,UAAU,CAAC,CAAC,CACnBC,QAAQ,CAAC,IAAI,CAAC,CAAE;MAAA,CAChBF,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CAAE;MAAA,CACrBD,IAAI,CAAC,IAAI,EAAE,GAAG,GAAG,CAACN,WAAW,CAACH,KAAK,IAAI,CAAC,IAAI,EAAE,CAAC,CAAE;MAAA,CACjDS,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAE;;MAEvB;MACAI,UAAU,CAAC,MAAMP,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAE;IACxC,CAAC,CAAC;EACN,CAAC;EAEDhB,SAAS,CAAC,MAAM;IACZ;IACA,MAAMY,GAAG,GAAGV,EAAE,CAACsB,MAAM,CAAC,gBAAgB,CAAC,CAClCL,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAClBA,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC;;IAExB;IACAR,mBAAmB,CAACC,GAAG,CAAC;EAC5B,CAAC,EAAE,CAACP,gBAAgB,CAAC,CAAC,CAAC,CAAG;;EAE1B,OAAO,IAAI,CAAC,CAAE;AAClB,CAAC;AAACD,EAAA,CAhEWD,OAAiB;AAAAsB,EAAA,GAAjBtB,OAAiB;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}