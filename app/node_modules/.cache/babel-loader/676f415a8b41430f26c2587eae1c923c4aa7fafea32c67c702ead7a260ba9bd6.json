{"ast":null,"code":"export class FAAddInputInstruction{constructor(input){this.input=void 0;this.input=input;}async process(svg){let x=0;let y=30;const verticalSpacing=30;const lineGroup=svg.append(\"g\").attr(\"class\",\"line-group\");this.createLabel(svg,\"Input\",x,y);y+=verticalSpacing;x=20;let i=0;for(const letter of this.input){this.createLabel(svg,letter,x,y);this.createLine(i++,lineGroup,{x:x+20+20,y:y-5},{x:x+20,y:y-5});y+=verticalSpacing;}x=0;this.createLabel(svg,\"Accept\",x,y,24,true,\"green\");y+=verticalSpacing;this.createLabel(svg,\"Reject\",x,y,24,true,\"red\");return Promise.resolve(undefined);}createLabel(svg,text,x,y){let fontSize=arguments.length>4&&arguments[4]!==undefined?arguments[4]:24;let is_non_character=arguments.length>5&&arguments[5]!==undefined?arguments[5]:false;let fontColor=arguments.length>6&&arguments[6]!==undefined?arguments[6]:\"black\";let fontWeight=arguments.length>7&&arguments[7]!==undefined?arguments[7]:\"normal\";const label=svg.append(\"text\").attr(\"class\",\"input-label\").attr(\"x\",x).attr(\"y\",y).attr(\"font-size\",fontSize).attr(\"fill\",fontColor).attr(\"font-weight\",fontWeight);// Handle non-character labels\nif(is_non_character){label.attr(\"id\",text).style(\"opacity\",0);}label.text(text);}createLine(index,svgGroup,start,end){let strokeColor=arguments.length>4&&arguments[4]!==undefined?arguments[4]:\"black\";let strokeWidth=arguments.length>5&&arguments[5]!==undefined?arguments[5]:2;let opacity=arguments.length>6&&arguments[6]!==undefined?arguments[6]:0;const uniqueId=`input-${index}`;let defs=svgGroup.select(\"defs\");if(defs.empty()){defs=svgGroup.append(\"defs\");}defs.append(\"marker\").attr(\"id\",`arrow-input-${index}`).attr(\"viewBox\",\"0 0 10 10\").attr(\"refX\",5).attr(\"refY\",5).attr(\"markerWidth\",6).attr(\"markerHeight\",6).attr(\"orient\",\"auto-start-reverse\").append(\"path\").attr(\"d\",\"M 0 0 L 10 5 L 0 10 z\").attr(\"fill\",\"black\").style(\"opacity\",1);return svgGroup.append(\"line\").attr(\"id\",uniqueId).attr(\"x1\",start.x).attr(\"y1\",start.y).attr(\"x2\",end.x).attr(\"y2\",end.y).attr(\"stroke\",strokeColor).attr(\"stroke-width\",strokeWidth).attr(\"class\",\"input-arrow\").style(\"opacity\",opacity).attr(\"marker-end\",`url(#arrow-input-${index})`);}}","map":{"version":3,"names":["FAAddInputInstruction","constructor","input","process","svg","x","y","verticalSpacing","lineGroup","append","attr","createLabel","i","letter","createLine","Promise","resolve","undefined","text","fontSize","arguments","length","is_non_character","fontColor","fontWeight","label","style","index","svgGroup","start","end","strokeColor","strokeWidth","opacity","uniqueId","defs","select","empty"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/fa_add_input_instruction.tsx"],"sourcesContent":["import {Instruction} from \"./i_instruction\";\r\nimport {BaseType, Selection} from \"d3\";\r\n\r\nexport class FAAddInputInstruction implements Instruction {\r\n\r\n    private input: string;\r\n\r\n    constructor(input: string) {\r\n        this.input = input;\r\n    }\r\n\r\n    async process(svg: d3.Selection<BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n        let x = 0;\r\n        let y = 30;\r\n        const verticalSpacing = 30;\r\n\r\n        const lineGroup = svg.append<SVGGElement>(\"g\").attr(\"class\", \"line-group\");\r\n\r\n        this.createLabel(svg, \"Input\", x, y);\r\n        y += verticalSpacing;\r\n        x = 20;\r\n\r\n        let i = 0;\r\n        for (const letter of this.input) {\r\n            this.createLabel(svg, letter, x, y);\r\n            this.createLine(i++, lineGroup, { x: x + 20 + 20, y: y - 5}, { x: x + 20, y: y - 5 });\r\n            y += verticalSpacing;\r\n        }\r\n\r\n        x = 0;\r\n        this.createLabel(svg, \"Accept\", x, y, 24, true, \"green\");\r\n        y += verticalSpacing;\r\n\r\n        this.createLabel(svg, \"Reject\", x, y, 24, true, \"red\");\r\n\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n\r\n    createLabel(svg: d3.Selection<BaseType, unknown, HTMLElement, any>, text: string, x: number, y: number, fontSize: number = 24, is_non_character: boolean = false, fontColor: string = \"black\", fontWeight: string = \"normal\"): void {\r\n        const label = svg.append(\"text\")\r\n            .attr(\"class\", \"input-label\")\r\n            .attr(\"x\", x)\r\n            .attr(\"y\", y)\r\n            .attr(\"font-size\", fontSize)\r\n            .attr(\"fill\", fontColor)\r\n            .attr(\"font-weight\", fontWeight);\r\n\r\n        // Handle non-character labels\r\n        if (is_non_character) {\r\n            label\r\n                .attr(\"id\", text)\r\n                .style(\"opacity\", 0);\r\n        }\r\n\r\n        label.text(text);\r\n    }\r\n\r\n    createLine(\r\n        index: number,\r\n        svgGroup: d3.Selection<SVGGElement, unknown, HTMLElement, any>,\r\n        start: { x: number; y: number },\r\n        end: { x: number; y: number },\r\n        strokeColor: string = \"black\",\r\n        strokeWidth: number = 2,\r\n        opacity: number = 0\r\n    ): d3.Selection<SVGLineElement, unknown, HTMLElement, any> {\r\n        const uniqueId = `input-${index}`;\r\n\r\n        let defs = svgGroup.select<SVGDefsElement>(\"defs\");\r\n        if (defs.empty()) {\r\n            defs = svgGroup.append<SVGDefsElement>(\"defs\");\r\n        }\r\n\r\n        defs.append(\"marker\")\r\n            .attr(\"id\", `arrow-input-${index}`)\r\n            .attr(\"viewBox\", \"0 0 10 10\")\r\n            .attr(\"refX\", 5)\r\n            .attr(\"refY\", 5)\r\n            .attr(\"markerWidth\", 6)\r\n            .attr(\"markerHeight\", 6)\r\n            .attr(\"orient\", \"auto-start-reverse\")\r\n            .append(\"path\")\r\n            .attr(\"d\", \"M 0 0 L 10 5 L 0 10 z\")\r\n            .attr(\"fill\", \"black\")\r\n            .style(\"opacity\", 1);\r\n\r\n        return svgGroup.append(\"line\")\r\n            .attr(\"id\", uniqueId)\r\n            .attr(\"x1\", start.x)\r\n            .attr(\"y1\", start.y)\r\n            .attr(\"x2\", end.x)\r\n            .attr(\"y2\", end.y)\r\n            .attr(\"stroke\", strokeColor)\r\n            .attr(\"stroke-width\", strokeWidth)\r\n            .attr(\"class\", \"input-arrow\")\r\n            .style(\"opacity\", opacity)\r\n            .attr(\"marker-end\", `url(#arrow-input-${index})`);\r\n    }\r\n\r\n\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}