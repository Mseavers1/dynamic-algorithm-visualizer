{"ast":null,"code":"import * as d3 from \"d3\";\nexport class FAHighlightInstruction {\n  constructor(nodeFrom, nodeTo) {\n    this.nodeFrom = void 0;\n    this.nodeTo = void 0;\n    this.nodeFrom = nodeFrom;\n    this.nodeTo = nodeTo;\n  }\n  process(svg) {\n    // Fade out all line elements (straight lines) to opacity 0\n    svg.selectAll(\"line[id^='line-']\").transition().duration(1000).style(\"opacity\", 0).on(\"end\", function () {\n      // Once fade-out is complete, reset the color and opacity\n      d3.select(this).style(\"opacity\", 1) // Reset to full opacity\n      .attr(\"stroke\", \"black\") // Reset stroke color\n      .attr(\"stroke-width\", 2); // Reset stroke width\n    });\n\n    // Fade out all path elements (curved lines) to opacity 0\n    svg.selectAll(\"path[id^='line-']\").transition().duration(1000).style(\"opacity\", 0).on(\"end\", function () {\n      // Once fade-out is complete, reset the color and opacity\n      d3.select(this).style(\"opacity\", 1) // Reset to full opacity\n      .attr(\"stroke\", \"black\") // Reset stroke color\n      .attr(\"stroke-width\", 2); // Reset stroke width\n    });\n\n    // Fade out all marker arrowheads (regardless of trailing dash) to opacity 0\n    svg.selectAll(\"marker[id^='arrow-'] path, defs marker path\").transition().duration(1000).style(\"opacity\", 0).on(\"end\", function () {\n      // Once fade-out is complete, reset the color and opacity\n      d3.select(this).style(\"opacity\", 1) // Reset to full opacity\n      .attr(\"fill\", \"black\"); // Reset fill color\n    });\n\n    // Highlights the selected arrow\n    const lineId = `line-${this.nodeFrom}-${this.nodeTo}`;\n    const markerId = `arrow-${this.nodeFrom}-${this.nodeTo}`;\n    const lineAndArrowTransition = svg.transition().duration(1000);\n    lineAndArrowTransition.select(`#${lineId}`).attr(\"stroke\", \"red\").attr(\"stroke-width\", 2).attr(\"marker-end\", `url(#${markerId})`);\n    lineAndArrowTransition.select(`#${markerId} path`).attr(\"fill\", \"red\");\n\n    //const line = svg.select(\"#line-0\");\n    //console.log(\"Line found:\", !line.empty());\n\n    return Promise.resolve(lineAndArrowTransition.end());\n  }\n}","map":{"version":3,"names":["d3","FAHighlightInstruction","constructor","nodeFrom","nodeTo","process","svg","selectAll","transition","duration","style","on","select","attr","lineId","markerId","lineAndArrowTransition","Promise","resolve","end"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/highlight_fa_node_instruction.tsx"],"sourcesContent":["import {Instruction} from \"./i_instruction\";\r\nimport {BaseType, Selection} from \"d3\";\r\nimport * as d3 from \"d3\";\r\n\r\nexport class FAHighlightInstruction implements Instruction {\r\n\r\n    private nodeFrom: string | number;\r\n    private nodeTo: string | number;\r\n\r\n    constructor(nodeFrom: string | number, nodeTo: string | number) {\r\n        this.nodeFrom = nodeFrom;\r\n        this.nodeTo = nodeTo;\r\n    }\r\n\r\n    process(svg: Selection<BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n\r\n        // Fade out all line elements (straight lines) to opacity 0\r\n        svg.selectAll(\"line[id^='line-']\")\r\n            .transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 0)\r\n            .on(\"end\", function() {\r\n                // Once fade-out is complete, reset the color and opacity\r\n                d3.select(this)\r\n                    .style(\"opacity\", 1) // Reset to full opacity\r\n                    .attr(\"stroke\", \"black\") // Reset stroke color\r\n                    .attr(\"stroke-width\", 2); // Reset stroke width\r\n            });\r\n\r\n        // Fade out all path elements (curved lines) to opacity 0\r\n        svg.selectAll(\"path[id^='line-']\")\r\n            .transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 0)\r\n            .on(\"end\", function() {\r\n                // Once fade-out is complete, reset the color and opacity\r\n                d3.select(this)\r\n                    .style(\"opacity\", 1) // Reset to full opacity\r\n                    .attr(\"stroke\", \"black\") // Reset stroke color\r\n                    .attr(\"stroke-width\", 2); // Reset stroke width\r\n            });\r\n\r\n        // Fade out all marker arrowheads (regardless of trailing dash) to opacity 0\r\n        svg.selectAll(\"marker[id^='arrow-'] path, defs marker path\")\r\n            .transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 0)\r\n            .on(\"end\", function() {\r\n                // Once fade-out is complete, reset the color and opacity\r\n                d3.select(this)\r\n                    .style(\"opacity\", 1) // Reset to full opacity\r\n                    .attr(\"fill\", \"black\"); // Reset fill color\r\n            });\r\n\r\n        // Highlights the selected arrow\r\n        const lineId = `line-${this.nodeFrom}-${this.nodeTo}`;\r\n        const markerId = `arrow-${this.nodeFrom}-${this.nodeTo}`;\r\n        const lineAndArrowTransition = svg.transition().duration(1000);\r\n\r\n        lineAndArrowTransition\r\n            .select(`#${lineId}`)\r\n            .attr(\"stroke\", \"red\")\r\n            .attr(\"stroke-width\", 2)\r\n            .attr(\"marker-end\", `url(#${markerId})`);\r\n\r\n        lineAndArrowTransition\r\n            .select(`#${markerId} path`)\r\n            .attr(\"fill\", \"red\");\r\n\r\n\r\n        //const line = svg.select(\"#line-0\");\r\n        //console.log(\"Line found:\", !line.empty());\r\n\r\n        return Promise.resolve(lineAndArrowTransition.end());\r\n    }\r\n\r\n}"],"mappings":"AAEA,OAAO,KAAKA,EAAE,MAAM,IAAI;AAExB,OAAO,MAAMC,sBAAsB,CAAwB;EAKvDC,WAAWA,CAACC,QAAyB,EAAEC,MAAuB,EAAE;IAAA,KAHxDD,QAAQ;IAAA,KACRC,MAAM;IAGV,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACxB;EAEAC,OAAOA,CAACC,GAAmD,EAAiB;IAExE;IACAA,GAAG,CAACC,SAAS,CAAC,mBAAmB,CAAC,CAC7BC,UAAU,CAAC,CAAC,CACZC,QAAQ,CAAC,IAAI,CAAC,CACdC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CACnBC,EAAE,CAAC,KAAK,EAAE,YAAW;MAClB;MACAX,EAAE,CAACY,MAAM,CAAC,IAAI,CAAC,CACVF,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;MAAA,CACpBG,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;MAAA,CACxBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC;;IAEN;IACAP,GAAG,CAACC,SAAS,CAAC,mBAAmB,CAAC,CAC7BC,UAAU,CAAC,CAAC,CACZC,QAAQ,CAAC,IAAI,CAAC,CACdC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CACnBC,EAAE,CAAC,KAAK,EAAE,YAAW;MAClB;MACAX,EAAE,CAACY,MAAM,CAAC,IAAI,CAAC,CACVF,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;MAAA,CACpBG,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;MAAA,CACxBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC;;IAEN;IACAP,GAAG,CAACC,SAAS,CAAC,6CAA6C,CAAC,CACvDC,UAAU,CAAC,CAAC,CACZC,QAAQ,CAAC,IAAI,CAAC,CACdC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CACnBC,EAAE,CAAC,KAAK,EAAE,YAAW;MAClB;MACAX,EAAE,CAACY,MAAM,CAAC,IAAI,CAAC,CACVF,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;MAAA,CACpBG,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC;;IAEN;IACA,MAAMC,MAAM,GAAG,QAAQ,IAAI,CAACX,QAAQ,IAAI,IAAI,CAACC,MAAM,EAAE;IACrD,MAAMW,QAAQ,GAAG,SAAS,IAAI,CAACZ,QAAQ,IAAI,IAAI,CAACC,MAAM,EAAE;IACxD,MAAMY,sBAAsB,GAAGV,GAAG,CAACE,UAAU,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAI,CAAC;IAE9DO,sBAAsB,CACjBJ,MAAM,CAAC,IAAIE,MAAM,EAAE,CAAC,CACpBD,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CACrBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBA,IAAI,CAAC,YAAY,EAAE,QAAQE,QAAQ,GAAG,CAAC;IAE5CC,sBAAsB,CACjBJ,MAAM,CAAC,IAAIG,QAAQ,OAAO,CAAC,CAC3BF,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC;;IAGxB;IACA;;IAEA,OAAOI,OAAO,CAACC,OAAO,CAACF,sBAAsB,CAACG,GAAG,CAAC,CAAC,CAAC;EACxD;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}