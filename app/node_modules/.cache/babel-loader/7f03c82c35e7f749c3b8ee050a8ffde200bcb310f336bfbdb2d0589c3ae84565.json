{"ast":null,"code":"// Counter to generate unique IDs for curved paths\nlet pathIdCounter = 0;\nexport class FAAddAllInstruction {\n  constructor(graph) {\n    this.graph = void 0;\n    this.graph = graph;\n  }\n  async process(svg) {\n    const nodeTransitions = [];\n    const labelTransitions = [];\n    const linesGroup = svg.append(\"g\").attr(\"id\", \"lines\");\n    const layoutCenterX = 350;\n    const layoutCenterY = 200;\n    const nodesGroup = svg.append(\"g\");\n    let indexNodes = new Map();\n    let index = 0;\n    const total = this.graph.get_nodes().size;\n\n    // Draw all nodes\n    this.graph.get_nodes().forEach((node, value) => {\n      const pos = this.getPosition(index, total, layoutCenterX, layoutCenterY);\n      const current_node = this.createNode(nodesGroup, pos.x, pos.y);\n      const is_starting_node = this.graph.is_starting_node(value);\n      const is_final_node = this.graph.is_final_node(value);\n      const label = this.createLabel(nodesGroup, pos, value);\n      const node_transition = this.applyNodeTransition(current_node, pos);\n      const label_transition = this.applyLabelTransition(label, pos);\n      indexNodes.set(value, [index++, current_node]);\n      nodeTransitions.push(node_transition);\n      labelTransitions.push(label_transition);\n\n      // If node is a starting state, add a line to it pointing away from the center\n      if (is_starting_node) {\n        const startNodePos = pos; // Position of the starting node\n\n        // Calculate vector from layout center to starting node\n        const vx = startNodePos.x - layoutCenterX;\n        const vy = startNodePos.y - layoutCenterY;\n\n        // Normalize the vector\n        const magnitude = Math.sqrt(vx * vx + vy * vy);\n        const unitVx = magnitude === 0 ? 0 : vx / magnitude;\n        const unitVy = magnitude === 0 ? 0 : vy / magnitude;\n\n        // Define the length of the starting arrow line\n        const arrowLength = 50; // Adjust this value as needed\n\n        // Calculate the start point of the arrow\n        // It's the starting node position minus the normalized vector scaled by arrowLength\n        const arrowStartX = startNodePos.x - unitVx * arrowLength;\n        const arrowStartY = startNodePos.y - unitVy * arrowLength;\n\n        // The end point of the arrow is the starting node position\n        const arrowEndX = startNodePos.x;\n        const arrowEndY = startNodePos.y;\n\n        // Create the starting arrow line\n        this.createLine(linesGroup, {\n          x: arrowStartX,\n          y: arrowStartY\n        }, {\n          x: arrowEndX,\n          y: arrowEndY\n        });\n      }\n    });\n\n    // Draw connectors\n    this.graph.get_nodes().forEach((node, value) => {\n      let pointers = this.graph.get_pointers(value);\n      if (pointers != null && pointers.size > 0) {\n        const entry = indexNodes.get(value);\n        if (!entry) return; // safety check\n\n        const [index, currentNode] = entry;\n        const current_node_pos = this.getPosition(index, total, 350, 200);\n        pointers.forEach((weights, pointer) => {\n          const targetEntry = indexNodes.get(pointer.get_value());\n          if (!targetEntry) return;\n          const [targetIndex, _] = targetEntry;\n          const target_node_pos = this.getPosition(targetIndex, total, 350, 200);\n          if (this.hasMutualPointer(value, pointer.get_value())) {\n            const curvedPath = this.createCurvedLine(linesGroup, current_node_pos, target_node_pos, 0.12);\n            this.createLineLabel(linesGroup, curvedPath, weights);\n          } else {\n            const straightLine = this.createLine(linesGroup, current_node_pos, target_node_pos);\n            this.createLineLabel(linesGroup, straightLine, weights);\n          }\n        });\n      }\n    });\n    await Promise.all([...nodeTransitions, ...labelTransitions]);\n  }\n\n  // Creates a label for a line (edge) {Mostly generated through gpt and gemini -- edited by michael}\n  createLineLabel(group, lineOrPath, txts) {\n    const isLine = lineOrPath.node() instanceof SVGLineElement;\n    const createdLabels = [];\n    txts.forEach((txt, index) => {\n      // Append a text element for each weight\n      const text = group.append(\"text\").style(\"fill\", \"red\").style(\"font-size\", \"16px\").style(\"pointer-events\", \"none\");\n      if (isLine) {\n        const line = lineOrPath;\n        const x1 = parseFloat(line.attr(\"x1\"));\n        const y1 = parseFloat(line.attr(\"y1\"));\n        const x2 = parseFloat(line.attr(\"x2\"));\n        const y2 = parseFloat(line.attr(\"y2\"));\n\n        // Calculate midpoint\n        const midX = (x1 + x2) / 2;\n        const midY = (y1 + y2) / 2 - 10;\n\n        // Calculate perpendicular offset\n        const dx = x2 - x1;\n        const dy = y2 - y1;\n        const lineLength = Math.sqrt(dx * dx + dy * dy);\n        // Add a small check for zero length to avoid division by zero\n        const offsetX = lineLength === 0 ? 0 : -dy / lineLength;\n        const offsetY = lineLength === 0 ? 0 : -dx / lineLength;\n\n        // Adjust position based on the index for multiple labels\n        const labelSpacing = 15; // Adjust this value for desired spacing\n        const totalOffset = (index - (txts.length - 1) / 2) * labelSpacing; // Center the labels around the midpoint\n\n        text.attr(\"x\", midX + offsetX * totalOffset).attr(\"y\", midY + offsetY * totalOffset).attr(\"text-anchor\", \"middle\").attr(\"alignment-baseline\", \"middle\").text(txt);\n      } else {\n        const path = lineOrPath;\n        const pathId = path.attr(\"id\");\n\n        // Adjust startOffset for each label along the curve\n        const startOffset = 80 - (txts.length - 1) * 2 + (index - (txts.length - 1) / 2) * 5;\n        text.append(\"textPath\").attr(\"xlink:href\", `#${pathId}`).attr(\"startOffset\", `${startOffset}%`).attr(\"text-anchor\", \"middle\").text(txt);\n      }\n      createdLabels.push(text);\n    });\n    return createdLabels;\n  }\n  hasMutualPointer(from, to) {\n    const fromPointers = this.graph.get_pointers(from);\n    const toPointers = this.graph.get_pointers(to);\n    if (!fromPointers || !toPointers) return false;\n    return fromPointers.has(this.graph.get_node(to)) && toPointers.has(this.graph.get_node(from));\n  }\n  createCurvedLine(group, from, to, curvature = 0.3) {\n    // Midpoint between from and to\n    const midX = (from.x + to.x) / 2;\n    const midY = (from.y + to.y) / 2;\n\n    // Offset for the curve (perpendicular to the line)\n    const dx = to.x - from.x;\n    const dy = to.y - from.y;\n    const norm = Math.sqrt(dx * dx + dy * dy);\n    const offsetX = -dy * curvature;\n    const offsetY = dx * curvature;\n    const controlX = midX + offsetX;\n    const controlY = midY + offsetY;\n    const pathData = `M ${from.x} ${from.y} Q ${controlX} ${controlY}, ${to.x} ${to.y}`;\n    const uniqueId = `curved-path-${pathIdCounter++}`;\n    return group.append(\"path\").attr(\"id\", uniqueId).attr(\"d\", pathData).attr(\"fill\", \"none\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"marker-end\", \"url(#arrow)\");\n  }\n  createLine(svgGroup, start, end, strokeColor = \"black\", strokeWidth = 2, opacity = 1) {\n    return svgGroup.append(\"line\").attr(\"x1\", start.x).attr(\"y1\", start.y).attr(\"x2\", end.x).attr(\"y2\", end.y).attr(\"stroke\", strokeColor).attr(\"stroke-width\", strokeWidth).style(\"opacity\", opacity).attr(\"marker-end\", \"url(#arrow)\");\n  }\n  createLabel(nodesGroup, position, txt) {\n    return nodesGroup.append(\"text\").attr(\"x\", position.x).attr(\"y\", position.y).attr(\"class\", \"label\").attr(\"text-anchor\", \"middle\").attr(\"alignment-baseline\", \"middle\").style(\"fill\", \"black\").style(\"font-size\", \"20px\").text(txt);\n  }\n  createNode(nodesGroup, cx, cy, r = 20, className = \"node\", opacity = 0) {\n    return nodesGroup.append(\"circle\").attr(\"cx\", cx).attr(\"cy\", cy).attr(\"r\", r).attr(\"class\", className).style(\"opacity\", opacity);\n  }\n  applyNodeTransition(node, position, duration = 1000) {\n    return new Promise(resolve => {\n      node.transition().duration(duration).attr(\"cx\", position.x).attr(\"cy\", position.y).style(\"opacity\", 1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"fill\", \"white\").on(\"end\", () => resolve());\n    });\n  }\n  applyLabelTransition(label, position, duration = 1000) {\n    return new Promise(resolve => {\n      label.transition().duration(duration).style(\"opacity\", 1).attr(\"x\", position.x).attr(\"y\", position.y).on(\"end\", () => resolve());\n    });\n  }\n\n  // Gets the position in a shaped form\n  getPosition(index, numberOfNodes, centerX, centerY, radius = 150) {\n    const angle = 2 * Math.PI * index / numberOfNodes;\n\n    // Calculate x and y coordinates using polar to Cartesian conversion\n    const x = radius * Math.cos(angle);\n    const y = radius * Math.sin(angle);\n    return {\n      x: x + centerX,\n      y: y + centerY\n    };\n  }\n}","map":{"version":3,"names":["pathIdCounter","FAAddAllInstruction","constructor","graph","process","svg","nodeTransitions","labelTransitions","linesGroup","append","attr","layoutCenterX","layoutCenterY","nodesGroup","indexNodes","Map","index","total","get_nodes","size","forEach","node","value","pos","getPosition","current_node","createNode","x","y","is_starting_node","is_final_node","label","createLabel","node_transition","applyNodeTransition","label_transition","applyLabelTransition","set","push","startNodePos","vx","vy","magnitude","Math","sqrt","unitVx","unitVy","arrowLength","arrowStartX","arrowStartY","arrowEndX","arrowEndY","createLine","pointers","get_pointers","entry","get","currentNode","current_node_pos","weights","pointer","targetEntry","get_value","targetIndex","_","target_node_pos","hasMutualPointer","curvedPath","createCurvedLine","createLineLabel","straightLine","Promise","all","group","lineOrPath","txts","isLine","SVGLineElement","createdLabels","txt","text","style","line","x1","parseFloat","y1","x2","y2","midX","midY","dx","dy","lineLength","offsetX","offsetY","labelSpacing","totalOffset","length","path","pathId","startOffset","from","to","fromPointers","toPointers","has","get_node","curvature","norm","controlX","controlY","pathData","uniqueId","svgGroup","start","end","strokeColor","strokeWidth","opacity","position","cx","cy","r","className","duration","resolve","transition","on","numberOfNodes","centerX","centerY","radius","angle","PI","cos","sin"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/fa_add_all_instruction.tsx"],"sourcesContent":["import {Instruction} from \"./i_instruction\";\r\nimport {BaseType, Selection} from \"d3\";\r\nimport {FA_Graph} from \"../structures/fa_graph\";\r\nimport {FA_Node} from \"../structures/fa_node\";\r\n\r\n// Counter to generate unique IDs for curved paths\r\nlet pathIdCounter = 0;\r\n\r\nexport class FAAddAllInstruction implements Instruction {\r\n\r\n    private graph: FA_Graph;\r\n\r\n    constructor(graph: FA_Graph) {\r\n        this.graph = graph;\r\n    }\r\n\r\n    async process(svg: Selection<BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n        const nodeTransitions: Promise<void>[] = [];\r\n        const labelTransitions: Promise<void>[] = [];\r\n        const linesGroup = svg.append(\"g\").attr(\"id\", \"lines\") as unknown as d3.Selection<SVGGElement, unknown, null, undefined>;\r\n\r\n        const layoutCenterX = 350;\r\n        const layoutCenterY = 200;\r\n\r\n        const nodesGroup = (svg.append(\"g\") as unknown) as Selection<SVGGElement, unknown, null, undefined>;\r\n\r\n        let indexNodes: Map<string | number, [number, d3.Selection<SVGCircleElement, unknown, null, undefined>]> = new Map();\r\n        let index = 0;\r\n        const total = this.graph.get_nodes().size;\r\n\r\n        // Draw all nodes\r\n        this.graph.get_nodes().forEach((node, value) => {\r\n            const pos = this.getPosition(index, total, layoutCenterX, layoutCenterY);\r\n            const current_node = this.createNode(nodesGroup, pos.x, pos.y);\r\n            const is_starting_node = this.graph.is_starting_node(value);\r\n            const is_final_node = this.graph.is_final_node(value);\r\n            const label = this.createLabel(nodesGroup, pos, value as string)\r\n            const node_transition = this.applyNodeTransition(current_node, pos);\r\n            const label_transition = this.applyLabelTransition(label, pos);\r\n\r\n            indexNodes.set(value, [index++, current_node]);\r\n            nodeTransitions.push(node_transition);\r\n            labelTransitions.push(label_transition);\r\n\r\n            // If node is a starting state, add a line to it pointing away from the center\r\n            if (is_starting_node) {\r\n                const startNodePos = pos; // Position of the starting node\r\n\r\n                // Calculate vector from layout center to starting node\r\n                const vx = startNodePos.x - layoutCenterX;\r\n                const vy = startNodePos.y - layoutCenterY;\r\n\r\n                // Normalize the vector\r\n                const magnitude = Math.sqrt(vx * vx + vy * vy);\r\n                const unitVx = magnitude === 0 ? 0 : vx / magnitude;\r\n                const unitVy = magnitude === 0 ? 0 : vy / magnitude;\r\n\r\n                // Define the length of the starting arrow line\r\n                const arrowLength = 50; // Adjust this value as needed\r\n\r\n                // Calculate the start point of the arrow\r\n                // It's the starting node position minus the normalized vector scaled by arrowLength\r\n                const arrowStartX = startNodePos.x - unitVx * arrowLength;\r\n                const arrowStartY = startNodePos.y - unitVy * arrowLength;\r\n\r\n                // The end point of the arrow is the starting node position\r\n                const arrowEndX = startNodePos.x;\r\n                const arrowEndY = startNodePos.y;\r\n\r\n                // Create the starting arrow line\r\n                this.createLine(linesGroup, {x: arrowStartX, y: arrowStartY}, {x: arrowEndX, y: arrowEndY});\r\n            }\r\n        });\r\n\r\n        // Draw connectors\r\n        this.graph.get_nodes().forEach((node, value) => {\r\n\r\n            let pointers = this.graph.get_pointers(value);\r\n\r\n            if (pointers != null && pointers.size > 0) {\r\n\r\n                const entry = indexNodes.get(value);\r\n                if (!entry) return; // safety check\r\n\r\n                const [index, currentNode] = entry;\r\n                const current_node_pos = this.getPosition(index, total, 350, 200);\r\n\r\n                pointers.forEach((weights, pointer) => {\r\n                    const targetEntry = indexNodes.get(pointer.get_value());\r\n                    if (!targetEntry) return;\r\n\r\n                    const [targetIndex, _] = targetEntry;\r\n                    const target_node_pos = this.getPosition(targetIndex, total, 350, 200);\r\n\r\n                    if (this.hasMutualPointer(value, pointer.get_value())){\r\n                        const curvedPath = this.createCurvedLine(linesGroup, current_node_pos, target_node_pos, 0.12);\r\n                        this.createLineLabel(linesGroup, curvedPath, weights as string[]);\r\n                    }\r\n                    else\r\n                    {\r\n                        const straightLine = this.createLine(linesGroup, current_node_pos, target_node_pos);\r\n                        this.createLineLabel(linesGroup, straightLine as d3.Selection<SVGLineElement | SVGPathElement, unknown, null, undefined>, weights as string[]);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n\r\n        await Promise.all([...nodeTransitions, ...labelTransitions]);\r\n    }\r\n\r\n    // Creates a label for a line (edge) {Mostly generated through gpt and gemini -- edited by michael}\r\n    createLineLabel(\r\n        group: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n        lineOrPath: d3.Selection<SVGLineElement | SVGPathElement, unknown, null, undefined>,\r\n        txts: string[]\r\n    ): d3.Selection<SVGTextElement, unknown, null, undefined>[] {\r\n\r\n        const isLine = lineOrPath.node() instanceof SVGLineElement;\r\n        const createdLabels: d3.Selection<SVGTextElement, unknown, null, undefined>[] = [];\r\n\r\n        txts.forEach((txt, index) => {\r\n            // Append a text element for each weight\r\n            const text = group.append(\"text\")\r\n                .style(\"fill\", \"red\")\r\n                .style(\"font-size\", \"16px\")\r\n                .style(\"pointer-events\", \"none\");\r\n\r\n            if (isLine) {\r\n                const line = lineOrPath as d3.Selection<SVGLineElement, unknown, null, undefined>;\r\n                const x1 = parseFloat(line.attr(\"x1\"));\r\n                const y1 = parseFloat(line.attr(\"y1\"));\r\n                const x2 = parseFloat(line.attr(\"x2\"));\r\n                const y2 = parseFloat(line.attr(\"y2\"));\r\n\r\n                // Calculate midpoint\r\n                const midX = (x1 + x2) / 2;\r\n                const midY = (y1 + y2) / 2 - 10;\r\n\r\n                // Calculate perpendicular offset\r\n                const dx = x2 - x1;\r\n                const dy = y2 - y1;\r\n                const lineLength = Math.sqrt(dx * dx + dy * dy);\r\n                // Add a small check for zero length to avoid division by zero\r\n                const offsetX = lineLength === 0 ? 0 : (-dy / lineLength);\r\n                const offsetY = lineLength === 0 ? 0 : (-dx / lineLength);\r\n\r\n                // Adjust position based on the index for multiple labels\r\n                const labelSpacing = 15; // Adjust this value for desired spacing\r\n                const totalOffset = (index - (txts.length - 1) / 2) * labelSpacing; // Center the labels around the midpoint\r\n\r\n                text.attr(\"x\", midX + offsetX * totalOffset)\r\n                    .attr(\"y\", midY + offsetY * totalOffset)\r\n                    .attr(\"text-anchor\", \"middle\")\r\n                    .attr(\"alignment-baseline\", \"middle\")\r\n                    .text(txt);\r\n\r\n            } else {\r\n                const path = lineOrPath as d3.Selection<SVGPathElement, unknown, null, undefined>;\r\n                const pathId = path.attr(\"id\");\r\n\r\n                // Adjust startOffset for each label along the curve\r\n                const startOffset = (80 - (txts.length - 1) * 2) + ((index - (txts.length - 1) / 2) * 5);\r\n\r\n                text.append(\"textPath\")\r\n                    .attr(\"xlink:href\", `#${pathId}`)\r\n                    .attr(\"startOffset\", `${startOffset}%`)\r\n                    .attr(\"text-anchor\", \"middle\")\r\n                    .text(txt);\r\n            }\r\n            createdLabels.push(text);\r\n        });\r\n\r\n        return createdLabels;\r\n    }\r\n\r\n    hasMutualPointer(from: string | number, to: string | number): boolean {\r\n        const fromPointers = this.graph.get_pointers(from);\r\n        const toPointers = this.graph.get_pointers(to);\r\n\r\n        if (!fromPointers || !toPointers) return false;\r\n\r\n        return fromPointers.has(this.graph.get_node(to) as FA_Node) && toPointers.has(this.graph.get_node(from) as FA_Node);\r\n    }\r\n\r\n\r\n    createCurvedLine(\r\n        group: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n        from: { x: number, y: number },\r\n        to: { x: number, y: number },\r\n        curvature: number = 0.3\r\n    ): d3.Selection<SVGPathElement, unknown, null, undefined> {\r\n\r\n        // Midpoint between from and to\r\n        const midX = (from.x + to.x) / 2;\r\n        const midY = (from.y + to.y) / 2;\r\n\r\n        // Offset for the curve (perpendicular to the line)\r\n        const dx = to.x - from.x;\r\n        const dy = to.y - from.y;\r\n        const norm = Math.sqrt(dx * dx + dy * dy);\r\n        const offsetX = -dy * curvature;\r\n        const offsetY = dx * curvature;\r\n\r\n        const controlX = midX + offsetX;\r\n        const controlY = midY + offsetY;\r\n\r\n        const pathData = `M ${from.x} ${from.y} Q ${controlX} ${controlY}, ${to.x} ${to.y}`;\r\n\r\n        const uniqueId = `curved-path-${pathIdCounter++}`;\r\n\r\n        return group.append(\"path\")\r\n            .attr(\"id\", uniqueId)\r\n            .attr(\"d\", pathData)\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke\", \"black\")\r\n            .attr(\"stroke-width\", 2)\r\n            .attr(\"marker-end\", \"url(#arrow)\");\r\n    }\r\n\r\n    createLine(\r\n        svgGroup: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n        start: { x: number; y: number },\r\n        end: { x: number; y: number },\r\n        strokeColor: string = \"black\",\r\n        strokeWidth: number = 2,\r\n        opacity: number = 1\r\n    ): d3.Selection<SVGLineElement, unknown, null, undefined> {\r\n        return svgGroup.append(\"line\")\r\n            .attr(\"x1\", start.x)\r\n            .attr(\"y1\", start.y)\r\n            .attr(\"x2\", end.x)\r\n            .attr(\"y2\", end.y)\r\n            .attr(\"stroke\", strokeColor)\r\n            .attr(\"stroke-width\", strokeWidth)\r\n            .style(\"opacity\", opacity)\r\n            .attr(\"marker-end\", \"url(#arrow)\");\r\n    }\r\n\r\n\r\n    createLabel(nodesGroup: d3.Selection<SVGGElement, unknown, null, undefined>, position: { x: number, y: number }, txt: string): d3.Selection<SVGTextElement, unknown, null, undefined> {\r\n        return nodesGroup.append(\"text\")\r\n            .attr(\"x\", position.x)\r\n            .attr(\"y\", position.y)\r\n            .attr(\"class\", \"label\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .attr(\"alignment-baseline\", \"middle\")\r\n            .style(\"fill\", \"black\")\r\n            .style(\"font-size\", \"20px\")\r\n            .text(txt);\r\n    }\r\n\r\n\r\n    createNode(nodesGroup: d3.Selection<SVGGElement, unknown, null, undefined>, cx: number, cy: number, r: number = 20,\r\n               className: string = \"node\", opacity: number = 0\r\n    ): d3.Selection<SVGCircleElement, unknown, null, undefined> {\r\n\r\n        return nodesGroup.append(\"circle\")\r\n            .attr(\"cx\", cx)\r\n            .attr(\"cy\", cy)\r\n            .attr(\"r\", r)\r\n            .attr(\"class\", className)\r\n            .style(\"opacity\", opacity);\r\n    }\r\n\r\n    applyNodeTransition(\r\n        node: d3.Selection<SVGCircleElement, unknown, null, undefined>,\r\n        position: { x: number; y: number },\r\n        duration: number = 1000\r\n    ): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            node.transition()\r\n                .duration(duration)\r\n                .attr(\"cx\", position.x)\r\n                .attr(\"cy\", position.y)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"stroke\", \"black\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"white\")\r\n                .on(\"end\", () => resolve());\r\n        });\r\n    }\r\n\r\n    applyLabelTransition(\r\n        label: d3.Selection<SVGTextElement, unknown, null, undefined>,\r\n        position: { x: number; y: number },\r\n        duration: number = 1000\r\n    ): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            label.transition()\r\n                .duration(duration)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"x\", position.x)\r\n                .attr(\"y\", position.y)\r\n                .on(\"end\", () => resolve());\r\n        });\r\n    }\r\n\r\n\r\n    // Gets the position in a shaped form\r\n    getPosition(index: number, numberOfNodes: number, centerX: number, centerY: number, radius: number = 150) {\r\n        const angle = (2 * Math.PI * index) / numberOfNodes;\r\n\r\n        // Calculate x and y coordinates using polar to Cartesian conversion\r\n        const x = radius * Math.cos(angle);\r\n        const y = radius * Math.sin(angle);\r\n\r\n        return { x: x + centerX, y: y + centerY };\r\n    }\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}