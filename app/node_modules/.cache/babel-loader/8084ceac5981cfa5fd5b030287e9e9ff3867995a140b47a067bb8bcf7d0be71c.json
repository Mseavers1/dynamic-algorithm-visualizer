{"ast":null,"code":"// Class setup to handle all animations by using instructions that are defined outside this class\n\nexport class AnimationPlayer {\n  constructor(svg) {\n    // Queue of instructions\n    this.instructions = void 0;\n    // Current Nodes\n    this.displayed_nodes = [];\n    this.svg = void 0;\n    // Processes all the instructions in the queue\n    this.processInstructions = async () => {\n      // Base Case\n      if (this.instructions.length === 0) return;\n\n      // Gets and removes the first instruction\n      const instruction = this.instructions.shift();\n      if (instruction) {\n        await instruction.process(this.svg);\n        await this.processInstructions();\n      }\n    };\n    this.instructions = [];\n    this.svg = svg;\n  }\n\n  // Adds a new instruction into the queue\n  addInstruction(instruction) {\n    this.instructions.push(instruction);\n  }\n}","map":{"version":3,"names":["AnimationPlayer","constructor","svg","instructions","displayed_nodes","processInstructions","length","instruction","shift","process","addInstruction","push"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/animation_player.tsx"],"sourcesContent":["// Class setup to handle all animations by using instructions that are defined outside this class\r\nimport {Instruction} from \"./Instructions/i_instruction\";\r\nimport {Picture} from \"./pictures/i_picture\";\r\nimport * as d3 from \"d3\";\r\nimport {BaseType} from \"d3\";\r\n\r\nexport class AnimationPlayer {\r\n\r\n    // Queue of instructions\r\n    private instructions : Instruction[];\r\n\r\n    // Current Nodes\r\n    private displayed_nodes : Picture[] = [];\r\n\r\n    private readonly svg;\r\n\r\n    constructor(svg: d3.Selection<SVGSVGElement, unknown, null, undefined>) {\r\n        this.instructions = [];\r\n        this.svg = svg;\r\n    }\r\n\r\n    // Adds a new instruction into the queue\r\n    addInstruction(instruction : Instruction) {\r\n        this.instructions.push(instruction);\r\n    }\r\n\r\n    // Processes all the instructions in the queue\r\n    processInstructions = async()=> {\r\n\r\n        // Base Case\r\n        if (this.instructions.length === 0) return;\r\n\r\n        // Gets and removes the first instruction\r\n        const instruction = this.instructions.shift();\r\n\r\n        if (instruction) {\r\n            await instruction.process(this.svg);\r\n            await this.processInstructions();\r\n        }\r\n    }\r\n\r\n}"],"mappings":"AAAA;;AAMA,OAAO,MAAMA,eAAe,CAAC;EAUzBC,WAAWA,CAACC,GAA0D,EAAE;IARxE;IAAA,KACQC,YAAY;IAEpB;IAAA,KACQC,eAAe,GAAe,EAAE;IAAA,KAEvBF,GAAG;IAYpB;IAAA,KACAG,mBAAmB,GAAG,YAAU;MAE5B;MACA,IAAI,IAAI,CAACF,YAAY,CAACG,MAAM,KAAK,CAAC,EAAE;;MAEpC;MACA,MAAMC,WAAW,GAAG,IAAI,CAACJ,YAAY,CAACK,KAAK,CAAC,CAAC;MAE7C,IAAID,WAAW,EAAE;QACb,MAAMA,WAAW,CAACE,OAAO,CAAC,IAAI,CAACP,GAAG,CAAC;QACnC,MAAM,IAAI,CAACG,mBAAmB,CAAC,CAAC;MACpC;IACJ,CAAC;IAtBG,IAAI,CAACF,YAAY,GAAG,EAAE;IACtB,IAAI,CAACD,GAAG,GAAGA,GAAG;EAClB;;EAEA;EACAQ,cAAcA,CAACH,WAAyB,EAAE;IACtC,IAAI,CAACJ,YAAY,CAACQ,IAAI,CAACJ,WAAW,CAAC;EACvC;AAiBJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}