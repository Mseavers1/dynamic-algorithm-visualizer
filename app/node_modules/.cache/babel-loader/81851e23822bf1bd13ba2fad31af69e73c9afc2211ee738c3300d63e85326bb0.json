{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Micha\\\\Documents\\\\GitHub\\\\dynamic-algorithm-visualizer\\\\app\\\\src\\\\components\\\\algorithms\\\\min_heap.tsx\",\n  _s = $RefreshSig$();\nimport { BinaryTree } from \"../structures/binary_tree\";\nimport { animated, useTransition } from \"@react-spring/web\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class MinHeap {\n  constructor(isDynamicSize) {\n    this.isDynamicSize = isDynamicSize;\n    this.tree = void 0;\n    this.animationType = \"none\";\n    this.tree = new BinaryTree();\n  }\n  insert(value) {\n    var _this$tree;\n    (_this$tree = this.tree) === null || _this$tree === void 0 ? void 0 : _this$tree.add(value);\n    this.heapify(this.tree.length);\n    this.animationType = \"spawn\";\n\n    //alert(this.tree?.get_current_height())\n\n    //if (this.isDynamicSize && current_height > this.current_max_height) this.current_max_height = current_height + 1;\n  }\n  delete(value) {}\n  render() {\n    //alert(this.current_max_height);\n\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"500\",\n      height: \"500\",\n      children: /*#__PURE__*/_jsxDEV(AnimatedTree, {\n        values: this.tree.values,\n        height: 1,\n        animationType: this.animationType,\n        lastInsertedIndex: this.tree.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this);\n  }\n  heapify(cur_index) {\n    // At root, do not heapify.\n    if (cur_index == 1) return;\n\n    // Check if parent is less than the current index\n    const cur = this.tree.get(cur_index);\n    const par_index = this.tree.get_parent(cur_index);\n    const par_val = this.tree.get(par_index);\n    if (cur >= par_val) return;\n\n    // If so swap the indexes\n    this.tree.swap(cur_index, par_index);\n    this.animationType = \"swap\";\n\n    // Heapify on the new cur index\n    this.heapify(par_index);\n  }\n}\nconst AnimatedTree = ({\n  values,\n  height,\n  animationType,\n  lastInsertedIndex\n}) => {\n  _s();\n  const nodeTransitions = useTransition(values.map((value, i) => ({\n    value,\n    index: i\n  })), {\n    keys: item => `${item.value}-${item.index}`,\n    from: animationType === \"spawn\" && lastInsertedIndex === item.index ? {\n      opacity: 0,\n      transform: \"translate(300px, -100px) scale(0.5)\"\n    } // Spawn from the top\n    : {\n      opacity: 0,\n      transform: \"scale(0)\"\n    },\n    // Default spawn behavior\n    enter: {\n      opacity: 1,\n      transform: \"scale(1)\"\n    },\n    leave: {\n      opacity: 0,\n      transform: \"scale(0)\"\n    },\n    config: {\n      duration: 1000\n    }\n  });\n  const getNodePosition = index => {\n    if (index < 0 || isNaN(index)) return {\n      x: 0,\n      y: 0\n    };\n    if (index === 0) return {\n      x: 250,\n      y: 50\n    };\n    const depth = Math.floor(Math.log2(index + 1));\n    let xSpacingMulti = 1;\n    if (height > 1) xSpacingMulti = 2;\n    const xSpacing = 200 * xSpacingMulti / (depth + 1);\n    const ySpacing = 80;\n    const parentIndex = Math.floor((index - 1) / 2);\n    const parentPos = getNodePosition(parentIndex);\n    const isLeftChild = index % 2 === 1;\n    const xOffset = isLeftChild ? -xSpacing : xSpacing;\n    return {\n      x: parentPos.x + xOffset,\n      y: parentPos.y + ySpacing\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    children: [nodeTransitions((style, {\n      value,\n      index\n    }) => {\n      if (index === 0) return null;\n      const {\n        x,\n        y\n      } = getNodePosition(index);\n      const parentIndex = Math.floor((index - 1) / 2);\n      const parentPos = getNodePosition(parentIndex);\n      return /*#__PURE__*/_jsxDEV(animated.line, {\n        x1: parentPos.x,\n        y1: parentPos.y,\n        x2: x,\n        y2: y,\n        stroke: \"black\",\n        strokeWidth: \"2\",\n        style: {\n          strokeOpacity: 1\n        }\n      }, `line-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this);\n    }), nodeTransitions((style, {\n      value,\n      index\n    }) => {\n      const {\n        x,\n        y\n      } = getNodePosition(index);\n      return /*#__PURE__*/_jsxDEV(animated.g, {\n        style: style,\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: x,\n          cy: y,\n          r: 30,\n          fill: \"steelblue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: x,\n          y: y,\n          dy: 5,\n          textAnchor: \"middle\",\n          fill: \"white\",\n          fontSize: \"12\",\n          children: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }, this)]\n      }, `node-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n_s(AnimatedTree, \"7q9XJ/T8qFFFTlXCAVzO9hMqO4s=\", false, function () {\n  return [useTransition];\n});\n_c = AnimatedTree;\nvar _c;\n$RefreshReg$(_c, \"AnimatedTree\");","map":{"version":3,"names":["BinaryTree","animated","useTransition","jsxDEV","_jsxDEV","MinHeap","constructor","isDynamicSize","tree","animationType","insert","value","_this$tree","add","heapify","length","delete","render","width","height","children","AnimatedTree","values","lastInsertedIndex","fileName","_jsxFileName","lineNumber","columnNumber","cur_index","cur","get","par_index","get_parent","par_val","swap","_s","nodeTransitions","map","i","index","keys","item","from","opacity","transform","enter","leave","config","duration","getNodePosition","isNaN","x","y","depth","Math","floor","log2","xSpacingMulti","xSpacing","ySpacing","parentIndex","parentPos","isLeftChild","xOffset","style","line","x1","y1","x2","y2","stroke","strokeWidth","strokeOpacity","g","cx","cy","r","fill","dy","textAnchor","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/algorithms/min_heap.tsx"],"sourcesContent":["import { Algorithm } from \"./algorithm_interface\";\r\nimport {BinaryTree} from \"../structures/binary_tree\";\r\nimport {animated, useTransition} from \"@react-spring/web\";\r\n\r\nexport class MinHeap implements Algorithm {\r\n\r\n    private tree : BinaryTree;\r\n    private animationType: \"spawn\" | \"swap\" | \"none\" = \"none\";\r\n\r\n    constructor(\r\n        private isDynamicSize: boolean\r\n    ) {\r\n       this.tree = new BinaryTree();\r\n    }\r\n\r\n    insert(value: string | number) : void {\r\n\r\n        this.tree?.add(value);\r\n\r\n        this.heapify(this.tree.length);\r\n        this.animationType = \"spawn\";\r\n\r\n        //alert(this.tree?.get_current_height())\r\n\r\n        //if (this.isDynamicSize && current_height > this.current_max_height) this.current_max_height = current_height + 1;\r\n\r\n    }\r\n\r\n    delete(value: string | number) : void {\r\n\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        //alert(this.current_max_height);\r\n\r\n        return (\r\n            <svg width=\"500\" height=\"500\">\r\n                <AnimatedTree values={this.tree.values} height={1}animationType={this.animationType} lastInsertedIndex={this.tree.length}/>\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    heapify(cur_index : number): void {\r\n\r\n        // At root, do not heapify.\r\n        if (cur_index == 1) return;\r\n\r\n        // Check if parent is less than the current index\r\n        const cur = this.tree.get(cur_index);\r\n        const par_index = this.tree.get_parent(cur_index);\r\n        const par_val = this.tree.get(par_index);\r\n\r\n        if (cur >= par_val) return;\r\n\r\n        // If so swap the indexes\r\n        this.tree.swap(cur_index, par_index);\r\n\r\n        this.animationType = \"swap\";\r\n\r\n        // Heapify on the new cur index\r\n        this.heapify(par_index);\r\n    }\r\n}\r\n\r\nconst AnimatedTree = ({values, height, animationType, lastInsertedIndex}: { values: (string | number)[], height: number, animationType: \"spawn\" | \"swap\" | \"none\", lastInsertedIndex: number | null}) => {\r\n\r\n    const nodeTransitions = useTransition(\r\n        values.map((value, i) => ({ value, index: i })),\r\n        {\r\n            keys: (item) => `${item.value}-${item.index}`,\r\n            from: animationType === \"spawn\" && lastInsertedIndex === item.index\r\n                ? { opacity: 0, transform: \"translate(300px, -100px) scale(0.5)\" } // Spawn from the top\r\n                : { opacity: 0, transform: \"scale(0)\" }, // Default spawn behavior\r\n            enter: { opacity: 1, transform: \"scale(1)\" },\r\n            leave: { opacity: 0, transform: \"scale(0)\" },\r\n            config: { duration: 1000 },\r\n        }\r\n    );\r\n\r\n    const getNodePosition = (index: number): { x: number, y: number } => {\r\n        if (index < 0 || isNaN(index)) return { x: 0, y: 0 };\r\n        if (index === 0) return { x: 250, y: 50 };\r\n\r\n        const depth = Math.floor(Math.log2(index + 1));\r\n\r\n        let xSpacingMulti: number = 1;\r\n        if (height > 1) xSpacingMulti = 2;\r\n\r\n        const xSpacing = (200 * xSpacingMulti) / (depth + 1);\r\n        const ySpacing = 80;\r\n\r\n        const parentIndex = Math.floor((index - 1) / 2);\r\n        const parentPos = getNodePosition(parentIndex);\r\n        const isLeftChild = index % 2 === 1;\r\n        const xOffset = isLeftChild ? -xSpacing : xSpacing;\r\n\r\n        return { x: parentPos.x + xOffset, y: parentPos.y + ySpacing };\r\n    };\r\n\r\n    return (\r\n        <g>\r\n            {nodeTransitions((style, { value, index }) => {\r\n                if (index === 0) return null;\r\n                const { x, y } = getNodePosition(index);\r\n                const parentIndex = Math.floor((index - 1) / 2);\r\n                const parentPos = getNodePosition(parentIndex);\r\n\r\n                return (\r\n                    <animated.line\r\n                        key={`line-${index}`}\r\n                        x1={parentPos.x}\r\n                        y1={parentPos.y}\r\n                        x2={x}\r\n                        y2={y}\r\n                        stroke=\"black\"\r\n                        strokeWidth=\"2\"\r\n                        style={{ strokeOpacity: 1 }}\r\n                    />\r\n                );\r\n            })}\r\n\r\n            {nodeTransitions((style, { value, index }) => {\r\n                const { x, y } = getNodePosition(index);\r\n\r\n                return (\r\n                    <animated.g key={`node-${index}`} style={style}>\r\n                        <circle cx={x} cy={y} r={30} fill=\"steelblue\" />\r\n                        <text x={x} y={y} dy={5} textAnchor=\"middle\" fill=\"white\" fontSize=\"12\">\r\n                            {value}\r\n                        </text>\r\n                    </animated.g>\r\n                );\r\n            })}\r\n        </g>\r\n    );\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}