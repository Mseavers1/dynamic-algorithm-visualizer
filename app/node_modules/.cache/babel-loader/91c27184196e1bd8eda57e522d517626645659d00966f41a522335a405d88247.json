{"ast":null,"code":"export class FAAddInputInstruction {\n  constructor(input) {\n    this.input = void 0;\n    this.input = input;\n  }\n  async process(svg) {\n    let x = 0;\n    let y = 30;\n    const verticalSpacing = 30;\n    const lineGroup = svg.append(\"g\").attr(\"class\", \"line-group\");\n    this.createLabel(svg, \"Input\", x, y);\n    y += verticalSpacing;\n    x = 20;\n    let i = 0;\n    for (const letter of this.input) {\n      this.createLabel(svg, letter, x, y);\n      this.createLine(i++, lineGroup, {\n        x: x + 20 + 20,\n        y: y - 5\n      }, {\n        x: x + 20,\n        y: y - 5\n      });\n      y += verticalSpacing;\n    }\n    x = 0;\n    this.createLabel(svg, \"Accept\", x, y, 24, true, \"green\");\n    y += verticalSpacing;\n    this.createLabel(svg, \"Reject\", x, y, 24, true, \"red\");\n    return Promise.resolve(undefined);\n  }\n  createLabel(svg, text, x, y, fontSize = 24, is_non_character = false, fontColor = \"black\", fontWeight = \"normal\") {\n    const label = svg.append(\"text\").attr(\"class\", \"input-label\").attr(\"x\", x).attr(\"y\", y).attr(\"font-size\", fontSize).attr(\"fill\", fontColor).attr(\"font-weight\", fontWeight);\n\n    // Handle non-character labels\n    if (is_non_character) {\n      label.attr(\"id\", text).style(\"opacity\", 0);\n    } else {\n      label.text(text);\n    }\n  }\n  createLine(index, svgGroup, start, end, strokeColor = \"black\", strokeWidth = 2, opacity = 0) {\n    const uniqueId = `input-${index}`;\n    let defs = svgGroup.select(\"defs\");\n    if (defs.empty()) {\n      defs = svgGroup.append(\"defs\");\n    }\n    defs.append(\"marker\").attr(\"id\", `arrow-input-${index}`).attr(\"viewBox\", \"0 0 10 10\").attr(\"refX\", 5).attr(\"refY\", 5).attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).attr(\"orient\", \"auto-start-reverse\").append(\"path\").attr(\"d\", \"M 0 0 L 10 5 L 0 10 z\").attr(\"fill\", \"black\").style(\"opacity\", 1);\n    return svgGroup.append(\"line\").attr(\"id\", uniqueId).attr(\"x1\", start.x).attr(\"y1\", start.y).attr(\"x2\", end.x).attr(\"y2\", end.y).attr(\"stroke\", strokeColor).attr(\"stroke-width\", strokeWidth).attr(\"class\", \"input-arrow\").style(\"opacity\", opacity).attr(\"marker-end\", `url(#arrow-input-${index})`);\n  }\n}","map":{"version":3,"names":["FAAddInputInstruction","constructor","input","process","svg","x","y","verticalSpacing","lineGroup","append","attr","createLabel","i","letter","createLine","Promise","resolve","undefined","text","fontSize","is_non_character","fontColor","fontWeight","label","style","index","svgGroup","start","end","strokeColor","strokeWidth","opacity","uniqueId","defs","select","empty"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/fa_add_input_instruction.tsx"],"sourcesContent":["import {Instruction} from \"./i_instruction\";\r\nimport {BaseType, Selection} from \"d3\";\r\n\r\nexport class FAAddInputInstruction implements Instruction {\r\n\r\n    private input: string;\r\n\r\n    constructor(input: string) {\r\n        this.input = input;\r\n    }\r\n\r\n    async process(svg: d3.Selection<BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n        let x = 0;\r\n        let y = 30;\r\n        const verticalSpacing = 30;\r\n\r\n        const lineGroup = svg.append<SVGGElement>(\"g\").attr(\"class\", \"line-group\");\r\n\r\n        this.createLabel(svg, \"Input\", x, y);\r\n        y += verticalSpacing;\r\n        x = 20;\r\n\r\n        let i = 0;\r\n        for (const letter of this.input) {\r\n            this.createLabel(svg, letter, x, y);\r\n            this.createLine(i++, lineGroup, { x: x + 20 + 20, y: y - 5}, { x: x + 20, y: y - 5 });\r\n            y += verticalSpacing;\r\n        }\r\n\r\n        x = 0;\r\n        this.createLabel(svg, \"Accept\", x, y, 24, true, \"green\");\r\n        y += verticalSpacing;\r\n\r\n        this.createLabel(svg, \"Reject\", x, y, 24, true, \"red\");\r\n\r\n        return Promise.resolve(undefined);\r\n    }\r\n\r\n\r\n    createLabel(svg: d3.Selection<BaseType, unknown, HTMLElement, any>, text: string, x: number, y: number, fontSize: number = 24, is_non_character: boolean = false, fontColor: string = \"black\", fontWeight: string = \"normal\"): void {\r\n        const label = svg.append(\"text\")\r\n            .attr(\"class\", \"input-label\")\r\n            .attr(\"x\", x)\r\n            .attr(\"y\", y)\r\n            .attr(\"font-size\", fontSize)\r\n            .attr(\"fill\", fontColor)\r\n            .attr(\"font-weight\", fontWeight);\r\n\r\n        // Handle non-character labels\r\n        if (is_non_character) {\r\n            label\r\n                .attr(\"id\", text)\r\n                .style(\"opacity\", 0);\r\n        } else {\r\n            label.text(text);\r\n        }\r\n    }\r\n\r\n    createLine(\r\n        index: number,\r\n        svgGroup: d3.Selection<SVGGElement, unknown, HTMLElement, any>,\r\n        start: { x: number; y: number },\r\n        end: { x: number; y: number },\r\n        strokeColor: string = \"black\",\r\n        strokeWidth: number = 2,\r\n        opacity: number = 0\r\n    ): d3.Selection<SVGLineElement, unknown, HTMLElement, any> {\r\n        const uniqueId = `input-${index}`;\r\n\r\n        let defs = svgGroup.select<SVGDefsElement>(\"defs\");\r\n        if (defs.empty()) {\r\n            defs = svgGroup.append<SVGDefsElement>(\"defs\");\r\n        }\r\n\r\n        defs.append(\"marker\")\r\n            .attr(\"id\", `arrow-input-${index}`)\r\n            .attr(\"viewBox\", \"0 0 10 10\")\r\n            .attr(\"refX\", 5)\r\n            .attr(\"refY\", 5)\r\n            .attr(\"markerWidth\", 6)\r\n            .attr(\"markerHeight\", 6)\r\n            .attr(\"orient\", \"auto-start-reverse\")\r\n            .append(\"path\")\r\n            .attr(\"d\", \"M 0 0 L 10 5 L 0 10 z\")\r\n            .attr(\"fill\", \"black\")\r\n            .style(\"opacity\", 1);\r\n\r\n        return svgGroup.append(\"line\")\r\n            .attr(\"id\", uniqueId)\r\n            .attr(\"x1\", start.x)\r\n            .attr(\"y1\", start.y)\r\n            .attr(\"x2\", end.x)\r\n            .attr(\"y2\", end.y)\r\n            .attr(\"stroke\", strokeColor)\r\n            .attr(\"stroke-width\", strokeWidth)\r\n            .attr(\"class\", \"input-arrow\")\r\n            .style(\"opacity\", opacity)\r\n            .attr(\"marker-end\", `url(#arrow-input-${index})`);\r\n    }\r\n\r\n\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}