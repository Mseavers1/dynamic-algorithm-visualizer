{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Micha\\\\Documents\\\\GitHub\\\\dynamic-algorithm-visualizer\\\\app\\\\src\\\\components\\\\structures\\\\binary_tree.tsx\";\nimport { animated, useTransition } from \"@react-spring/web\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class BinaryTree {\n  constructor() {\n    this.values = [];\n    this.length = 0;\n  }\n  clear() {\n    this.values = [];\n    this.length = 0;\n  }\n\n  // Returns the id within the array\n  get_parent(nodeID) {\n    if (!Number.isInteger(nodeID)) throw new Error(\"NodeID must be a integer.\");\n    if (this.length <= 0 || nodeID <= 0) return -1;\n    return Math.floor(nodeID / 2) - 1;\n  }\n  is_empty() {\n    return !this.length;\n  }\n  add(value) {\n    this.values.push(value);\n    this.length++;\n  }\n  remove() {\n    if (this.length <= 0) throw new Error(\"Cannot remove from an empty tree.\");\n    this.length--;\n    return this.values.pop();\n  }\n  size() {\n    return this.length;\n  }\n  get(nodeID) {\n    if (!Number.isInteger(nodeID)) throw new Error(\"NodeID must be a integer.\");\n    if (nodeID > this.length || nodeID <= 0) return null;\n    return this.values[nodeID - 1];\n  }\n  AnimatedTree() {\n    const nodeTransitions = useTransition(this.values, {\n      keys: item => item,\n      // Use the item itself as the key (item is of type string | number)\n      from: {\n        opacity: 0,\n        transform: 'scale(0)'\n      },\n      enter: {\n        opacity: 1,\n        transform: 'scale(1)'\n      },\n      leave: {\n        opacity: 0,\n        transform: 'scale(0)'\n      }\n    });\n    const getNodePosition = index => {\n      const x = 100 + index * 150; // Example horizontal position\n      const y = 100; // All nodes aligned at the same vertical position\n      return {\n        x,\n        y\n      };\n    };\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      children: nodeTransitions((style, node, index) => {\n        const posIndex = index;\n        const {\n          x,\n          y\n        } = getNodePosition(posIndex);\n        return /*#__PURE__*/_jsxDEV(animated.g, {\n          style: style,\n          children: [posIndex > 0 && /*#__PURE__*/_jsxDEV(animated.line, {\n            x1: getNodePosition(Math.floor((posIndex - 1) / 2)).x,\n            y1: getNodePosition(Math.floor((posIndex - 1) / 2)).y,\n            x2: x,\n            y2: y,\n            stroke: \"black\",\n            strokeWidth: \"2\",\n            style: {\n              strokeOpacity: 1\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: x,\n            cy: y,\n            r: 30,\n            fill: \"steelblue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            x: x,\n            y: y,\n            dy: 5,\n            textAnchor: \"middle\",\n            fill: \"white\",\n            fontSize: \"12\",\n            children: node\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 29\n          }, this)]\n        }, node, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["animated","useTransition","React","jsxDEV","_jsxDEV","BinaryTree","constructor","values","length","clear","get_parent","nodeID","Number","isInteger","Error","Math","floor","is_empty","add","value","push","remove","pop","size","get","AnimatedTree","nodeTransitions","keys","item","from","opacity","transform","enter","leave","getNodePosition","index","x","y","children","style","node","posIndex","g","line","x1","y1","x2","y2","stroke","strokeWidth","strokeOpacity","fileName","_jsxFileName","lineNumber","columnNumber","cx","cy","r","fill","dy","textAnchor","fontSize"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/structures/binary_tree.tsx"],"sourcesContent":["import {ITree} from \"./ITree\";\r\nimport {animated, useTransition} from \"@react-spring/web\";\r\nimport React from \"react\";\r\n\r\nexport class BinaryTree implements ITree {\r\n\r\n    values : (string | number)[] = [];\r\n    length : number = 0;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    clear(): void {\r\n        this.values = [];\r\n        this.length = 0;\r\n    }\r\n\r\n    // Returns the id within the array\r\n    get_parent(nodeID: number): number {\r\n\r\n        if (!Number.isInteger(nodeID)) throw new Error(\"NodeID must be a integer.\");\r\n\r\n        if (this.length <= 0 || nodeID <= 0) return -1;\r\n\r\n        return Math.floor(nodeID / 2) - 1;\r\n    }\r\n\r\n    is_empty(): boolean {\r\n        return !this.length;\r\n    }\r\n\r\n    add(value : string | number) : void {\r\n        this.values.push(value);\r\n        this.length++;\r\n    }\r\n\r\n    remove(): string | number {\r\n\r\n        if (this.length <= 0) throw new Error(\"Cannot remove from an empty tree.\")\r\n\r\n        this.length--;\r\n        return this.values.pop() as string | number;\r\n    }\r\n\r\n    size(): number {\r\n        return this.length;\r\n    }\r\n\r\n    get(nodeID: number): number | string | null {\r\n\r\n        if (!Number.isInteger(nodeID)) throw new Error(\"NodeID must be a integer.\");\r\n\r\n        if (nodeID > this.length || nodeID <= 0) return null;\r\n\r\n        return this.values[nodeID - 1];\r\n\r\n    }\r\n\r\n    AnimatedTree(): JSX.Element {\r\n\r\n        const nodeTransitions = useTransition(this.values, {\r\n            keys: (item) => item, // Use the item itself as the key (item is of type string | number)\r\n            from: {opacity: 0, transform: 'scale(0)'},\r\n            enter: {opacity: 1, transform: 'scale(1)'},\r\n            leave: {opacity: 0, transform: 'scale(0)'},\r\n        });\r\n\r\n        const getNodePosition = (index: number) => {\r\n            const x = 100 + index * 150; // Example horizontal position\r\n            const y = 100; // All nodes aligned at the same vertical position\r\n            return {x, y};\r\n        };\r\n\r\n        return (\r\n            <g>\r\n                {nodeTransitions((style, node, index) => {\r\n                    const posIndex = index as unknown as number;\r\n                    const {x, y} = getNodePosition(posIndex);\r\n                    return (\r\n                        <animated.g key={node} style={style}>\r\n                            {posIndex > 0 && (\r\n                                <animated.line\r\n                                    x1={getNodePosition(Math.floor((posIndex - 1) / 2)).x}\r\n                                    y1={getNodePosition(Math.floor((posIndex - 1) / 2)).y}\r\n                                    x2={x}\r\n                                    y2={y}\r\n                                    stroke=\"black\"\r\n                                    strokeWidth=\"2\"\r\n                                    style={{strokeOpacity: 1}}\r\n                                />\r\n                            )}\r\n                            <circle cx={x} cy={y} r={30} fill=\"steelblue\"/>\r\n                            <text x={x} y={y} dy={5} textAnchor=\"middle\" fill=\"white\" fontSize=\"12\">\r\n                                {node}\r\n                            </text>\r\n                        </animated.g>\r\n                    );\r\n                })}\r\n            </g>\r\n        );\r\n    }\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}