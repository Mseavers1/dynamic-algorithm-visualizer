{"ast":null,"code":"import{Node}from\"../pictures/node\";export class TreeAddAllInstruction{constructor(elements,nodes){this.elements=void 0;this.nodes=void 0;this.getNodePosition=index=>{if(index<0||isNaN(index))return{x:0,y:0};if(index===0)return{x:250,y:50};// Root at the center\nconst depth=Math.floor(Math.log2(index+1));// Get depth in the tree\nconst xSpacing=200/(depth+1);// Adjust x spacing\nconst ySpacing=80;// Vertical spacing\nconst parentIndex=Math.floor((index-1)/2);const parentPos=this.getNodePosition(parentIndex);const isLeftChild=index%2===1;const xOffset=isLeftChild?-xSpacing:xSpacing;return{x:parentPos.x+xOffset,y:parentPos.y+ySpacing};};this.nodes=nodes;this.elements=elements;}async process(svg){let currentIndex=0;let transitions=[];for(const element of this.elements){const position=this.getNodePosition(currentIndex);const parentIndex=Math.floor((currentIndex-1)/2);const hasParent=parentIndex>=0;let nodesGroup=svg.select(\"g.nodes\");let edgesGroup=svg.select(\"g.edges\");if(edgesGroup.empty()){edgesGroup=svg.append(\"g\").attr(\"class\",\"edges\");}if(nodesGroup.empty()){nodesGroup=svg.append(\"g\").attr(\"class\",\"nodes\");}let edge=null;if(hasParent){const parentPos=this.getNodePosition(parentIndex);edge=edgesGroup.append(\"line\").attr(\"x1\",parentPos.x).attr(\"y1\",parentPos.y).attr(\"x2\",200).attr(\"y2\",200).attr(\"stroke\",\"black\").attr(\"stroke-width\",5).style(\"opacity\",0);}// Creates the circle node on screen\nconst nodeElement=nodesGroup.append(\"circle\").attr(\"cx\",200).attr(\"cy\",200).attr(\"r\",20).attr(\"class\",\"node\").style(\"opacity\",0);// Creates the text label on screen\nconst label=nodesGroup.append(\"text\").attr(\"x\",200).attr(\"y\",200).attr(\"class\",\"label\").attr(\"text-anchor\",\"middle\").attr(\"alignment-baseline\",\"middle\").style(\"fill\",\"white\").style(\"font-size\",\"12px\").text(element);const nodeTransition=nodeElement.transition().duration(1000).style(\"opacity\",1).attr(\"cx\",position.x).attr(\"cy\",position.y);const labelTransition=label.transition().duration(1000).style(\"opacity\",1).attr(\"x\",position.x).attr(\"y\",position.y);if(edge){const edgeTransition=edge.transition().duration(1000).style(\"opacity\",1).attr(\"x2\",position.x).attr(\"y2\",position.y);transitions.push(edgeTransition.end());}this.nodes.push(new Node(element,currentIndex,nodeElement,edge,label));transitions.push(nodeTransition.end(),labelTransition.end());currentIndex+=1;}await Promise.all(transitions);/*let s = \"\"\r\n        for (const n of this.nodes) {\r\n            s += n.value + \" \"\r\n        }\r\n\r\n        alert(s)*/}}","map":{"version":3,"names":["Node","TreeAddAllInstruction","constructor","elements","nodes","getNodePosition","index","isNaN","x","y","depth","Math","floor","log2","xSpacing","ySpacing","parentIndex","parentPos","isLeftChild","xOffset","process","svg","currentIndex","transitions","element","position","hasParent","nodesGroup","select","edgesGroup","empty","append","attr","edge","style","nodeElement","label","text","nodeTransition","transition","duration","labelTransition","edgeTransition","push","end","Promise","all"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/tree_add_all_instruction.tsx"],"sourcesContent":["import {Node} from \"../pictures/node\";\r\nimport {Instruction} from \"./i_instruction\";\r\nimport {BaseType, Selection} from \"d3\";\r\nimport * as d3 from \"d3\";\r\n\r\nexport class TreeAddAllInstruction implements Instruction {\r\n\r\n    elements: (string | number)[];\r\n    nodes: Node[];\r\n\r\n    constructor(elements: (string | number)[], nodes: Node[]) {\r\n        this.nodes = nodes;\r\n        this.elements = elements;\r\n    }\r\n\r\n    async process(svg: Selection<BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n\r\n        let currentIndex = 0;\r\n        let transitions = [];\r\n\r\n        for (const element of this.elements) {\r\n\r\n            const position = this.getNodePosition(currentIndex);\r\n            const parentIndex = Math.floor((currentIndex - 1) / 2);\r\n            const hasParent = parentIndex >= 0;\r\n\r\n            let nodesGroup = svg.select<SVGGElement>(\"g.nodes\");\r\n            let edgesGroup = svg.select<SVGGElement>(\"g.edges\");\r\n\r\n            if (edgesGroup.empty()) {\r\n                edgesGroup = svg.append(\"g\").attr(\"class\", \"edges\");\r\n            }\r\n\r\n            if (nodesGroup.empty()) {\r\n                nodesGroup = svg.append(\"g\").attr(\"class\", \"nodes\");\r\n            }\r\n\r\n            let edge: d3.Selection<SVGLineElement, unknown, HTMLElement, any> | null = null;\r\n\r\n            if (hasParent) {\r\n                const parentPos = this.getNodePosition(parentIndex as number);\r\n                edge = edgesGroup.append(\"line\")\r\n                    .attr(\"x1\", parentPos.x)\r\n                    .attr(\"y1\", parentPos.y)\r\n                    .attr(\"x2\", 200)\r\n                    .attr(\"y2\", 200)\r\n                    .attr(\"stroke\", \"black\")\r\n                    .attr(\"stroke-width\", 5)\r\n                    .style(\"opacity\", 0);\r\n            }\r\n\r\n            // Creates the circle node on screen\r\n            const nodeElement = nodesGroup.append(\"circle\")\r\n                .attr(\"cx\", 200)\r\n                .attr(\"cy\", 200)\r\n                .attr(\"r\", 20)\r\n                .attr(\"class\", \"node\")\r\n                .style(\"opacity\", 0);\r\n\r\n            // Creates the text label on screen\r\n            const label = nodesGroup.append(\"text\")\r\n                .attr(\"x\", 200)\r\n                .attr(\"y\", 200)\r\n                .attr(\"class\", \"label\")\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .attr(\"alignment-baseline\", \"middle\")\r\n                .style(\"fill\", \"white\")\r\n                .style(\"font-size\", \"12px\")\r\n                .text(element);\r\n\r\n            const nodeTransition = nodeElement.transition()\r\n                .duration(1000)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"cx\", position.x)\r\n                .attr(\"cy\", position.y)\r\n\r\n            const labelTransition = label.transition()\r\n                .duration(1000)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"x\", position.x)\r\n                .attr(\"y\", position.y)\r\n\r\n            if (edge) {\r\n                const edgeTransition = edge.transition()\r\n                    .duration(1000)\r\n                    .style(\"opacity\", 1)\r\n                    .attr(\"x2\", position.x)\r\n                    .attr(\"y2\", position.y);\r\n\r\n                transitions.push(edgeTransition.end());\r\n            }\r\n\r\n            this.nodes.push(new Node(element, currentIndex, nodeElement, edge, label))\r\n            transitions.push(nodeTransition.end(), labelTransition.end());\r\n\r\n            currentIndex += 1;\r\n        }\r\n\r\n        await Promise.all(transitions);\r\n\r\n        /*let s = \"\"\r\n        for (const n of this.nodes) {\r\n            s += n.value + \" \"\r\n        }\r\n\r\n        alert(s)*/\r\n    }\r\n\r\n    getNodePosition = (index: number): { x: number, y: number } => {\r\n        if (index < 0 || isNaN(index)) return { x: 0, y: 0 };\r\n        if (index === 0) return { x: 250, y: 50 }; // Root at the center\r\n\r\n        const depth = Math.floor(Math.log2(index + 1)); // Get depth in the tree\r\n        const xSpacing = (200) / (depth + 1); // Adjust x spacing\r\n        const ySpacing = 80; // Vertical spacing\r\n\r\n        const parentIndex = Math.floor((index - 1) / 2);\r\n        const parentPos = this.getNodePosition(parentIndex);\r\n\r\n        const isLeftChild = index % 2 === 1;\r\n        const xOffset = isLeftChild ? -xSpacing : xSpacing;\r\n\r\n        return { x: parentPos.x + xOffset, y: parentPos.y + ySpacing };\r\n    };\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}