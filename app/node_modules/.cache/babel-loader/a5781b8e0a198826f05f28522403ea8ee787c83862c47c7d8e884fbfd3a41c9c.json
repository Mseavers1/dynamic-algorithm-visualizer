{"ast":null,"code":"export class FATransition {\n  constructor(animator) {\n    this.animator = void 0;\n    this.old = \"\";\n    this.nx = \"\";\n    this.states = void 0;\n    this.animator = animator;\n    this.states = {};\n  }\n  parse(area) {\n    // Is code valid?\n    const lines = area.split(\"\\n\");\n    lines.forEach(line => {});\n  }\n  clear() {}\n  delete(value) {}\n  generate_random(min, max, size, allowStrings, allowNumbers, allowDecimal, maxDecimal, regex, stringLengthMin, stringLengthMax) {}\n  insert(value) {}\n}","map":{"version":3,"names":["FATransition","constructor","animator","old","nx","states","parse","area","lines","split","forEach","line","clear","delete","value","generate_random","min","max","size","allowStrings","allowNumbers","allowDecimal","maxDecimal","regex","stringLengthMin","stringLengthMax","insert"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/algorithms/fa_transition.tsx"],"sourcesContent":["import {Algorithm} from \"./algorithm_interface\";\r\nimport {AnimationPlayer} from \"../animation_player\";\r\nimport {BinaryTree} from \"../structures/binary_tree\";\r\n\r\ntype stateValues = {\r\n    state: string;\r\n    value: string;\r\n}\r\n\r\nexport class FATransition implements Algorithm {\r\n\r\n    private animator: AnimationPlayer;\r\n    private old: string = \"\";\r\n    private nx: string = \"\";\r\n\r\n    private states: Record<string, stateValues[]>;\r\n\r\n    constructor(\r\n        animator: AnimationPlayer,\r\n    ) {\r\n        this.animator = animator;\r\n        this.states = {};\r\n    }\r\n\r\n    parse(area: string) {\r\n\r\n        // Is code valid?\r\n        const lines = area.split(\"\\n\");\r\n\r\n        lines.forEach((line) => {\r\n\r\n        })\r\n\r\n    }\r\n\r\n    clear(): void {\r\n    }\r\n\r\n    delete(value: string | number): void {\r\n    }\r\n\r\n    generate_random(min: number, max: number, size: number, allowStrings: boolean, allowNumbers: boolean, allowDecimal: boolean, maxDecimal: number, regex: string, stringLengthMin: number, stringLengthMax: number): void {\r\n    }\r\n\r\n    insert(value: string | number): void {\r\n    }\r\n\r\n}"],"mappings":"AASA,OAAO,MAAMA,YAAY,CAAsB;EAQ3CC,WAAWA,CACPC,QAAyB,EAC3B;IAAA,KARMA,QAAQ;IAAA,KACRC,GAAG,GAAW,EAAE;IAAA,KAChBC,EAAE,GAAW,EAAE;IAAA,KAEfC,MAAM;IAKV,IAAI,CAACH,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACG,MAAM,GAAG,CAAC,CAAC;EACpB;EAEAC,KAAKA,CAACC,IAAY,EAAE;IAEhB;IACA,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC;IAE9BD,KAAK,CAACE,OAAO,CAAEC,IAAI,IAAK,CAExB,CAAC,CAAC;EAEN;EAEAC,KAAKA,CAAA,EAAS,CACd;EAEAC,MAAMA,CAACC,KAAsB,EAAQ,CACrC;EAEAC,eAAeA,CAACC,GAAW,EAAEC,GAAW,EAAEC,IAAY,EAAEC,YAAqB,EAAEC,YAAqB,EAAEC,YAAqB,EAAEC,UAAkB,EAAEC,KAAa,EAAEC,eAAuB,EAAEC,eAAuB,EAAQ,CACxN;EAEAC,MAAMA,CAACZ,KAAsB,EAAQ,CACrC;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}