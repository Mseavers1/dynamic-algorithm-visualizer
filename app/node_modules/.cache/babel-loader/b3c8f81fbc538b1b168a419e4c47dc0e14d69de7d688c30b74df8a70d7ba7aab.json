{"ast":null,"code":"export class FAHighlightInstruction {\n  constructor(value) {}\n  process(svg) {\n    const line = svg.select(\"#line-0\");\n    const markerId = \"arrow-0\";\n\n    // Ensure the line and marker exist\n    if (!line.empty()) {\n      console.log(\"Line found, applying transition...\");\n\n      // Apply transition to the line and attach the marker\n      line.transition().duration(1000).attr(\"stroke\", \"red\").attr(\"stroke-width\", 2).attr(\"marker-end\", `url(#${markerId})`) // Attach the correct marker ID\n      .on(\"end\", function () {\n        // Now, select and modify the arrowhead\n        const arrowPath = svg.select(`#${markerId} path`);\n        if (!arrowPath.empty()) {\n          console.log(\"Arrow path found, applying color...\");\n          arrowPath.transition().duration(1000).attr(\"fill\", \"red\"); // Change the arrowhead color\n        } else {\n          console.log(\"Arrow path not found.\");\n        }\n      });\n    } else {\n      console.log(\"Line #line-0 not found.\");\n    }\n    return Promise.resolve();\n  }\n}","map":{"version":3,"names":["FAHighlightInstruction","constructor","value","process","svg","line","select","markerId","empty","console","log","transition","duration","attr","on","arrowPath","Promise","resolve"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/highlight_fa_node_instruction.tsx"],"sourcesContent":["import {Instruction} from \"./i_instruction\";\r\nimport d3, {BaseType, Selection} from \"d3\";\r\n\r\nexport class FAHighlightInstruction implements Instruction {\r\n\r\n    constructor(value: string | number) {\r\n\r\n    }\r\n\r\n    process(svg: d3.Selection<d3.BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n        const line = svg.select(\"#line-0\");\r\n        const markerId = \"arrow-0\";\r\n\r\n        // Ensure the line and marker exist\r\n        if (!line.empty()) {\r\n            console.log(\"Line found, applying transition...\");\r\n\r\n            // Apply transition to the line and attach the marker\r\n            line.transition()\r\n                .duration(1000)\r\n                .attr(\"stroke\", \"red\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"marker-end\", `url(#${markerId})`)  // Attach the correct marker ID\r\n                .on(\"end\", function() {\r\n                    // Now, select and modify the arrowhead\r\n                    const arrowPath = svg.select(`#${markerId} path`);\r\n\r\n                    if (!arrowPath.empty()) {\r\n                        console.log(\"Arrow path found, applying color...\");\r\n                        arrowPath.transition()\r\n                            .duration(1000)\r\n                            .attr(\"fill\", \"red\");  // Change the arrowhead color\r\n                    } else {\r\n                        console.log(\"Arrow path not found.\");\r\n                    }\r\n                });\r\n        } else {\r\n            console.log(\"Line #line-0 not found.\");\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n\r\n}"],"mappings":"AAGA,OAAO,MAAMA,sBAAsB,CAAwB;EAEvDC,WAAWA,CAACC,KAAsB,EAAE,CAEpC;EAEAC,OAAOA,CAACC,GAAyD,EAAiB;IAC9E,MAAMC,IAAI,GAAGD,GAAG,CAACE,MAAM,CAAC,SAAS,CAAC;IAClC,MAAMC,QAAQ,GAAG,SAAS;;IAE1B;IACA,IAAI,CAACF,IAAI,CAACG,KAAK,CAAC,CAAC,EAAE;MACfC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;;MAEjD;MACAL,IAAI,CAACM,UAAU,CAAC,CAAC,CACZC,QAAQ,CAAC,IAAI,CAAC,CACdC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CACrBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBA,IAAI,CAAC,YAAY,EAAE,QAAQN,QAAQ,GAAG,CAAC,CAAE;MAAA,CACzCO,EAAE,CAAC,KAAK,EAAE,YAAW;QAClB;QACA,MAAMC,SAAS,GAAGX,GAAG,CAACE,MAAM,CAAC,IAAIC,QAAQ,OAAO,CAAC;QAEjD,IAAI,CAACQ,SAAS,CAACP,KAAK,CAAC,CAAC,EAAE;UACpBC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;UAClDK,SAAS,CAACJ,UAAU,CAAC,CAAC,CACjBC,QAAQ,CAAC,IAAI,CAAC,CACdC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAE;QAC/B,CAAC,MAAM;UACHJ,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;QACxC;MACJ,CAAC,CAAC;IACV,CAAC,MAAM;MACHD,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IAC1C;IAEA,OAAOM,OAAO,CAACC,OAAO,CAAC,CAAC;EAC5B;AAGJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}