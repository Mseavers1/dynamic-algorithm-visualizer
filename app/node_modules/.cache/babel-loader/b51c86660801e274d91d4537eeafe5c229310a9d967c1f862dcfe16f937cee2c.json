{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Micha\\\\Documents\\\\GitHub\\\\dynamic-algorithm-visualizer\\\\app\\\\src\\\\components\\\\algorithms\\\\min_heap.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { animated, useTransition } from \"@react-spring/web\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MinHeap = {\n  values: [],\n  insert(value) {\n    this.values.push(value);\n  },\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"500\",\n      height: \"500\",\n      children: /*#__PURE__*/_jsxDEV(AnimatedTree, {\n        values: this.values\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this);\n  }\n};\nconst AnimatedTree = ({\n  values\n}) => {\n  _s();\n  const nodeTransitions = useTransition(values, {\n    keys: item => `${item}`,\n    // Ensure unique keys for each item\n    from: {\n      opacity: 0,\n      transform: 'scale(0)'\n    },\n    enter: {\n      opacity: 1,\n      transform: 'scale(1)'\n    },\n    leave: {\n      opacity: 0,\n      transform: 'scale(0)'\n    }\n  });\n  const getNodePosition = index => {\n    const x = 100 + index * 150; // Example horizontal position\n    const y = 100; // All nodes aligned at the same vertical position\n    return {\n      x,\n      y\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    children: nodeTransitions((style, node, index) => {\n      const posIndex = index; // Ensure index is treated as a number\n      const {\n        x,\n        y\n      } = getNodePosition(posIndex); // Get position for each node\n      return /*#__PURE__*/_jsxDEV(animated.g, {\n        style: style,\n        children: [posIndex > 0 && /*#__PURE__*/_jsxDEV(animated.line, {\n          x1: getNodePosition(Math.floor((posIndex - 1) / 2)).x // Parent's x\n          ,\n          y1: getNodePosition(Math.floor((posIndex - 1) / 2)).y // Parent's y\n          ,\n          x2: x,\n          y2: y,\n          stroke: \"black\",\n          strokeWidth: \"2\",\n          style: {\n            strokeOpacity: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: x,\n          cy: y,\n          r: 30,\n          fill: \"steelblue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: x,\n          y: y,\n          dy: 5,\n          textAnchor: \"middle\",\n          fill: \"white\",\n          fontSize: \"12\",\n          children: node\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this)]\n      }, node, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(AnimatedTree, \"7q9XJ/T8qFFFTlXCAVzO9hMqO4s=\", false, function () {\n  return [useTransition];\n});\n_c = AnimatedTree;\nvar _c;\n$RefreshReg$(_c, \"AnimatedTree\");","map":{"version":3,"names":["React","animated","useTransition","jsxDEV","_jsxDEV","MinHeap","values","insert","value","push","render","width","height","children","AnimatedTree","fileName","_jsxFileName","lineNumber","columnNumber","_s","nodeTransitions","keys","item","from","opacity","transform","enter","leave","getNodePosition","index","x","y","style","node","posIndex","g","line","x1","Math","floor","y1","x2","y2","stroke","strokeWidth","strokeOpacity","cx","cy","r","fill","dy","textAnchor","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/algorithms/min_heap.tsx"],"sourcesContent":["import { Algorithm } from \"./algorithm_interface\";\r\nimport {BinaryTree} from \"../structures/binary_tree\";\r\nimport React, {useState} from \"react\";\r\nimport {animated, useTransition} from \"@react-spring/web\";\r\n\r\nexport const MinHeap: Algorithm = {\r\n\r\n    values: [] as (number | string)[],\r\n\r\n    insert(value: string | number) {\r\n        this.values.push(value);\r\n    },\r\n\r\n    render(): JSX.Element {\r\n\r\n        return (\r\n            <svg width=\"500\" height=\"500\">\r\n                <AnimatedTree values={this.values}/>\r\n            </svg>\r\n        );\r\n    }\r\n};\r\n\r\nconst AnimatedTree = ({values}: {values : (string | number)[]}) => {\r\n\r\n    const nodeTransitions = useTransition(values, {\r\n        keys: (item) => `${item}`,  // Ensure unique keys for each item\r\n        from: { opacity: 0, transform: 'scale(0)' },\r\n        enter: { opacity: 1, transform: 'scale(1)' },\r\n        leave: { opacity: 0, transform: 'scale(0)' },\r\n    });\r\n\r\n    const getNodePosition = (index: number) => {\r\n        const x = 100 + index * 150;  // Example horizontal position\r\n        const y = 100;  // All nodes aligned at the same vertical position\r\n        return { x, y };\r\n    };\r\n\r\n    return (\r\n        <g>\r\n            {/* Render the animated nodes */}\r\n            {nodeTransitions((style, node, index) => {\r\n                const posIndex = index as unknown as number; // Ensure index is treated as a number\r\n                const {x, y} = getNodePosition(posIndex); // Get position for each node\r\n                return (\r\n                    <animated.g key={node} style={style}>\r\n                        {/* Render edges (lines) */}\r\n                        {posIndex > 0 && (\r\n                            <animated.line\r\n                                x1={getNodePosition(Math.floor((posIndex - 1) / 2)).x} // Parent's x\r\n                                y1={getNodePosition(Math.floor((posIndex - 1) / 2)).y} // Parent's y\r\n                                x2={x}\r\n                                y2={y}\r\n                                stroke=\"black\"\r\n                                strokeWidth=\"2\"\r\n                                style={{strokeOpacity: 1}}\r\n                            />\r\n                        )}\r\n\r\n                        {/* Render node (circle) */}\r\n                        <circle cx={x} cy={y} r={30} fill=\"steelblue\"/>\r\n                        <text x={x} y={y} dy={5} textAnchor=\"middle\" fill=\"white\" fontSize=\"12\">\r\n                            {node}\r\n                        </text>\r\n                    </animated.g>\r\n                );\r\n            })}\r\n        </g>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}