{"ast":null,"code":"export class FAAddAllInstruction {\n  constructor(graph) {\n    this.graph = void 0;\n    this.graph = graph;\n  }\n  async process(svg) {\n    const nodeTransitions = [];\n    const labelTransitions = [];\n    const linesGroup = svg.append(\"g\").attr(\"id\", \"lines\");\n    const nodesGroup = svg.append(\"g\");\n    let indexNodes = new Map();\n    let index = 0;\n    const total = this.graph.get_nodes().size;\n\n    // Draw all nodes\n    this.graph.get_nodes().forEach((node, value) => {\n      const pos = this.getPosition(index, total, 350, 200);\n      const current_node = this.createNode(nodesGroup, pos.x, pos.y);\n      const label = this.createLabel(nodesGroup, pos, value);\n      const node_transition = this.applyNodeTransition(current_node, pos);\n      const label_transition = this.applyLabelTransition(label, pos);\n      indexNodes.set(value, [index++, current_node]);\n      nodeTransitions.push(node_transition);\n      labelTransitions.push(label_transition);\n    });\n\n    // Draw connectors\n    this.graph.get_nodes().forEach((node, value) => {\n      let pointers = this.graph.get_pointers(value);\n      if (pointers != null && pointers.size > 0) {\n        const entry = indexNodes.get(value);\n        if (!entry) return; // safety check\n\n        const [index, currentNode] = entry;\n        const current_node_pos = this.getPosition(index, total, 350, 200);\n        pointers.forEach((weights, pointer) => {\n          const targetEntry = indexNodes.get(pointer.get_value());\n          if (!targetEntry) return;\n          const [targetIndex, _] = targetEntry;\n          const target_node_pos = this.getPosition(targetIndex, total, 350, 200);\n\n          //this.createLine(linesGroup, current_node_pos, target_node_pos);\n          this.createCurvedLine(linesGroup, current_node_pos, target_node_pos);\n        });\n      }\n    });\n    await Promise.all([...nodeTransitions, ...labelTransitions]);\n  }\n  createCurvedLine(group, from, to, curvature = 0.3 // adjust this to curve more or less\n  ) {\n    // Midpoint between from and to\n    const midX = (from.x + to.x) / 2;\n    const midY = (from.y + to.y) / 2;\n\n    // Offset for the curve (perpendicular to the line)\n    const dx = to.x - from.x;\n    const dy = to.y - from.y;\n    const norm = Math.sqrt(dx * dx + dy * dy);\n    const offsetX = -dy * curvature;\n    const offsetY = dx * curvature;\n    const controlX = midX + offsetX;\n    const controlY = midY + offsetY;\n    const pathData = `M ${from.x} ${from.y} Q ${controlX} ${controlY}, ${to.x} ${to.y}`;\n    return group.append(\"path\").attr(\"d\", pathData).attr(\"fill\", \"none\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 2);\n  }\n  createLine(svgGroup, start, end, strokeColor = \"black\", strokeWidth = 2, opacity = 1) {\n    return svgGroup.append(\"line\").attr(\"x1\", start.x).attr(\"y1\", start.y).attr(\"x2\", end.x).attr(\"y2\", end.y).attr(\"stroke\", strokeColor).attr(\"stroke-width\", strokeWidth).style(\"opacity\", opacity);\n  }\n  createLabel(nodesGroup, position, txt) {\n    return nodesGroup.append(\"text\").attr(\"x\", position.x).attr(\"y\", position.y).attr(\"class\", \"label\").attr(\"text-anchor\", \"middle\").attr(\"alignment-baseline\", \"middle\").style(\"fill\", \"black\").style(\"font-size\", \"20px\").text(txt);\n  }\n  createNode(nodesGroup, cx, cy, r = 20, className = \"node\", opacity = 0) {\n    return nodesGroup.append(\"circle\").attr(\"cx\", cx).attr(\"cy\", cy).attr(\"r\", r).attr(\"class\", className).style(\"opacity\", opacity);\n  }\n  applyNodeTransition(node, position, duration = 1000) {\n    return new Promise(resolve => {\n      node.transition().duration(duration).attr(\"cx\", position.x).attr(\"cy\", position.y).style(\"opacity\", 1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"fill\", \"white\").on(\"end\", () => resolve());\n    });\n  }\n  applyLabelTransition(label, position, duration = 1000) {\n    return new Promise(resolve => {\n      label.transition().duration(duration).style(\"opacity\", 1).attr(\"x\", position.x).attr(\"y\", position.y).on(\"end\", () => resolve());\n    });\n  }\n\n  // Gets the position in a shaped form\n  getPosition(index, numberOfNodes, centerX, centerY, radius = 100) {\n    const angle = 2 * Math.PI * index / numberOfNodes;\n\n    // Calculate x and y coordinates using polar to Cartesian conversion\n    const x = radius * Math.cos(angle);\n    const y = radius * Math.sin(angle);\n    return {\n      x: x + centerX,\n      y: y + centerY\n    };\n  }\n}","map":{"version":3,"names":["FAAddAllInstruction","constructor","graph","process","svg","nodeTransitions","labelTransitions","linesGroup","append","attr","nodesGroup","indexNodes","Map","index","total","get_nodes","size","forEach","node","value","pos","getPosition","current_node","createNode","x","y","label","createLabel","node_transition","applyNodeTransition","label_transition","applyLabelTransition","set","push","pointers","get_pointers","entry","get","currentNode","current_node_pos","weights","pointer","targetEntry","get_value","targetIndex","_","target_node_pos","createCurvedLine","Promise","all","group","from","to","curvature","midX","midY","dx","dy","norm","Math","sqrt","offsetX","offsetY","controlX","controlY","pathData","createLine","svgGroup","start","end","strokeColor","strokeWidth","opacity","style","position","txt","text","cx","cy","r","className","duration","resolve","transition","on","numberOfNodes","centerX","centerY","radius","angle","PI","cos","sin"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/fa_add_all_instruction.tsx"],"sourcesContent":["import {Instruction} from \"./i_instruction\";\r\nimport {BaseType, Selection} from \"d3\";\r\nimport {FA_Graph} from \"../structures/fa_graph\";\r\n\r\nexport class FAAddAllInstruction implements Instruction {\r\n\r\n    private graph: FA_Graph;\r\n\r\n    constructor(graph: FA_Graph) {\r\n        this.graph = graph;\r\n    }\r\n\r\n    async process(svg: Selection<BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n        const nodeTransitions: Promise<void>[] = [];\r\n        const labelTransitions: Promise<void>[] = [];\r\n        const linesGroup = svg.append(\"g\").attr(\"id\", \"lines\") as unknown as d3.Selection<SVGGElement, unknown, null, undefined>;\r\n\r\n        const nodesGroup = (svg.append(\"g\") as unknown) as Selection<SVGGElement, unknown, null, undefined>;\r\n\r\n        let indexNodes: Map<string | number, [number, d3.Selection<SVGCircleElement, unknown, null, undefined>]> = new Map();\r\n        let index = 0;\r\n        const total = this.graph.get_nodes().size;\r\n\r\n        // Draw all nodes\r\n        this.graph.get_nodes().forEach((node, value) => {\r\n            const pos = this.getPosition(index, total, 350, 200);\r\n            const current_node = this.createNode(nodesGroup, pos.x, pos.y);\r\n            const label = this.createLabel(nodesGroup, pos, value as string)\r\n            const node_transition = this.applyNodeTransition(current_node, pos);\r\n            const label_transition = this.applyLabelTransition(label, pos);\r\n\r\n            indexNodes.set(value, [index++, current_node]);\r\n            nodeTransitions.push(node_transition);\r\n            labelTransitions.push(label_transition);\r\n        });\r\n\r\n        // Draw connectors\r\n        this.graph.get_nodes().forEach((node, value) => {\r\n\r\n            let pointers = this.graph.get_pointers(value);\r\n\r\n            if (pointers != null && pointers.size > 0) {\r\n\r\n                const entry = indexNodes.get(value);\r\n                if (!entry) return; // safety check\r\n\r\n                const [index, currentNode] = entry;\r\n                const current_node_pos = this.getPosition(index, total, 350, 200);\r\n\r\n                pointers.forEach((weights, pointer) => {\r\n                    const targetEntry = indexNodes.get(pointer.get_value());\r\n                    if (!targetEntry) return;\r\n\r\n                    const [targetIndex, _] = targetEntry;\r\n                    const target_node_pos = this.getPosition(targetIndex, total, 350, 200);\r\n\r\n                    //this.createLine(linesGroup, current_node_pos, target_node_pos);\r\n                    this.createCurvedLine(linesGroup, current_node_pos, target_node_pos)\r\n                });\r\n            }\r\n        });\r\n\r\n\r\n\r\n\r\n        await Promise.all([...nodeTransitions, ...labelTransitions]);\r\n    }\r\n\r\n    createCurvedLine(\r\n        group: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n        from: { x: number, y: number },\r\n        to: { x: number, y: number },\r\n        curvature: number = 0.3 // adjust this to curve more or less\r\n    ): d3.Selection<SVGPathElement, unknown, null, undefined> {\r\n\r\n        // Midpoint between from and to\r\n        const midX = (from.x + to.x) / 2;\r\n        const midY = (from.y + to.y) / 2;\r\n\r\n        // Offset for the curve (perpendicular to the line)\r\n        const dx = to.x - from.x;\r\n        const dy = to.y - from.y;\r\n        const norm = Math.sqrt(dx * dx + dy * dy);\r\n        const offsetX = -dy * curvature;\r\n        const offsetY = dx * curvature;\r\n\r\n        const controlX = midX + offsetX;\r\n        const controlY = midY + offsetY;\r\n\r\n        const pathData = `M ${from.x} ${from.y} Q ${controlX} ${controlY}, ${to.x} ${to.y}`;\r\n\r\n        return group.append(\"path\")\r\n            .attr(\"d\", pathData)\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke\", \"black\")\r\n            .attr(\"stroke-width\", 2);\r\n    }\r\n\r\n\r\n    createLine(\r\n        svgGroup: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n        start: { x: number; y: number },\r\n        end: { x: number; y: number },\r\n        strokeColor: string = \"black\",\r\n        strokeWidth: number = 2,\r\n        opacity: number = 1\r\n    ): d3.Selection<SVGLineElement, unknown, null, undefined> {\r\n        return svgGroup.append(\"line\")\r\n            .attr(\"x1\", start.x)\r\n            .attr(\"y1\", start.y)\r\n            .attr(\"x2\", end.x)\r\n            .attr(\"y2\", end.y)\r\n            .attr(\"stroke\", strokeColor)\r\n            .attr(\"stroke-width\", strokeWidth)\r\n            .style(\"opacity\", opacity);\r\n    }\r\n\r\n\r\n    createLabel(nodesGroup: d3.Selection<SVGGElement, unknown, null, undefined>, position: { x: number, y: number }, txt: string): d3.Selection<SVGTextElement, unknown, null, undefined> {\r\n        return nodesGroup.append(\"text\")\r\n            .attr(\"x\", position.x)\r\n            .attr(\"y\", position.y)\r\n            .attr(\"class\", \"label\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .attr(\"alignment-baseline\", \"middle\")\r\n            .style(\"fill\", \"black\")\r\n            .style(\"font-size\", \"20px\")\r\n            .text(txt);\r\n    }\r\n\r\n\r\n    createNode(nodesGroup: d3.Selection<SVGGElement, unknown, null, undefined>, cx: number, cy: number, r: number = 20,\r\n                                        className: string = \"node\", opacity: number = 0\r\n    ): d3.Selection<SVGCircleElement, unknown, null, undefined> {\r\n\r\n        return nodesGroup.append(\"circle\")\r\n            .attr(\"cx\", cx)\r\n            .attr(\"cy\", cy)\r\n            .attr(\"r\", r)\r\n            .attr(\"class\", className)\r\n            .style(\"opacity\", opacity);\r\n    }\r\n\r\n    applyNodeTransition(\r\n        node: d3.Selection<SVGCircleElement, unknown, null, undefined>,\r\n        position: { x: number; y: number },\r\n        duration: number = 1000\r\n    ): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            node.transition()\r\n                .duration(duration)\r\n                .attr(\"cx\", position.x)\r\n                .attr(\"cy\", position.y)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"stroke\", \"black\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"white\")\r\n                .on(\"end\", () => resolve());\r\n        });\r\n    }\r\n\r\n    applyLabelTransition(\r\n        label: d3.Selection<SVGTextElement, unknown, null, undefined>,\r\n        position: { x: number; y: number },\r\n        duration: number = 1000\r\n    ): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            label.transition()\r\n                .duration(duration)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"x\", position.x)\r\n                .attr(\"y\", position.y)\r\n                .on(\"end\", () => resolve());\r\n        });\r\n    }\r\n\r\n\r\n    // Gets the position in a shaped form\r\n    getPosition(index: number, numberOfNodes: number, centerX: number, centerY: number, radius: number = 100) {\r\n        const angle = (2 * Math.PI * index) / numberOfNodes;\r\n\r\n        // Calculate x and y coordinates using polar to Cartesian conversion\r\n        const x = radius * Math.cos(angle);\r\n        const y = radius * Math.sin(angle);\r\n\r\n        return { x: x + centerX, y: y + centerY };\r\n    }\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}