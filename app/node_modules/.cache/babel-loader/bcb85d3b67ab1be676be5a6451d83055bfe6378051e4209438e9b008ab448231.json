{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Micha\\\\Documents\\\\GitHub\\\\dynamic-algorithm-visualizer\\\\app\\\\src\\\\components\\\\algorithms\\\\min_heap.tsx\";\nimport { BinaryTree } from \"../structures/binary_tree\";\nimport { AnimatedTree } from \"../animations/tree_animation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class MinHeap {\n  constructor() {\n    this.tree = void 0;\n    this.tree = new BinaryTree();\n  }\n  insert(value) {\n    this.tree.add(value);\n\n    // Adding a new child to the root node (or customize logic)\n    const updatedTree = this.addChild(this.treeData, String(this.nodesNum), newChild);\n    this.setTreeData(updatedTree);\n  }\n  addChild(node, parentId, newChild) {\n    if (node.id === parentId) {\n      // Add the new child to the children array\n      return {\n        ...node,\n        children: [...node.children, newChild]\n      };\n    }\n\n    // Recursively apply to children\n    if (node.children) {\n      return {\n        ...node,\n        children: node.children.map(child => this.addChild(child, parentId, newChild))\n      };\n    }\n    this.nodesNum++;\n    return node;\n  }\n  display() {\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"500\",\n      height: \"500\",\n      children: /*#__PURE__*/_jsxDEV(AnimatedTree, {\n        tree: this.tree\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["BinaryTree","AnimatedTree","jsxDEV","_jsxDEV","MinHeap","constructor","tree","insert","value","add","updatedTree","addChild","treeData","String","nodesNum","newChild","setTreeData","node","parentId","id","children","map","child","display","width","height","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/algorithms/min_heap.tsx"],"sourcesContent":["import { Algorithm } from \"./algorithm_interface\";\r\nimport {BinaryTree} from \"../structures/binary_tree\";\r\nimport {AnimatedTree} from \"../animations/tree_animation\";\r\n\r\nexport class MinHeap implements Algorithm {\r\n    tree: BinaryTree;\r\n\r\n    constructor() {\r\n        this.tree = new BinaryTree();\r\n    }\r\n\r\n    insert(value: number | string) {\r\n        this.tree.add(value);\r\n\r\n        // Adding a new child to the root node (or customize logic)\r\n        const updatedTree = this.addChild(this.treeData, String(this.nodesNum), newChild);\r\n        this.setTreeData(updatedTree);\r\n    }\r\n\r\n    addChild(node: TreeNode, parentId: string, newChild: TreeNode): TreeNode {\r\n        if (node.id === parentId) {\r\n            // Add the new child to the children array\r\n            return { ...node, children: [...node.children, newChild] };\r\n        }\r\n\r\n        // Recursively apply to children\r\n        if (node.children) {\r\n            return { ...node, children: node.children.map(child => this.addChild(child, parentId, newChild)) };\r\n        }\r\n\r\n        this.nodesNum++;\r\n        return node;\r\n    }\r\n\r\n    display(): JSX.Element {\r\n        return (\r\n            <svg width=\"500\" height=\"500\">\r\n                <AnimatedTree tree={this.tree} />\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n"],"mappings":";AACA,SAAQA,UAAU,QAAO,2BAA2B;AACpD,SAAQC,YAAY,QAAO,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,OAAO,MAAMC,OAAO,CAAsB;EAGtCC,WAAWA,CAAA,EAAG;IAAA,KAFdC,IAAI;IAGA,IAAI,CAACA,IAAI,GAAG,IAAIN,UAAU,CAAC,CAAC;EAChC;EAEAO,MAAMA,CAACC,KAAsB,EAAE;IAC3B,IAAI,CAACF,IAAI,CAACG,GAAG,CAACD,KAAK,CAAC;;IAEpB;IACA,MAAME,WAAW,GAAG,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACC,QAAQ,EAAEC,MAAM,CAAC,IAAI,CAACC,QAAQ,CAAC,EAAEC,QAAQ,CAAC;IACjF,IAAI,CAACC,WAAW,CAACN,WAAW,CAAC;EACjC;EAEAC,QAAQA,CAACM,IAAc,EAAEC,QAAgB,EAAEH,QAAkB,EAAY;IACrE,IAAIE,IAAI,CAACE,EAAE,KAAKD,QAAQ,EAAE;MACtB;MACA,OAAO;QAAE,GAAGD,IAAI;QAAEG,QAAQ,EAAE,CAAC,GAAGH,IAAI,CAACG,QAAQ,EAAEL,QAAQ;MAAE,CAAC;IAC9D;;IAEA;IACA,IAAIE,IAAI,CAACG,QAAQ,EAAE;MACf,OAAO;QAAE,GAAGH,IAAI;QAAEG,QAAQ,EAAEH,IAAI,CAACG,QAAQ,CAACC,GAAG,CAACC,KAAK,IAAI,IAAI,CAACX,QAAQ,CAACW,KAAK,EAAEJ,QAAQ,EAAEH,QAAQ,CAAC;MAAE,CAAC;IACtG;IAEA,IAAI,CAACD,QAAQ,EAAE;IACf,OAAOG,IAAI;EACf;EAEAM,OAAOA,CAAA,EAAgB;IACnB,oBACIpB,OAAA;MAAKqB,KAAK,EAAC,KAAK;MAACC,MAAM,EAAC,KAAK;MAAAL,QAAA,eACzBjB,OAAA,CAACF,YAAY;QAACK,IAAI,EAAE,IAAI,CAACA;MAAK;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC;EAEd;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}