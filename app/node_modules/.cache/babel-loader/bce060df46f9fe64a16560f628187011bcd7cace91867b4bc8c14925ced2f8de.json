{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Micha\\\\Documents\\\\GitHub\\\\dynamic-algorithm-visualizer\\\\app\\\\src\\\\components\\\\algorithms\\\\min_heap.tsx\",\n  _s = $RefreshSig$();\nimport { useTransition, animated } from '@react-spring/web';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class MinHeap {\n  display() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this);\n  }\n}\nconst treeData = {\n  id: \"1\",\n  label: \"Root\",\n  children: [{\n    id: \"2\",\n    label: \"Child 1\",\n    children: [{\n      id: \"4\",\n      label: \"Child 1.1\"\n    }, {\n      id: \"5\",\n      label: \"Child 1.2\"\n    }]\n  }, {\n    id: \"3\",\n    label: \"Child 2\"\n  }]\n};\nconst AnimatedTree = ({\n  data\n}) => {\n  _s();\n  // Use transitions for animating each node\n  const transitions = useTransition(data.children || [], {\n    keys: item => item.id,\n    from: {\n      opacity: 0,\n      transform: 'translateY(20px)'\n    },\n    enter: {\n      opacity: 1,\n      transform: 'translateY(0)'\n    },\n    leave: {\n      opacity: 0,\n      transform: 'translateY(20px)'\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      paddingLeft: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), transitions((style, item) => /*#__PURE__*/_jsxDEV(animated.div, {\n      style: style,\n      children: /*#__PURE__*/_jsxDEV(AnimatedTree, {\n        data: item\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(AnimatedTree, \"S9WbwGeXwu/q64eaNNQ+KH3GDfc=\", false, function () {\n  return [useTransition];\n});\n_c = AnimatedTree;\nvar _c;\n$RefreshReg$(_c, \"AnimatedTree\");","map":{"version":3,"names":["useTransition","animated","jsxDEV","_jsxDEV","MinHeap","display","fileName","_jsxFileName","lineNumber","columnNumber","treeData","id","label","children","AnimatedTree","data","_s","transitions","keys","item","from","opacity","transform","enter","leave","style","paddingLeft","div","_c","$RefreshReg$"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/algorithms/min_heap.tsx"],"sourcesContent":["import {Algorithm} from \"./algorithm_interface\";\r\nimport { useTransition, animated } from '@react-spring/web';\r\n\r\nexport class MinHeap implements Algorithm {\r\n\r\n    display() {\r\n\r\n        return (\r\n            <div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\ninterface TreeNode {\r\n    id: string;\r\n    label: string;\r\n    children?: TreeNode[];\r\n}\r\n\r\nconst treeData: TreeNode = {\r\n    id: \"1\",\r\n    label: \"Root\",\r\n    children: [\r\n        {\r\n            id: \"2\",\r\n            label: \"Child 1\",\r\n            children: [\r\n                { id: \"4\", label: \"Child 1.1\" },\r\n                { id: \"5\", label: \"Child 1.2\" },\r\n            ],\r\n        },\r\n        {\r\n            id: \"3\",\r\n            label: \"Child 2\",\r\n        },\r\n    ],\r\n};\r\n\r\nconst AnimatedTree = ({ data }: { data: TreeNode }) => {\r\n    // Use transitions for animating each node\r\n    const transitions = useTransition(data.children || [], {\r\n        keys: (item) => item.id,\r\n        from: { opacity: 0, transform: 'translateY(20px)' },\r\n        enter: { opacity: 1, transform: 'translateY(0)' },\r\n        leave: { opacity: 0, transform: 'translateY(20px)' },\r\n    });\r\n\r\n    return (\r\n        <div style={{ paddingLeft: 20 }}>\r\n            <div>{data.label}</div>\r\n            {transitions((style, item) => (\r\n                <animated.div style={style}>\r\n                    <AnimatedTree data={item} />\r\n                </animated.div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n"],"mappings":";;AACA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,OAAO,MAAMC,OAAO,CAAsB;EAEtCC,OAAOA,CAAA,EAAG;IAEN,oBACIF,OAAA;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEK,CAAC;EAEd;AACJ;AAQA,MAAMC,QAAkB,GAAG;EACvBC,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,MAAM;EACbC,QAAQ,EAAE,CACN;IACIF,EAAE,EAAE,GAAG;IACPC,KAAK,EAAE,SAAS;IAChBC,QAAQ,EAAE,CACN;MAAEF,EAAE,EAAE,GAAG;MAAEC,KAAK,EAAE;IAAY,CAAC,EAC/B;MAAED,EAAE,EAAE,GAAG;MAAEC,KAAK,EAAE;IAAY,CAAC;EAEvC,CAAC,EACD;IACID,EAAE,EAAE,GAAG;IACPC,KAAK,EAAE;EACX,CAAC;AAET,CAAC;AAED,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAyB,CAAC,KAAK;EAAAC,EAAA;EACnD;EACA,MAAMC,WAAW,GAAGjB,aAAa,CAACe,IAAI,CAACF,QAAQ,IAAI,EAAE,EAAE;IACnDK,IAAI,EAAGC,IAAI,IAAKA,IAAI,CAACR,EAAE;IACvBS,IAAI,EAAE;MAAEC,OAAO,EAAE,CAAC;MAAEC,SAAS,EAAE;IAAmB,CAAC;IACnDC,KAAK,EAAE;MAAEF,OAAO,EAAE,CAAC;MAAEC,SAAS,EAAE;IAAgB,CAAC;IACjDE,KAAK,EAAE;MAAEH,OAAO,EAAE,CAAC;MAAEC,SAAS,EAAE;IAAmB;EACvD,CAAC,CAAC;EAEF,oBACInB,OAAA;IAAKsB,KAAK,EAAE;MAAEC,WAAW,EAAE;IAAG,CAAE;IAAAb,QAAA,gBAC5BV,OAAA;MAAAU,QAAA,EAAME,IAAI,CAACH;IAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EACtBQ,WAAW,CAAC,CAACQ,KAAK,EAAEN,IAAI,kBACrBhB,OAAA,CAACF,QAAQ,CAAC0B,GAAG;MAACF,KAAK,EAAEA,KAAM;MAAAZ,QAAA,eACvBV,OAAA,CAACW,YAAY;QAACC,IAAI,EAAEI;MAAK;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CACjB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACO,EAAA,CAnBIF,YAAY;EAAA,QAEMd,aAAa;AAAA;AAAA4B,EAAA,GAF/Bd,YAAY;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}