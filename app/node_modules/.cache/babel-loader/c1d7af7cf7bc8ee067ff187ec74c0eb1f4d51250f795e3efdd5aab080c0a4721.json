{"ast":null,"code":"// Class setup to handle all animations by using instructions that are defined outside this class\n\nimport * as d3 from \"d3\";\nexport class AnimationPlayer {\n  constructor() {\n    // Queue of instructions\n    this.instructions = void 0;\n    // Current Nodes\n    this.displayed_nodes = [];\n    this.svg = void 0;\n    // Processes all the instructions in the queue\n    this.processInstructions = async () => {\n      // Base Case\n      if (this.instructions.length === 0) return;\n\n      // Gets and removes the first instruction\n      const instruction = this.instructions.shift();\n      if (instruction) {\n        alert(\"Test\");\n        await instruction.process(this.svg);\n        await this.processInstructions();\n      }\n    };\n    this.instructions = [];\n    this.svg = d3.select(\"#svg-container\").attr(\"width\", 500).attr(\"height\", 500);\n  }\n\n  // Adds a new instruction into the queue\n  addInstruction(instruction) {\n    this.instructions.push(instruction);\n  }\n}","map":{"version":3,"names":["d3","AnimationPlayer","constructor","instructions","displayed_nodes","svg","processInstructions","length","instruction","shift","alert","process","select","attr","addInstruction","push"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/animation_player.tsx"],"sourcesContent":["// Class setup to handle all animations by using instructions that are defined outside this class\r\nimport {Instruction} from \"./Instructions/i_instruction\";\r\nimport {Picture} from \"./pictures/i_picture\";\r\nimport * as d3 from \"d3\";\r\nimport {BaseType} from \"d3\";\r\n\r\nexport class AnimationPlayer {\r\n\r\n    // Queue of instructions\r\n    private instructions : Instruction[];\r\n\r\n    // Current Nodes\r\n    private displayed_nodes : Picture[] = [];\r\n\r\n    private svg;\r\n\r\n    constructor() {\r\n        this.instructions = [];\r\n\r\n        this.svg = d3.select(\"#svg-container\")\r\n            .attr(\"width\", 500)\r\n            .attr(\"height\", 500);\r\n    }\r\n\r\n    // Adds a new instruction into the queue\r\n    addInstruction(instruction : Instruction) {\r\n        this.instructions.push(instruction);\r\n    }\r\n\r\n    // Processes all the instructions in the queue\r\n    processInstructions = async()=> {\r\n\r\n        // Base Case\r\n        if (this.instructions.length === 0) return;\r\n\r\n        // Gets and removes the first instruction\r\n        const instruction = this.instructions.shift();\r\n\r\n        if (instruction) {\r\n            alert(\"Test\")\r\n            await instruction.process(this.svg);\r\n            await this.processInstructions();\r\n        }\r\n    }\r\n\r\n}"],"mappings":"AAAA;;AAGA,OAAO,KAAKA,EAAE,MAAM,IAAI;AAGxB,OAAO,MAAMC,eAAe,CAAC;EAUzBC,WAAWA,CAAA,EAAG;IARd;IAAA,KACQC,YAAY;IAEpB;IAAA,KACQC,eAAe,GAAe,EAAE;IAAA,KAEhCC,GAAG;IAeX;IAAA,KACAC,mBAAmB,GAAG,YAAU;MAE5B;MACA,IAAI,IAAI,CAACH,YAAY,CAACI,MAAM,KAAK,CAAC,EAAE;;MAEpC;MACA,MAAMC,WAAW,GAAG,IAAI,CAACL,YAAY,CAACM,KAAK,CAAC,CAAC;MAE7C,IAAID,WAAW,EAAE;QACbE,KAAK,CAAC,MAAM,CAAC;QACb,MAAMF,WAAW,CAACG,OAAO,CAAC,IAAI,CAACN,GAAG,CAAC;QACnC,MAAM,IAAI,CAACC,mBAAmB,CAAC,CAAC;MACpC;IACJ,CAAC;IA1BG,IAAI,CAACH,YAAY,GAAG,EAAE;IAEtB,IAAI,CAACE,GAAG,GAAGL,EAAE,CAACY,MAAM,CAAC,gBAAgB,CAAC,CACjCC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAClBA,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC;EAC5B;;EAEA;EACAC,cAAcA,CAACN,WAAyB,EAAE;IACtC,IAAI,CAACL,YAAY,CAACY,IAAI,CAACP,WAAW,CAAC;EACvC;AAkBJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}