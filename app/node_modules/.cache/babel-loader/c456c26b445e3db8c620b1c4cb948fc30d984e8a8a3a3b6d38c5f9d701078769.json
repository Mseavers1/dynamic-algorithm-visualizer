{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Micha\\\\Documents\\\\GitHub\\\\dynamic-algorithm-visualizer\\\\app\\\\src\\\\components\\\\algorithms\\\\min_heap.tsx\",\n  _s = $RefreshSig$();\nimport { BinaryTree } from \"../structures/binary_tree\";\nimport { animated, useTransition } from \"@react-spring/web\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class MinHeap {\n  constructor(isDynamicSize) {\n    this.isDynamicSize = isDynamicSize;\n    this.tree = void 0;\n    this.default_max_height = 1;\n    this.current_max_height = 0;\n    this.current_max_height = this.default_max_height;\n    this.tree = new BinaryTree();\n  }\n  insert(value) {\n    var _this$tree;\n    (_this$tree = this.tree) === null || _this$tree === void 0 ? void 0 : _this$tree.add(value);\n\n    //alert(this.tree?.get_current_height())\n\n    //if (this.isDynamicSize && current_height > this.current_max_height) this.current_max_height = current_height + 1;\n  }\n  render() {\n    //alert(this.current_max_height);\n\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"500\",\n      height: \"500\",\n      children: /*#__PURE__*/_jsxDEV(AnimatedTree, {\n        values: this.tree.values,\n        height: this.current_max_height\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this);\n  }\n}\nconst AnimatedTree = ({\n  values,\n  height\n}) => {\n  _s();\n  const nodeTransitions = useTransition(values.map((value, i) => ({\n    value,\n    index: i\n  })), {\n    keys: item => `${item.value}-${item.index}`,\n    // Ensure unique keys\n    from: {\n      opacity: 0,\n      transform: 'scale(0)'\n    },\n    enter: {\n      opacity: 1,\n      transform: 'scale(1)'\n    },\n    leave: {\n      opacity: 0,\n      transform: 'scale(0)'\n    },\n    initial: null,\n    // Do not animate existing nodes on re-renders\n    trail: 0 // Avoid sequential animation of all nodes\n  });\n\n  //alert(height)\n\n  const getNodePosition = index => {\n    if (index < 0 || isNaN(index)) return {\n      x: 0,\n      y: 0\n    };\n    if (index === 0) return {\n      x: 250,\n      y: 50\n    }; // Root at the center\n\n    const depth = Math.floor(Math.log2(index + 1)); // Get depth in the tree\n\n    let xSpacingMulti = 1;\n    if (height > 1) xSpacingMulti = 2;\n    const xSpacing = 200 * xSpacingMulti / (depth + 1); // Reduce spacing as depth increases\n    const ySpacing = 80; // Vertical spacing\n\n    const parentIndex = Math.floor((index - 1) / 2);\n    const parentPos = getNodePosition(parentIndex);\n\n    // Left child or right child\n    const isLeftChild = index % 2 === 1;\n    const xOffset = isLeftChild ? -xSpacing : xSpacing;\n    return {\n      x: parentPos.x + xOffset,\n      y: parentPos.y + ySpacing\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    children: [nodeTransitions((style, {\n      value,\n      index\n    }) => {\n      if (index === 0) return null; // Root node has no parent, skip edge rendering\n      const {\n        x,\n        y\n      } = getNodePosition(index);\n      const parentIndex = Math.floor((index - 1) / 2);\n      const parentPos = getNodePosition(parentIndex);\n      return /*#__PURE__*/_jsxDEV(animated.line, {\n        // Separate key for lines\n        x1: parentPos.x,\n        y1: parentPos.y,\n        x2: x,\n        y2: y,\n        stroke: \"black\",\n        strokeWidth: \"2\",\n        style: {\n          strokeOpacity: 1\n        }\n      }, `line-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this);\n    }), nodeTransitions((style, {\n      value,\n      index\n    }) => {\n      const {\n        x,\n        y\n      } = getNodePosition(index);\n      return /*#__PURE__*/_jsxDEV(animated.g, {\n        style: style,\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: x,\n          cy: y,\n          r: 30,\n          fill: \"steelblue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: x,\n          y: y,\n          dy: 5,\n          textAnchor: \"middle\",\n          fill: \"white\",\n          fontSize: \"12\",\n          children: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, this)]\n      }, `node-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n_s(AnimatedTree, \"7q9XJ/T8qFFFTlXCAVzO9hMqO4s=\", false, function () {\n  return [useTransition];\n});\n_c = AnimatedTree;\nvar _c;\n$RefreshReg$(_c, \"AnimatedTree\");","map":{"version":3,"names":["BinaryTree","animated","useTransition","jsxDEV","_jsxDEV","MinHeap","constructor","isDynamicSize","tree","default_max_height","current_max_height","insert","value","_this$tree","add","render","width","height","children","AnimatedTree","values","fileName","_jsxFileName","lineNumber","columnNumber","_s","nodeTransitions","map","i","index","keys","item","from","opacity","transform","enter","leave","initial","trail","getNodePosition","isNaN","x","y","depth","Math","floor","log2","xSpacingMulti","xSpacing","ySpacing","parentIndex","parentPos","isLeftChild","xOffset","style","line","x1","y1","x2","y2","stroke","strokeWidth","strokeOpacity","g","cx","cy","r","fill","dy","textAnchor","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/algorithms/min_heap.tsx"],"sourcesContent":["import { Algorithm } from \"./algorithm_interface\";\r\nimport {BinaryTree} from \"../structures/binary_tree\";\r\nimport {animated, useTransition} from \"@react-spring/web\";\r\n\r\nexport class MinHeap implements Algorithm {\r\n\r\n    private tree : BinaryTree;\r\n    private default_max_height : number = 1;\r\n    private current_max_height : number = 0;\r\n\r\n    constructor(\r\n        private isDynamicSize: boolean\r\n    ) {\r\n       this.current_max_height = this.default_max_height;\r\n       this.tree = new BinaryTree();\r\n    }\r\n\r\n    insert(value: number) {\r\n\r\n        this.tree?.add(value);\r\n\r\n        //alert(this.tree?.get_current_height())\r\n\r\n        //if (this.isDynamicSize && current_height > this.current_max_height) this.current_max_height = current_height + 1;\r\n\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        //alert(this.current_max_height);\r\n\r\n        return (\r\n            <svg width=\"500\" height=\"500\">\r\n                <AnimatedTree values={this.tree.values} height={this.current_max_height}/>\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n\r\nconst AnimatedTree = ({values, height}: {values : (string | number)[], height: number}) => {\r\n\r\n    const nodeTransitions = useTransition(\r\n        values.map((value, i) => ({ value, index: i })),\r\n        {\r\n            keys: (item) => `${item.value}-${item.index}`,  // Ensure unique keys\r\n            from: { opacity: 0, transform: 'scale(0)' },\r\n            enter: { opacity: 1, transform: 'scale(1)' },\r\n            leave: { opacity: 0, transform: 'scale(0)' },\r\n            initial: null,  // Do not animate existing nodes on re-renders\r\n            trail: 0,       // Avoid sequential animation of all nodes\r\n        }\r\n    );\r\n\r\n    //alert(height)\r\n\r\n    const getNodePosition = (index: number): { x: number, y:number } => {\r\n\r\n        if (index < 0 || isNaN(index)) return {x: 0, y: 0};\r\n        if (index === 0) return { x: 250, y: 50 }; // Root at the center\r\n\r\n        const depth = Math.floor(Math.log2(index + 1)); // Get depth in the tree\r\n\r\n        let xSpacingMulti : number = 1;\r\n\r\n        if (height > 1) xSpacingMulti = 2;\r\n\r\n        const xSpacing = (200 * xSpacingMulti) / (depth + 1); // Reduce spacing as depth increases\r\n        const ySpacing = 80; // Vertical spacing\r\n\r\n        const parentIndex = Math.floor((index - 1) / 2);\r\n        const parentPos = getNodePosition(parentIndex);\r\n\r\n        // Left child or right child\r\n        const isLeftChild = index % 2 === 1;\r\n        const xOffset = isLeftChild ? -xSpacing : xSpacing;\r\n\r\n        return { x: parentPos.x + xOffset, y: parentPos.y + ySpacing };\r\n    };\r\n\r\n\r\n    return (\r\n        <g>\r\n            {/* Render edges (lines) first */}\r\n            {nodeTransitions((style, { value, index }) => {\r\n                if (index === 0) return null; // Root node has no parent, skip edge rendering\r\n                const { x, y } = getNodePosition(index);\r\n                const parentIndex = Math.floor((index - 1) / 2);\r\n                const parentPos = getNodePosition(parentIndex);\r\n\r\n                return (\r\n                    <animated.line\r\n                        key={`line-${index}`} // Separate key for lines\r\n                        x1={parentPos.x}\r\n                        y1={parentPos.y}\r\n                        x2={x}\r\n                        y2={y}\r\n                        stroke=\"black\"\r\n                        strokeWidth=\"2\"\r\n                        style={{ strokeOpacity: 1 }}\r\n                    />\r\n                );\r\n            })}\r\n\r\n            {/* Render nodes (circles) on top of the lines */}\r\n            {nodeTransitions((style, { value, index }) => {\r\n                const { x, y } = getNodePosition(index);\r\n\r\n                return (\r\n                    <animated.g key={`node-${index}`} style={style}>\r\n                        <circle cx={x} cy={y} r={30} fill=\"steelblue\" />\r\n                        <text x={x} y={y} dy={5} textAnchor=\"middle\" fill=\"white\" fontSize=\"12\">\r\n                            {value}\r\n                        </text>\r\n                    </animated.g>\r\n                );\r\n            })}\r\n        </g>\r\n    );\r\n\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}