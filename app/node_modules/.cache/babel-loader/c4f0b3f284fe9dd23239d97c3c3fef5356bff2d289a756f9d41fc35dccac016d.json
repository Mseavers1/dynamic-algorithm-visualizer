{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nexport const BinaryTree = () => {\n  _s();\n  const [values, setValues] = useState([]);\n  const add = value => {\n    setValues(prevValues => [...prevValues, value]);\n  };\n  const remove = () => {\n    if (values.length <= 0) {\n      console.error(\"Cannot remove from an empty tree.\");\n      return null;\n    }\n    const newValues = [...values];\n    const removedValue = newValues.pop();\n    setValues(newValues);\n    return removedValue;\n  };\n  const size = () => values.length;\n  const get = nodeID => {\n    if (nodeID <= 0 || nodeID > values.length) {\n      console.error(\"NodeID is out of bounds\");\n      return null;\n    }\n    return values[nodeID - 1];\n  };\n  return {\n    values,\n    add,\n    remove,\n    size,\n    get\n  };\n};\n_s(BinaryTree, \"2pK3rqdy1zaKCApuOUtEsSz9OBs=\");\n_c = BinaryTree;\nvar _c;\n$RefreshReg$(_c, \"BinaryTree\");","map":{"version":3,"names":["useState","BinaryTree","_s","values","setValues","add","value","prevValues","remove","length","console","error","newValues","removedValue","pop","size","get","nodeID","_c","$RefreshReg$"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/structures/binary_tree.tsx"],"sourcesContent":["import { useState } from 'react';\r\n\r\nexport const BinaryTree = () => {\r\n    const [values, setValues] = useState<(string | number)[]>([]);\r\n\r\n    const add = (value: string | number): void => {\r\n        setValues(prevValues => [...prevValues, value]);\r\n    };\r\n\r\n    const remove = (): string | number | null => {\r\n\r\n        if (values.length <= 0) {\r\n            console.error(\"Cannot remove from an empty tree.\");\r\n            return null;\r\n        }\r\n\r\n        const newValues = [...values];\r\n        const removedValue = newValues.pop();\r\n        setValues(newValues);\r\n\r\n        return removedValue as string | number;\r\n    };\r\n\r\n    const size = (): number => values.length;\r\n\r\n    const get = (nodeID: number): string | number | null => {\r\n        if (nodeID <= 0 || nodeID > values.length) {\r\n            console.error(\"NodeID is out of bounds\");\r\n            return null;\r\n        }\r\n        return values[nodeID - 1];\r\n    };\r\n\r\n    return {\r\n        values,\r\n        add,\r\n        remove,\r\n        size,\r\n        get\r\n    };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGJ,QAAQ,CAAsB,EAAE,CAAC;EAE7D,MAAMK,GAAG,GAAIC,KAAsB,IAAW;IAC1CF,SAAS,CAACG,UAAU,IAAI,CAAC,GAAGA,UAAU,EAAED,KAAK,CAAC,CAAC;EACnD,CAAC;EAED,MAAME,MAAM,GAAGA,CAAA,KAA8B;IAEzC,IAAIL,MAAM,CAACM,MAAM,IAAI,CAAC,EAAE;MACpBC,OAAO,CAACC,KAAK,CAAC,mCAAmC,CAAC;MAClD,OAAO,IAAI;IACf;IAEA,MAAMC,SAAS,GAAG,CAAC,GAAGT,MAAM,CAAC;IAC7B,MAAMU,YAAY,GAAGD,SAAS,CAACE,GAAG,CAAC,CAAC;IACpCV,SAAS,CAACQ,SAAS,CAAC;IAEpB,OAAOC,YAAY;EACvB,CAAC;EAED,MAAME,IAAI,GAAGA,CAAA,KAAcZ,MAAM,CAACM,MAAM;EAExC,MAAMO,GAAG,GAAIC,MAAc,IAA6B;IACpD,IAAIA,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAGd,MAAM,CAACM,MAAM,EAAE;MACvCC,OAAO,CAACC,KAAK,CAAC,yBAAyB,CAAC;MACxC,OAAO,IAAI;IACf;IACA,OAAOR,MAAM,CAACc,MAAM,GAAG,CAAC,CAAC;EAC7B,CAAC;EAED,OAAO;IACHd,MAAM;IACNE,GAAG;IACHG,MAAM;IACNO,IAAI;IACJC;EACJ,CAAC;AACL,CAAC;AAACd,EAAA,CAtCWD,UAAU;AAAAiB,EAAA,GAAVjB,UAAU;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}