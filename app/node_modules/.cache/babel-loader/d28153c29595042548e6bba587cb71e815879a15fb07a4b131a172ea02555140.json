{"ast":null,"code":"export class FAAddAllInstruction {\n  constructor(graph) {\n    this.graph = void 0;\n    this.graph = graph;\n  }\n  async process(svg) {\n    let nodeTransitions = [];\n    const nodesGroup = svg.append(\"g\").attr(\"id\", \"nodes\");\n    let index = 0;\n    this.graph.get_nodes().forEach((node, value) => {\n      let pos = this.getPosition(index++, this.graph.get_nodes().size, 350, 200);\n      this.createNode(nodesGroup, pos.x, pos.y);\n    });\n    return Promise.all([nodeTransitions]);\n  }\n  createNode(nodesGroup, cx, cy, r = 20, className = \"node\", opacity = 0) {\n    return nodesGroup.append(\"circle\").attr(\"cx\", cx).attr(\"cy\", cy).attr(\"r\", r).attr(\"class\", className).style(\"opacity\", opacity);\n  }\n  applyNodeTransition(node, position, duration = 1000) {\n    return node.transition().duration(duration).style(\"opacity\", 1).attr(\"cx\", position.x).attr(\"cy\", position.y).attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"fill\", \"white\");\n  }\n\n  // Gets the position in a shaped form\n  getPosition(index, numberOfNodes, centerX, centerY, radius = 100) {\n    const angle = 2 * Math.PI * index / numberOfNodes;\n\n    // Calculate x and y coordinates using polar to Cartesian conversion\n    const x = radius * Math.cos(angle);\n    const y = radius * Math.sin(angle);\n    return {\n      x: x + centerX,\n      y: y + centerY\n    };\n  }\n}","map":{"version":3,"names":["FAAddAllInstruction","constructor","graph","process","svg","nodeTransitions","nodesGroup","append","attr","index","get_nodes","forEach","node","value","pos","getPosition","size","createNode","x","y","Promise","all","cx","cy","r","className","opacity","style","applyNodeTransition","position","duration","transition","numberOfNodes","centerX","centerY","radius","angle","Math","PI","cos","sin"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/fa_add_all_instruction.tsx"],"sourcesContent":["import {Instruction} from \"./i_instruction\";\r\nimport {BaseType, Selection} from \"d3\";\r\nimport {FA_Graph} from \"../structures/fa_graph\";\r\n\r\nexport class FAAddAllInstruction implements Instruction {\r\n\r\n    private graph: FA_Graph;\r\n\r\n    constructor(graph: FA_Graph) {\r\n        this.graph = graph;\r\n    }\r\n\r\n    async process(svg: Selection<BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n\r\n        let nodeTransitions : Promise<void>[] = [];\r\n        const nodesGroup = svg.append(\"g\").attr(\"id\", \"nodes\");\r\n\r\n        let index = 0;\r\n        this.graph.get_nodes().forEach((node, value) => {\r\n\r\n            let pos = this.getPosition(index++, this.graph.get_nodes().size, 350, 200);\r\n            this.createNode(nodesGroup, pos.x, pos.y);\r\n\r\n\r\n        });\r\n\r\n\r\n\r\n\r\n        return Promise.all([nodeTransitions]);\r\n    }\r\n\r\n    createNode(nodesGroup: d3.Selection<SVGGElement, unknown, null, undefined>, cx: number, cy: number, r: number = 20,\r\n                                        className: string = \"node\", opacity: number = 0\r\n    ): d3.Selection<SVGCircleElement, unknown, null, undefined> {\r\n\r\n        return nodesGroup.append(\"circle\")\r\n            .attr(\"cx\", cx)\r\n            .attr(\"cy\", cy)\r\n            .attr(\"r\", r)\r\n            .attr(\"class\", className)\r\n            .style(\"opacity\", opacity);\r\n    }\r\n\r\n    applyNodeTransition(\r\n        node: d3.Selection<SVGCircleElement, unknown, null, undefined>,\r\n        position: { x: number; y: number },\r\n        duration: number = 1000\r\n    ): d3.Transition<SVGCircleElement, unknown, null, undefined> {\r\n\r\n        return node.transition()\r\n            .duration(duration)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"cx\", position.x)\r\n            .attr(\"cy\", position.y)\r\n            .attr(\"stroke\", \"black\")\r\n            .attr(\"stroke-width\", 2)\r\n            .attr(\"fill\", \"white\");\r\n    }\r\n\r\n\r\n\r\n    // Gets the position in a shaped form\r\n    getPosition(index: number, numberOfNodes: number, centerX: number, centerY: number, radius: number = 100) {\r\n        const angle = (2 * Math.PI * index) / numberOfNodes;\r\n\r\n        // Calculate x and y coordinates using polar to Cartesian conversion\r\n        const x = radius * Math.cos(angle);\r\n        const y = radius * Math.sin(angle);\r\n\r\n        return { x: x + centerX, y: y + centerY };\r\n    }\r\n\r\n}"],"mappings":"AAIA,OAAO,MAAMA,mBAAmB,CAAwB;EAIpDC,WAAWA,CAACC,KAAe,EAAE;IAAA,KAFrBA,KAAK;IAGT,IAAI,CAACA,KAAK,GAAGA,KAAK;EACtB;EAEA,MAAMC,OAAOA,CAACC,GAAmD,EAAiB;IAE9E,IAAIC,eAAiC,GAAG,EAAE;IAC1C,MAAMC,UAAU,GAAGF,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC;IAEtD,IAAIC,KAAK,GAAG,CAAC;IACb,IAAI,CAACP,KAAK,CAACQ,SAAS,CAAC,CAAC,CAACC,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAE5C,IAAIC,GAAG,GAAG,IAAI,CAACC,WAAW,CAACN,KAAK,EAAE,EAAE,IAAI,CAACP,KAAK,CAACQ,SAAS,CAAC,CAAC,CAACM,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC;MAC1E,IAAI,CAACC,UAAU,CAACX,UAAU,EAAEQ,GAAG,CAACI,CAAC,EAAEJ,GAAG,CAACK,CAAC,CAAC;IAG7C,CAAC,CAAC;IAKF,OAAOC,OAAO,CAACC,GAAG,CAAC,CAAChB,eAAe,CAAC,CAAC;EACzC;EAEAY,UAAUA,CAACX,UAA+D,EAAEgB,EAAU,EAAEC,EAAU,EAAEC,CAAS,GAAG,EAAE,EAC9EC,SAAiB,GAAG,MAAM,EAAEC,OAAe,GAAG,CAAC,EACvB;IAExD,OAAOpB,UAAU,CAACC,MAAM,CAAC,QAAQ,CAAC,CAC7BC,IAAI,CAAC,IAAI,EAAEc,EAAE,CAAC,CACdd,IAAI,CAAC,IAAI,EAAEe,EAAE,CAAC,CACdf,IAAI,CAAC,GAAG,EAAEgB,CAAC,CAAC,CACZhB,IAAI,CAAC,OAAO,EAAEiB,SAAS,CAAC,CACxBE,KAAK,CAAC,SAAS,EAAED,OAAO,CAAC;EAClC;EAEAE,mBAAmBA,CACfhB,IAA8D,EAC9DiB,QAAkC,EAClCC,QAAgB,GAAG,IAAI,EACkC;IAEzD,OAAOlB,IAAI,CAACmB,UAAU,CAAC,CAAC,CACnBD,QAAQ,CAACA,QAAQ,CAAC,CAClBH,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CACnBnB,IAAI,CAAC,IAAI,EAAEqB,QAAQ,CAACX,CAAC,CAAC,CACtBV,IAAI,CAAC,IAAI,EAAEqB,QAAQ,CAACV,CAAC,CAAC,CACtBX,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBA,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC;EAC9B;;EAIA;EACAO,WAAWA,CAACN,KAAa,EAAEuB,aAAqB,EAAEC,OAAe,EAAEC,OAAe,EAAEC,MAAc,GAAG,GAAG,EAAE;IACtG,MAAMC,KAAK,GAAI,CAAC,GAAGC,IAAI,CAACC,EAAE,GAAG7B,KAAK,GAAIuB,aAAa;;IAEnD;IACA,MAAMd,CAAC,GAAGiB,MAAM,GAAGE,IAAI,CAACE,GAAG,CAACH,KAAK,CAAC;IAClC,MAAMjB,CAAC,GAAGgB,MAAM,GAAGE,IAAI,CAACG,GAAG,CAACJ,KAAK,CAAC;IAElC,OAAO;MAAElB,CAAC,EAAEA,CAAC,GAAGe,OAAO;MAAEd,CAAC,EAAEA,CAAC,GAAGe;IAAQ,CAAC;EAC7C;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}