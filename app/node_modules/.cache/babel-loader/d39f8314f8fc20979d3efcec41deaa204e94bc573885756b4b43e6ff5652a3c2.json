{"ast":null,"code":"export class TreeSwapInstruction {\n  constructor(nodeAIndex, nodeBIndex, nodes) {\n    this.nodeAIndex = void 0;\n    this.nodeBIndex = void 0;\n    this.nodes = void 0;\n    this.nodeAIndex = nodeAIndex;\n    this.nodeBIndex = nodeBIndex;\n    this.nodes = nodes;\n  }\n  async process(svg) {\n    let s = \"\";\n    for (const node of this.nodes) {\n      s += \"(\" + node.value + \", \" + node.index + \") \";\n    }\n    alert(s);\n\n    // Get Nodes\n    const nodeA = this.nodes[this.nodeAIndex];\n    const nodeB = this.nodes[this.nodeBIndex];\n\n    // Get positions\n    const nodeAPosition = {\n      x: parseFloat(nodeA.element.attr(\"cx\")),\n      y: parseFloat(nodeA.element.attr(\"cy\"))\n    };\n    const nodeBPosition = {\n      x: parseFloat(nodeB.element.attr(\"cx\")),\n      y: parseFloat(nodeB.element.attr(\"cy\"))\n    };\n\n    // Swap Nodes\n    const nodeATransition = nodeA.element.transition().duration(1000).style(\"opacity\", 1).attr(\"cx\", nodeBPosition.x).attr(\"cy\", nodeBPosition.y);\n    const nodeBTransition = nodeB.element.transition().duration(1000).style(\"opacity\", 1).attr(\"cx\", nodeAPosition.x).attr(\"cy\", nodeAPosition.y);\n\n    // Swap Labels\n    const nodeALabelTransition = nodeA.label.transition().duration(1000).style(\"opacity\", 1).attr(\"x\", nodeBPosition.x).attr(\"y\", nodeBPosition.y);\n    const nodeBLabelTransition = nodeB.label.transition().duration(1000).style(\"opacity\", 1).attr(\"x\", nodeAPosition.x).attr(\"y\", nodeAPosition.y);\n\n    // Switch indexes\n    this.nodes[this.nodeAIndex].index = this.nodeBIndex;\n    this.nodes[this.nodeBIndex].index = this.nodeAIndex;\n\n    // Switch edges\n    const nodeAEdge = this.nodes[this.nodeAIndex].edge;\n    this.nodes[this.nodeAIndex].edge = this.nodes[this.nodeBIndex].edge;\n    this.nodes[this.nodeBIndex].edge = nodeAEdge;\n\n    // Swap actual array elements\n    this.nodes[this.nodeAIndex] = this.nodes[this.nodeBIndex];\n    this.nodes[this.nodeBIndex] = nodeA;\n    await Promise.all([nodeATransition.end(), nodeBTransition.end(), nodeALabelTransition.end(), nodeBLabelTransition.end()]);\n  }\n}","map":{"version":3,"names":["TreeSwapInstruction","constructor","nodeAIndex","nodeBIndex","nodes","process","svg","s","node","value","index","alert","nodeA","nodeB","nodeAPosition","x","parseFloat","element","attr","y","nodeBPosition","nodeATransition","transition","duration","style","nodeBTransition","nodeALabelTransition","label","nodeBLabelTransition","nodeAEdge","edge","Promise","all","end"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/tree_swap_instruction.tsx"],"sourcesContent":["import {Instruction} from \"./i_instruction\";\r\nimport * as d3 from \"d3\";\r\nimport {BaseType} from \"d3\";\r\nimport {Node} from \"../pictures/node\";\r\n\r\nexport class TreeSwapInstruction implements Instruction {\r\n\r\n    nodeAIndex: number;\r\n    nodeBIndex: number;\r\n    nodes: Node[];\r\n\r\n    constructor(nodeAIndex : number, nodeBIndex : number, nodes : Node[]) {\r\n        this.nodeAIndex = nodeAIndex;\r\n        this.nodeBIndex = nodeBIndex;\r\n        this.nodes = nodes;\r\n    }\r\n\r\n    async process(svg: d3.Selection<BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n\r\n        let s = \"\"\r\n        for (const node of this.nodes) {\r\n            s += \"(\" + node.value + \", \" + node.index + \") \";\r\n        }\r\n\r\n        alert(s)\r\n\r\n        // Get Nodes\r\n        const nodeA = this.nodes[this.nodeAIndex];\r\n        const nodeB = this.nodes[this.nodeBIndex];\r\n\r\n        // Get positions\r\n        const nodeAPosition = { x: parseFloat(nodeA.element.attr(\"cx\")), y: parseFloat(nodeA.element.attr(\"cy\")) };\r\n        const nodeBPosition = { x: parseFloat(nodeB.element.attr(\"cx\")), y: parseFloat(nodeB.element.attr(\"cy\")) };\r\n\r\n        // Swap Nodes\r\n        const nodeATransition = nodeA.element.transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"cx\", nodeBPosition.x)\r\n            .attr(\"cy\", nodeBPosition.y)\r\n\r\n        const nodeBTransition = nodeB.element.transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"cx\", nodeAPosition.x)\r\n            .attr(\"cy\", nodeAPosition.y)\r\n\r\n        // Swap Labels\r\n        const nodeALabelTransition = nodeA.label.transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"x\", nodeBPosition.x)\r\n            .attr(\"y\", nodeBPosition.y)\r\n\r\n        const nodeBLabelTransition = nodeB.label.transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"x\", nodeAPosition.x)\r\n            .attr(\"y\", nodeAPosition.y)\r\n\r\n        // Switch indexes\r\n        this.nodes[this.nodeAIndex].index = this.nodeBIndex;\r\n        this.nodes[this.nodeBIndex].index = this.nodeAIndex;\r\n\r\n        // Switch edges\r\n        const nodeAEdge = this.nodes[this.nodeAIndex].edge;\r\n        this.nodes[this.nodeAIndex].edge = this.nodes[this.nodeBIndex].edge;\r\n        this.nodes[this.nodeBIndex].edge = nodeAEdge;\r\n\r\n        // Swap actual array elements\r\n        this.nodes[this.nodeAIndex] = this.nodes[this.nodeBIndex];\r\n        this.nodes[this.nodeBIndex] = nodeA;\r\n\r\n        await Promise.all([nodeATransition.end(), nodeBTransition.end(), nodeALabelTransition.end(), nodeBLabelTransition.end()]);\r\n    }\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}