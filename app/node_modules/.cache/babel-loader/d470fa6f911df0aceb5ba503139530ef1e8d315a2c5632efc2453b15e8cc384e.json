{"ast":null,"code":"import { FAAddInstruction } from \"../Instructions/fa_add_instruction\";\nimport * as d3 from \"d3\";\nimport { FA_Graph } from \"../structures/fa_graph\";\nexport class FATransition {\n  constructor(animator) {\n    this.graph = void 0;\n    this.animator = void 0;\n    this.states = void 0;\n    this.startingState = void 0;\n    this.finalStates = void 0;\n    this.colorUsed = void 0;\n    this.showClear = true;\n    this.showDelete = false;\n    this.showInsert = false;\n    this.showRandomize = false;\n    this.showSearch = false;\n    this.graph = new FA_Graph();\n    this.animator = animator;\n    this.states = {};\n    this.startingState = null;\n    this.finalStates = [];\n    this.colorUsed = [];\n  }\n  getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  generateNewColor() {\n    let c = {\n      r: this.getRandomInt(0, 255),\n      g: this.getRandomInt(0, 255),\n      b: this.getRandomInt(0, 255),\n      a: 1\n    };\n    let exists = this.colorUsed.some(color => color.r === c.r && color.g === c.g && color.b === c.b && color.a === c.a);\n    let attemps = 0;\n    while (exists) {\n      if (attemps > 50) break;\n      c = {\n        r: this.getRandomInt(0, 255),\n        g: this.getRandomInt(0, 255),\n        b: this.getRandomInt(0, 255),\n        a: 1\n      };\n      exists = this.colorUsed.some(color => color.r === c.r && color.g === c.g && color.b === c.b && color.a === c.a);\n      attemps++;\n    }\n    this.colorUsed.push(c);\n    return c;\n  }\n  parse(area) {\n    // Is code valid?\n    const lines = area.split(\"\\n\");\n    let valid = true;\n    let currentState = \"\";\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n\n      // Ignore comments\n      if (line.startsWith('#') || line.startsWith('//')) continue;\n\n      // If it doesn't start with a space, it is the start of a state definition\n      if (!line.startsWith(' ')) {\n        const state = line.split(\":\")[0];\n        this.states[state] = [];\n        currentState = state;\n      }\n\n      // If it does, it is a value in a state definition\n      else {\n        // Get rid of spaces\n        const new_line = line.replace(/\\s+/g, '');\n\n        // Check if there is a : - if so, its a value, if not, its either Start or Final keywords\n        if (new_line.includes(':')) {\n          const state = new_line.split(\":\")[0];\n          const values = new_line.split(\":\")[1].split(\",\");\n          this.states[currentState].push({\n            state: state,\n            values: values\n          });\n        }\n        // Keywords\n        else {\n          // Set the starting state\n          if (new_line.toUpperCase() === \"START\") {\n            this.startingState = currentState;\n          }\n\n          // Add onto the final states\n          if (new_line.toUpperCase() === \"FINAL\") {\n            this.finalStates.push(currentState);\n          }\n        }\n      }\n    }\n\n    // Is there a starting state? If not, cause error\n    if (this.startingState === null) {\n      valid = false;\n    }\n\n    // Is there any final states? Is not, cause error\n    if (this.finalStates.length <= 0) {\n      valid = false;\n    }\n\n    // If valid, generate animation / structure\n    if (valid) {\n      let indexStates = {};\n      let colorStates = {};\n      let index = 0;\n      for (const state in this.states) {\n        indexStates[state] = index;\n        colorStates[state] = this.generateNewColor();\n\n        //const stateArray = this.states[state];\n\n        //stateArray.forEach((value) => {\n        //    this.animator.addInstruction(new FAAddInstruction(index, value, ))\n        //});\n\n        let isStarting = state === this.startingState;\n        let isFinal = this.finalStates.includes(state);\n        this.animator.addInstruction(new FAAddInstruction(index, state, Object.keys(this.states).length, this.states[state], indexStates, colorStates, isStarting, isFinal));\n        index += 1;\n      }\n      this.animator.processInstructions();\n    }\n  }\n  clear() {\n    const svg = d3.select(\"#svg-container\").attr(\"width\", 500).attr(\"height\", 500);\n    svg.selectAll(\"*\").remove();\n  }\n  delete(value) {}\n  generate_random(min, max, size, allowStrings, allowNumbers, allowDecimal, maxDecimal, regex, stringLengthMin, stringLengthMax) {}\n  insert(value) {}\n}","map":{"version":3,"names":["FAAddInstruction","d3","FA_Graph","FATransition","constructor","animator","graph","states","startingState","finalStates","colorUsed","showClear","showDelete","showInsert","showRandomize","showSearch","getRandomInt","min","max","Math","floor","random","generateNewColor","c","r","g","b","a","exists","some","color","attemps","push","parse","area","lines","split","valid","currentState","i","length","line","startsWith","state","new_line","replace","includes","values","toUpperCase","indexStates","colorStates","index","isStarting","isFinal","addInstruction","Object","keys","processInstructions","clear","svg","select","attr","selectAll","remove","delete","value","generate_random","size","allowStrings","allowNumbers","allowDecimal","maxDecimal","regex","stringLengthMin","stringLengthMax","insert"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/algorithms/fa_transition.tsx"],"sourcesContent":["import {Algorithm} from \"./algorithm_interface\";\r\nimport {AnimationPlayer} from \"../animation_player\";\r\nimport {FAAddInstruction, Color} from \"../Instructions/fa_add_instruction\";\r\nimport {TreeAddInstruction} from \"../Instructions/tree_add_instruction\";\r\nimport * as d3 from \"d3\";\r\nimport {useState} from \"react\";\r\nimport {FA_Graph} from \"../structures/fa_graph\";\r\n\r\nexport type stateValues = {\r\n    state: string;\r\n    values: string[];\r\n}\r\n\r\nexport class FATransition implements Algorithm {\r\n\r\n    private graph: FA_Graph;\r\n\r\n    private animator: AnimationPlayer;\r\n    private states: Record<string, stateValues[]>;\r\n    private startingState: string | null;\r\n    private finalStates: string[];\r\n    private colorUsed: Color[];\r\n\r\n    public showClear: boolean = true;\r\n    public showDelete: boolean = false;\r\n    public showInsert: boolean = false;\r\n    public showRandomize: boolean = false;\r\n    public showSearch: boolean = false;\r\n\r\n    constructor(\r\n        animator: AnimationPlayer,\r\n    ) {\r\n        this.graph = new FA_Graph();\r\n        this.animator = animator;\r\n        this.states = {};\r\n        this.startingState = null;\r\n        this.finalStates = [];\r\n        this.colorUsed = [];\r\n    }\r\n\r\n    getRandomInt(min: number, max: number): number {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n\r\n    generateNewColor(): Color {\r\n        let c: Color = {r: this.getRandomInt(0, 255), g: this.getRandomInt(0, 255), b: this.getRandomInt(0, 255), a: 1};\r\n\r\n        let exists = this.colorUsed.some(\r\n            (color) => color.r === c.r &&\r\n                color.g === c.g &&\r\n                color.b === c.b &&\r\n                color.a === c.a\r\n        );\r\n\r\n        let attemps = 0;\r\n\r\n        while (exists) {\r\n\r\n            if (attemps > 50) break;\r\n\r\n            c = {r: this.getRandomInt(0, 255), g: this.getRandomInt(0, 255), b: this.getRandomInt(0, 255), a: 1};\r\n\r\n            exists = this.colorUsed.some(\r\n                (color) => color.r === c.r &&\r\n                    color.g === c.g &&\r\n                    color.b === c.b &&\r\n                    color.a === c.a\r\n            );\r\n\r\n            attemps++;\r\n        }\r\n\r\n        this.colorUsed.push(c);\r\n\r\n        return c;\r\n    }\r\n\r\n    parse(area: string) {\r\n\r\n        // Is code valid?\r\n        const lines = area.split(\"\\n\");\r\n        let valid = true;\r\n        let currentState = \"\";\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const line = lines[i];\r\n\r\n            // Ignore comments\r\n            if (line.startsWith('#') || line.startsWith('//')) continue;\r\n\r\n            // If it doesn't start with a space, it is the start of a state definition\r\n            if (!line.startsWith(' ')) {\r\n                const state = line.split(\":\")[0];\r\n                this.states[state] = [];\r\n                currentState = state;\r\n            }\r\n\r\n            // If it does, it is a value in a state definition\r\n            else {\r\n\r\n                // Get rid of spaces\r\n                const new_line = line.replace(/\\s+/g, '');\r\n\r\n                // Check if there is a : - if so, its a value, if not, its either Start or Final keywords\r\n                if (new_line.includes(':')) {\r\n                    const state = new_line.split(\":\")[0];\r\n                    const values = new_line.split(\":\")[1].split(\",\");\r\n\r\n                    this.states[currentState].push({state: state, values: values});\r\n                }\r\n                // Keywords\r\n                else {\r\n\r\n                    // Set the starting state\r\n                    if (new_line.toUpperCase() === \"START\") {\r\n                        this.startingState = currentState;\r\n                    }\r\n\r\n                    // Add onto the final states\r\n                    if (new_line.toUpperCase() === \"FINAL\") {\r\n                        this.finalStates.push(currentState);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Is there a starting state? If not, cause error\r\n        if (this.startingState === null) {\r\n            valid = false;\r\n        }\r\n\r\n        // Is there any final states? Is not, cause error\r\n        if (this.finalStates.length <= 0) {\r\n            valid = false;\r\n        }\r\n\r\n        // If valid, generate animation / structure\r\n        if (valid) {\r\n\r\n            let indexStates : Record<string, number> | null = {};\r\n            let colorStates : Record<string, Color> = {};\r\n\r\n            let index = 0;\r\n            for (const state in this.states) {\r\n\r\n                indexStates[state] = index;\r\n                colorStates[state] = this.generateNewColor();\r\n\r\n                //const stateArray = this.states[state];\r\n\r\n                //stateArray.forEach((value) => {\r\n                //    this.animator.addInstruction(new FAAddInstruction(index, value, ))\r\n                //});\r\n\r\n                let isStarting = state === this.startingState;\r\n                let isFinal = this.finalStates.includes(state);\r\n\r\n                this.animator.addInstruction(new FAAddInstruction(index, state, Object.keys(this.states).length, this.states[state], indexStates, colorStates, isStarting, isFinal));\r\n\r\n                index += 1;\r\n            }\r\n\r\n            this.animator.processInstructions();\r\n        }\r\n\r\n    }\r\n\r\n    clear(): void {\r\n        const svg = d3.select(\"#svg-container\").attr(\"width\", 500).attr(\"height\", 500);\r\n        svg.selectAll(\"*\").remove();\r\n\r\n    }\r\n\r\n    delete(value: string | number): void {\r\n    }\r\n\r\n    generate_random(min: number, max: number, size: number, allowStrings: boolean, allowNumbers: boolean, allowDecimal: boolean, maxDecimal: number, regex: string, stringLengthMin: number, stringLengthMax: number): void {\r\n    }\r\n\r\n    insert(value: string | number): void {\r\n    }\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}