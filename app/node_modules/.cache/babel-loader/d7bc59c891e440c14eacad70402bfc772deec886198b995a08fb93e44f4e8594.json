{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Micha\\\\Documents\\\\GitHub\\\\dynamic-algorithm-visualizer\\\\app\\\\src\\\\components\\\\algorithms\\\\min_heap.tsx\";\nimport * as d3 from \"d3\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class MinHeap {\n  constructor() {\n    this.svgRef = /*#__PURE__*/React.createRef();\n    this.renderTree = () => {\n      const svg = d3.select(this.svgRef.current);\n      const margin = {\n        top: 20,\n        right: 90,\n        bottom: 30,\n        left: 90\n      };\n      const width = 960 - margin.left - margin.right;\n      const height = 500 - margin.top - margin.bottom;\n      svg.attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n      const treeLayout = d3.tree().size([height, width]);\n      const root = d3.hierarchy(treeData);\n      const treeDataProcessed = treeLayout(root);\n      svg.selectAll(\".link\").data(treeDataProcessed.links()).enter().append(\"line\").attr(\"class\", \"link\").attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y).attr(\"stroke\", \"#ccc\").attr(\"stroke-width\", 2);\n      const node = svg.selectAll(\".node\").data(treeDataProcessed.descendants()).enter().append(\"g\").attr(\"class\", \"node\").attr(\"transform\", d => `translate(${d.x},${d.y})`);\n      node.append(\"circle\").attr(\"r\", 10).attr(\"fill\", \"#69b3a2\");\n\n      // Cast `d` to `d3.HierarchyNode<TreeNodeData>` to tell TypeScript about the structure\n      node.append(\"text\").attr(\"dx\", 12).attr(\"dy\", 3).text(d => {\n        return d.data.name; // Now TypeScript knows d is of type d3.HierarchyNode<TreeNodeData>\n      });\n    };\n  }\n  componentDidMount() {\n    this.renderTree();\n  }\n  display() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: this.svgRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this);\n  }\n}\nconst treeData = {\n  name: \"Root\",\n  children: [{\n    name: \"Child 1\",\n    children: [{\n      name: \"Child 1.1\"\n    }, {\n      name: \"Child 1.2\"\n    }]\n  }, {\n    name: \"Child 2\",\n    children: [{\n      name: \"Child 2.1\"\n    }]\n  }]\n};","map":{"version":3,"names":["d3","React","jsxDEV","_jsxDEV","MinHeap","constructor","svgRef","createRef","renderTree","svg","select","current","margin","top","right","bottom","left","width","height","attr","append","treeLayout","tree","size","root","hierarchy","treeData","treeDataProcessed","selectAll","data","links","enter","d","source","x","y","target","node","descendants","text","name","componentDidMount","display","children","ref","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/algorithms/min_heap.tsx"],"sourcesContent":["import {Algorithm} from \"./algorithm_interface\";\r\nimport * as d3 from \"d3\";\r\nimport React from \"react\";\r\n\r\nexport class MinHeap implements Algorithm {\r\n\r\n    private svgRef = React.createRef<SVGSVGElement>();\r\n\r\n    renderTree = () => {\r\n        const svg = d3.select(this.svgRef.current);\r\n        const margin = { top: 20, right: 90, bottom: 30, left: 90 };\r\n        const width = 960 - margin.left - margin.right;\r\n        const height = 500 - margin.top - margin.bottom;\r\n\r\n        svg\r\n            .attr(\"width\", width + margin.left + margin.right)\r\n            .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n        const treeLayout = d3.tree().size([height, width]);\r\n\r\n        const root = d3.hierarchy(treeData);\r\n        const treeDataProcessed = treeLayout(root);\r\n\r\n        svg\r\n            .selectAll(\".link\")\r\n            .data(treeDataProcessed.links())\r\n            .enter()\r\n            .append(\"line\")\r\n            .attr(\"class\", \"link\")\r\n            .attr(\"x1\", (d) => d.source.x)\r\n            .attr(\"y1\", (d) => d.source.y)\r\n            .attr(\"x2\", (d) => d.target.x)\r\n            .attr(\"y2\", (d) => d.target.y)\r\n            .attr(\"stroke\", \"#ccc\")\r\n            .attr(\"stroke-width\", 2);\r\n\r\n        const node = svg\r\n            .selectAll(\".node\")\r\n            .data(treeDataProcessed.descendants())\r\n            .enter()\r\n            .append(\"g\")\r\n            .attr(\"class\", \"node\")\r\n            .attr(\"transform\", (d) => `translate(${d.x},${d.y})`);\r\n\r\n        node\r\n            .append(\"circle\")\r\n            .attr(\"r\", 10)\r\n            .attr(\"fill\", \"#69b3a2\");\r\n\r\n        // Cast `d` to `d3.HierarchyNode<TreeNodeData>` to tell TypeScript about the structure\r\n        node\r\n            .append(\"text\")\r\n            .attr(\"dx\", 12)\r\n            .attr(\"dy\", 3)\r\n            .text((d: d3.HierarchyNode<TreeNodeData>) => {\r\n                return d.data.name; // Now TypeScript knows d is of type d3.HierarchyNode<TreeNodeData>\r\n            });\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.renderTree();\r\n    }\r\n\r\n\r\n\r\n    display() {\r\n\r\n        return (\r\n            <div>\r\n                <svg ref={this.svgRef}></svg>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\ninterface TreeNodeData {\r\n    name: string;\r\n    children?: TreeNodeData[];\r\n}\r\n\r\nconst treeData: TreeNodeData = {\r\n    name: \"Root\",\r\n    children: [\r\n        {\r\n            name: \"Child 1\",\r\n            children: [\r\n                { name: \"Child 1.1\" },\r\n                { name: \"Child 1.2\" }\r\n            ]\r\n        },\r\n        {\r\n            name: \"Child 2\",\r\n            children: [\r\n                { name: \"Child 2.1\" }\r\n            ]\r\n        }\r\n    ]\r\n};\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}