{"ast":null,"code":"// Counter to generate unique IDs for curved paths\nlet pathIdCounter = 0;\nexport class FAAddAllInstruction {\n  constructor(graph) {\n    this.graph = void 0;\n    this.graph = graph;\n  }\n  async process(svg) {\n    const nodeTransitions = [];\n    const labelTransitions = [];\n    // Ensure the 'lines' group is added first so lines are behind nodes and labels\n    const linesGroup = svg.append(\"g\").attr(\"id\", \"lines\");\n    const nodesGroup = svg.append(\"g\");\n    let indexNodes = new Map();\n    let index = 0;\n    const total = this.graph.get_nodes().size;\n\n    // Draw all nodes\n    this.graph.get_nodes().forEach((node, value) => {\n      const pos = this.getPosition(index, total, 350, 200);\n      const current_node = this.createNode(nodesGroup, pos.x, pos.y);\n      const label = this.createLabel(nodesGroup, pos, value);\n      const node_transition = this.applyNodeTransition(current_node, pos);\n      const label_transition = this.applyLabelTransition(label, pos);\n      indexNodes.set(value, [index++, current_node]);\n      nodeTransitions.push(node_transition);\n      labelTransitions.push(label_transition);\n    });\n\n    // Draw connectors\n    this.graph.get_nodes().forEach((node, value) => {\n      let pointers = this.graph.get_pointers(value);\n      if (pointers != null && pointers.size > 0) {\n        const entry = indexNodes.get(value);\n        if (!entry) return; // safety check\n\n        const [index, currentNode] = entry;\n        const current_node_pos = this.getPosition(index, total, 350, 200);\n        pointers.forEach((weights, pointer) => {\n          const targetEntry = indexNodes.get(pointer.get_value());\n          if (!targetEntry) return;\n          const [targetIndex, _] = targetEntry;\n          const target_node_pos = this.getPosition(targetIndex, total, 350, 200);\n          if (this.hasMutualPointer(value, pointer.get_value())) {\n            const curvedPath = this.createCurvedLine(linesGroup, current_node_pos, target_node_pos, 0.12);\n            // Pass the curved path selection to createLineLabel\n            this.createLineLabel(linesGroup, curvedPath, weights);\n          } else {\n            const straightLine = this.createLine(linesGroup, current_node_pos, target_node_pos);\n            // Use a type assertion here to tell TypeScript it's the correct union type\n            this.createLineLabel(linesGroup, straightLine, weights);\n          }\n        });\n      }\n    });\n    await Promise.all([...nodeTransitions, ...labelTransitions]);\n  }\n\n  // Creates a label for a line (edge) {Mostly generated through gpt and gemini -- edited by michael}\n  // Creates labels for a line (edge) - handles multiple weights\n  createLineLabel(group, lineOrPath, txts) {\n    // Return an array of text selections\n\n    const isLine = lineOrPath.node() instanceof SVGLineElement;\n    const createdLabels = [];\n    txts.forEach((txt, index) => {\n      // Append a text element for each weight\n      const text = group.append(\"text\").style(\"fill\", \"red\").style(\"font-size\", \"16px\").style(\"pointer-events\", \"none\");\n      if (isLine) {\n        const line = lineOrPath;\n        const x1 = parseFloat(line.attr(\"x1\"));\n        const y1 = parseFloat(line.attr(\"y1\"));\n        const x2 = parseFloat(line.attr(\"x2\"));\n        const y2 = parseFloat(line.attr(\"y2\"));\n\n        // Calculate midpoint\n        const midX = (x1 + x2) / 2;\n        const midY = (y1 + y2) / 2 - 10;\n\n        // Calculate perpendicular offset\n        const dx = x2 - x1;\n        const dy = y2 - y1;\n        const lineLength = Math.sqrt(dx * dx + dy * dy);\n        // Add a small check for zero length to avoid division by zero\n        const offsetX = lineLength === 0 ? 0 : -dy / lineLength;\n        const offsetY = lineLength === 0 ? 0 : -dx / lineLength;\n\n        // Adjust position based on the index for multiple labels\n        const labelSpacing = 15; // Adjust this value for desired spacing\n        const totalOffset = (index - (txts.length - 1) / 2) * labelSpacing; // Center the labels around the midpoint\n\n        text.attr(\"x\", midX + offsetX * totalOffset).attr(\"y\", midY + offsetY * totalOffset).attr(\"text-anchor\", \"middle\").attr(\"alignment-baseline\", \"middle\").text(txt);\n      } else {\n        const path = lineOrPath;\n        const pathId = path.attr(\"id\");\n\n        // Adjust startOffset for each label along the curve\n        const startOffset = 80 + (index - (txts.length - 1) / 2) * 10;\n        text.append(\"textPath\").attr(\"xlink:href\", `#${pathId}`) // Use the ID directly\n        .attr(\"startOffset\", `${startOffset}%`).attr(\"text-anchor\", \"middle\").text(txt);\n      }\n      createdLabels.push(text);\n    });\n    return createdLabels; // Return the array of created labels\n  }\n  hasMutualPointer(from, to) {\n    const fromPointers = this.graph.get_pointers(from);\n    const toPointers = this.graph.get_pointers(to);\n    if (!fromPointers || !toPointers) return false;\n\n    // Console logs can be removed in production code\n    // console.log(\"From Node:\", this.graph.get_node(from));\n    // console.log(\"To Node:\", this.graph.get_node(to));\n    // console.log(\"From Pointers:\", fromPointers);\n    // console.log(\"To Pointers:\", toPointers);\n    // console.log(\"From has To?\", fromPointers.has(this.graph.get_node(to) as FA_Node));\n    // console.log(\"To has From?\", toPointers.has(this.graph.get_node(from) as FA_Node));\n\n    return fromPointers.has(this.graph.get_node(to)) && toPointers.has(this.graph.get_node(from));\n  }\n  createCurvedLine(group, from, to, curvature = 0.3) {\n    // Midpoint between from and to\n    const midX = (from.x + to.x) / 2;\n    const midY = (from.y + to.y) / 2;\n\n    // Offset for the curve (perpendicular to the line)\n    const dx = to.x - from.x;\n    const dy = to.y - from.y;\n    const norm = Math.sqrt(dx * dx + dy * dy);\n    const offsetX = -dy * curvature;\n    const offsetY = dx * curvature;\n    const controlX = midX + offsetX;\n    const controlY = midY + offsetY;\n    const pathData = `M ${from.x} ${from.y} Q ${controlX} ${controlY}, ${to.x} ${to.y}`;\n    const uniqueId = `curved-path-${pathIdCounter++}`; // Generate a unique ID\n\n    return group.append(\"path\").attr(\"id\", uniqueId) // Assign the unique ID\n    .attr(\"d\", pathData).attr(\"fill\", \"none\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"marker-end\", \"url(#arrow)\");\n  }\n  createLine(svgGroup, start, end, strokeColor = \"black\", strokeWidth = 2, opacity = 1) {\n    return svgGroup.append(\"line\").attr(\"x1\", start.x).attr(\"y1\", start.y).attr(\"x2\", end.x).attr(\"y2\", end.y).attr(\"stroke\", strokeColor).attr(\"stroke-width\", strokeWidth).style(\"opacity\", opacity).attr(\"marker-end\", \"url(#arrow)\");\n  }\n  createLabel(nodesGroup, position, txt) {\n    return nodesGroup.append(\"text\").attr(\"x\", position.x).attr(\"y\", position.y).attr(\"class\", \"label\").attr(\"text-anchor\", \"middle\").attr(\"alignment-baseline\", \"middle\").style(\"fill\", \"black\").style(\"font-size\", \"20px\").text(txt);\n  }\n  createNode(nodesGroup, cx, cy, r = 20, className = \"node\", opacity = 0) {\n    return nodesGroup.append(\"circle\").attr(\"cx\", cx).attr(\"cy\", cy).attr(\"r\", r).attr(\"class\", className).style(\"opacity\", opacity);\n  }\n  applyNodeTransition(node, position, duration = 1000) {\n    return new Promise(resolve => {\n      node.transition().duration(duration).attr(\"cx\", position.x).attr(\"cy\", position.y).style(\"opacity\", 1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"fill\", \"white\").on(\"end\", () => resolve());\n    });\n  }\n  applyLabelTransition(label, position, duration = 1000) {\n    return new Promise(resolve => {\n      label.transition().duration(duration).style(\"opacity\", 1).attr(\"x\", position.x).attr(\"y\", position.y).on(\"end\", () => resolve());\n    });\n  }\n\n  // Gets the position in a shaped form\n  getPosition(index, numberOfNodes, centerX, centerY, radius = 150) {\n    const angle = 2 * Math.PI * index / numberOfNodes;\n\n    // Calculate x and y coordinates using polar to Cartesian conversion\n    const x = radius * Math.cos(angle);\n    const y = radius * Math.sin(angle);\n    return {\n      x: x + centerX,\n      y: y + centerY\n    };\n  }\n}","map":{"version":3,"names":["pathIdCounter","FAAddAllInstruction","constructor","graph","process","svg","nodeTransitions","labelTransitions","linesGroup","append","attr","nodesGroup","indexNodes","Map","index","total","get_nodes","size","forEach","node","value","pos","getPosition","current_node","createNode","x","y","label","createLabel","node_transition","applyNodeTransition","label_transition","applyLabelTransition","set","push","pointers","get_pointers","entry","get","currentNode","current_node_pos","weights","pointer","targetEntry","get_value","targetIndex","_","target_node_pos","hasMutualPointer","curvedPath","createCurvedLine","createLineLabel","straightLine","createLine","Promise","all","group","lineOrPath","txts","isLine","SVGLineElement","createdLabels","txt","text","style","line","x1","parseFloat","y1","x2","y2","midX","midY","dx","dy","lineLength","Math","sqrt","offsetX","offsetY","labelSpacing","totalOffset","length","path","pathId","startOffset","from","to","fromPointers","toPointers","has","get_node","curvature","norm","controlX","controlY","pathData","uniqueId","svgGroup","start","end","strokeColor","strokeWidth","opacity","position","cx","cy","r","className","duration","resolve","transition","on","numberOfNodes","centerX","centerY","radius","angle","PI","cos","sin"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/fa_add_all_instruction.tsx"],"sourcesContent":["import {Instruction} from \"./i_instruction\";\r\nimport {BaseType, Selection} from \"d3\";\r\nimport {FA_Graph} from \"../structures/fa_graph\";\r\nimport {FA_Node} from \"../structures/fa_node\";\r\n\r\n// Counter to generate unique IDs for curved paths\r\nlet pathIdCounter = 0;\r\n\r\nexport class FAAddAllInstruction implements Instruction {\r\n\r\n    private graph: FA_Graph;\r\n\r\n    constructor(graph: FA_Graph) {\r\n        this.graph = graph;\r\n    }\r\n\r\n    async process(svg: Selection<BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n        const nodeTransitions: Promise<void>[] = [];\r\n        const labelTransitions: Promise<void>[] = [];\r\n        // Ensure the 'lines' group is added first so lines are behind nodes and labels\r\n        const linesGroup = svg.append(\"g\").attr(\"id\", \"lines\") as unknown as d3.Selection<SVGGElement, unknown, null, undefined>;\r\n\r\n        const nodesGroup = (svg.append(\"g\") as unknown) as Selection<SVGGElement, unknown, null, undefined>;\r\n\r\n        let indexNodes: Map<string | number, [number, d3.Selection<SVGCircleElement, unknown, null, undefined>]> = new Map();\r\n        let index = 0;\r\n        const total = this.graph.get_nodes().size;\r\n\r\n        // Draw all nodes\r\n        this.graph.get_nodes().forEach((node, value) => {\r\n            const pos = this.getPosition(index, total, 350, 200);\r\n            const current_node = this.createNode(nodesGroup, pos.x, pos.y);\r\n            const label = this.createLabel(nodesGroup, pos, value as string)\r\n            const node_transition = this.applyNodeTransition(current_node, pos);\r\n            const label_transition = this.applyLabelTransition(label, pos);\r\n\r\n            indexNodes.set(value, [index++, current_node]);\r\n            nodeTransitions.push(node_transition);\r\n            labelTransitions.push(label_transition);\r\n        });\r\n\r\n        // Draw connectors\r\n        this.graph.get_nodes().forEach((node, value) => {\r\n\r\n            let pointers = this.graph.get_pointers(value);\r\n\r\n            if (pointers != null && pointers.size > 0) {\r\n\r\n                const entry = indexNodes.get(value);\r\n                if (!entry) return; // safety check\r\n\r\n                const [index, currentNode] = entry;\r\n                const current_node_pos = this.getPosition(index, total, 350, 200);\r\n\r\n                pointers.forEach((weights, pointer) => {\r\n                    const targetEntry = indexNodes.get(pointer.get_value());\r\n                    if (!targetEntry) return;\r\n\r\n                    const [targetIndex, _] = targetEntry;\r\n                    const target_node_pos = this.getPosition(targetIndex, total, 350, 200);\r\n\r\n                    if (this.hasMutualPointer(value, pointer.get_value())){\r\n                        const curvedPath = this.createCurvedLine(linesGroup, current_node_pos, target_node_pos, 0.12);\r\n                        // Pass the curved path selection to createLineLabel\r\n                        this.createLineLabel(linesGroup, curvedPath, weights as string[]);\r\n                    }\r\n                    else\r\n                    {\r\n                        const straightLine = this.createLine(linesGroup, current_node_pos, target_node_pos);\r\n                        // Use a type assertion here to tell TypeScript it's the correct union type\r\n                        this.createLineLabel(linesGroup, straightLine as d3.Selection<SVGLineElement | SVGPathElement, unknown, null, undefined>, weights as string[]);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n\r\n        await Promise.all([...nodeTransitions, ...labelTransitions]);\r\n    }\r\n\r\n    // Creates a label for a line (edge) {Mostly generated through gpt and gemini -- edited by michael}\r\n    // Creates labels for a line (edge) - handles multiple weights\r\n    createLineLabel(\r\n        group: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n        lineOrPath: d3.Selection<SVGLineElement | SVGPathElement, unknown, null, undefined>,\r\n        txts: string[] // Accept an array of strings\r\n    ): d3.Selection<SVGTextElement, unknown, null, undefined>[] { // Return an array of text selections\r\n\r\n        const isLine = lineOrPath.node() instanceof SVGLineElement;\r\n        const createdLabels: d3.Selection<SVGTextElement, unknown, null, undefined>[] = [];\r\n\r\n        txts.forEach((txt, index) => {\r\n            // Append a text element for each weight\r\n            const text = group.append(\"text\")\r\n                .style(\"fill\", \"red\")\r\n                .style(\"font-size\", \"16px\")\r\n                .style(\"pointer-events\", \"none\");\r\n\r\n            if (isLine) {\r\n                const line = lineOrPath as d3.Selection<SVGLineElement, unknown, null, undefined>;\r\n                const x1 = parseFloat(line.attr(\"x1\"));\r\n                const y1 = parseFloat(line.attr(\"y1\"));\r\n                const x2 = parseFloat(line.attr(\"x2\"));\r\n                const y2 = parseFloat(line.attr(\"y2\"));\r\n\r\n                // Calculate midpoint\r\n                const midX = (x1 + x2) / 2;\r\n                const midY = (y1 + y2) / 2 - 10;\r\n\r\n                // Calculate perpendicular offset\r\n                const dx = x2 - x1;\r\n                const dy = y2 - y1;\r\n                const lineLength = Math.sqrt(dx * dx + dy * dy);\r\n                // Add a small check for zero length to avoid division by zero\r\n                const offsetX = lineLength === 0 ? 0 : (-dy / lineLength);\r\n                const offsetY = lineLength === 0 ? 0 : (-dx / lineLength);\r\n\r\n                // Adjust position based on the index for multiple labels\r\n                const labelSpacing = 15; // Adjust this value for desired spacing\r\n                const totalOffset = (index - (txts.length - 1) / 2) * labelSpacing; // Center the labels around the midpoint\r\n\r\n                text.attr(\"x\", midX + offsetX * totalOffset)\r\n                    .attr(\"y\", midY + offsetY * totalOffset)\r\n                    .attr(\"text-anchor\", \"middle\")\r\n                    .attr(\"alignment-baseline\", \"middle\")\r\n                    .text(txt);\r\n\r\n            } else {\r\n                const path = lineOrPath as d3.Selection<SVGPathElement, unknown, null, undefined>;\r\n                const pathId = path.attr(\"id\");\r\n\r\n                // Adjust startOffset for each label along the curve\r\n                const startOffset = 80 + (index - (txts.length - 1) / 2) * 10;\r\n\r\n                text.append(\"textPath\")\r\n                    .attr(\"xlink:href\", `#${pathId}`) // Use the ID directly\r\n                    .attr(\"startOffset\", `${startOffset}%`)\r\n                    .attr(\"text-anchor\", \"middle\")\r\n                    .text(txt);\r\n            }\r\n            createdLabels.push(text);\r\n        });\r\n\r\n        return createdLabels; // Return the array of created labels\r\n    }\r\n\r\n    hasMutualPointer(from: string | number, to: string | number): boolean {\r\n        const fromPointers = this.graph.get_pointers(from);\r\n        const toPointers = this.graph.get_pointers(to);\r\n\r\n        if (!fromPointers || !toPointers) return false;\r\n\r\n        // Console logs can be removed in production code\r\n        // console.log(\"From Node:\", this.graph.get_node(from));\r\n        // console.log(\"To Node:\", this.graph.get_node(to));\r\n        // console.log(\"From Pointers:\", fromPointers);\r\n        // console.log(\"To Pointers:\", toPointers);\r\n        // console.log(\"From has To?\", fromPointers.has(this.graph.get_node(to) as FA_Node));\r\n        // console.log(\"To has From?\", toPointers.has(this.graph.get_node(from) as FA_Node));\r\n\r\n        return fromPointers.has(this.graph.get_node(to) as FA_Node) && toPointers.has(this.graph.get_node(from) as FA_Node);\r\n    }\r\n\r\n\r\n    createCurvedLine(\r\n        group: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n        from: { x: number, y: number },\r\n        to: { x: number, y: number },\r\n        curvature: number = 0.3\r\n    ): d3.Selection<SVGPathElement, unknown, null, undefined> {\r\n\r\n        // Midpoint between from and to\r\n        const midX = (from.x + to.x) / 2;\r\n        const midY = (from.y + to.y) / 2;\r\n\r\n        // Offset for the curve (perpendicular to the line)\r\n        const dx = to.x - from.x;\r\n        const dy = to.y - from.y;\r\n        const norm = Math.sqrt(dx * dx + dy * dy);\r\n        const offsetX = -dy * curvature;\r\n        const offsetY = dx * curvature;\r\n\r\n        const controlX = midX + offsetX;\r\n        const controlY = midY + offsetY;\r\n\r\n        const pathData = `M ${from.x} ${from.y} Q ${controlX} ${controlY}, ${to.x} ${to.y}`;\r\n\r\n        const uniqueId = `curved-path-${pathIdCounter++}`; // Generate a unique ID\r\n\r\n        return group.append(\"path\")\r\n            .attr(\"id\", uniqueId) // Assign the unique ID\r\n            .attr(\"d\", pathData)\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke\", \"black\")\r\n            .attr(\"stroke-width\", 2)\r\n            .attr(\"marker-end\", \"url(#arrow)\");\r\n    }\r\n\r\n    createLine(\r\n        svgGroup: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n        start: { x: number; y: number },\r\n        end: { x: number; y: number },\r\n        strokeColor: string = \"black\",\r\n        strokeWidth: number = 2,\r\n        opacity: number = 1\r\n    ): d3.Selection<SVGLineElement, unknown, null, undefined> {\r\n        return svgGroup.append(\"line\")\r\n            .attr(\"x1\", start.x)\r\n            .attr(\"y1\", start.y)\r\n            .attr(\"x2\", end.x)\r\n            .attr(\"y2\", end.y)\r\n            .attr(\"stroke\", strokeColor)\r\n            .attr(\"stroke-width\", strokeWidth)\r\n            .style(\"opacity\", opacity)\r\n            .attr(\"marker-end\", \"url(#arrow)\");\r\n    }\r\n\r\n\r\n    createLabel(nodesGroup: d3.Selection<SVGGElement, unknown, null, undefined>, position: { x: number, y: number }, txt: string): d3.Selection<SVGTextElement, unknown, null, undefined> {\r\n        return nodesGroup.append(\"text\")\r\n            .attr(\"x\", position.x)\r\n            .attr(\"y\", position.y)\r\n            .attr(\"class\", \"label\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .attr(\"alignment-baseline\", \"middle\")\r\n            .style(\"fill\", \"black\")\r\n            .style(\"font-size\", \"20px\")\r\n            .text(txt);\r\n    }\r\n\r\n\r\n    createNode(nodesGroup: d3.Selection<SVGGElement, unknown, null, undefined>, cx: number, cy: number, r: number = 20,\r\n               className: string = \"node\", opacity: number = 0\r\n    ): d3.Selection<SVGCircleElement, unknown, null, undefined> {\r\n\r\n        return nodesGroup.append(\"circle\")\r\n            .attr(\"cx\", cx)\r\n            .attr(\"cy\", cy)\r\n            .attr(\"r\", r)\r\n            .attr(\"class\", className)\r\n            .style(\"opacity\", opacity);\r\n    }\r\n\r\n    applyNodeTransition(\r\n        node: d3.Selection<SVGCircleElement, unknown, null, undefined>,\r\n        position: { x: number; y: number },\r\n        duration: number = 1000\r\n    ): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            node.transition()\r\n                .duration(duration)\r\n                .attr(\"cx\", position.x)\r\n                .attr(\"cy\", position.y)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"stroke\", \"black\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"white\")\r\n                .on(\"end\", () => resolve());\r\n        });\r\n    }\r\n\r\n    applyLabelTransition(\r\n        label: d3.Selection<SVGTextElement, unknown, null, undefined>,\r\n        position: { x: number; y: number },\r\n        duration: number = 1000\r\n    ): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            label.transition()\r\n                .duration(duration)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"x\", position.x)\r\n                .attr(\"y\", position.y)\r\n                .on(\"end\", () => resolve());\r\n        });\r\n    }\r\n\r\n\r\n    // Gets the position in a shaped form\r\n    getPosition(index: number, numberOfNodes: number, centerX: number, centerY: number, radius: number = 150) {\r\n        const angle = (2 * Math.PI * index) / numberOfNodes;\r\n\r\n        // Calculate x and y coordinates using polar to Cartesian conversion\r\n        const x = radius * Math.cos(angle);\r\n        const y = radius * Math.sin(angle);\r\n\r\n        return { x: x + centerX, y: y + centerY };\r\n    }\r\n\r\n}"],"mappings":"AAKA;AACA,IAAIA,aAAa,GAAG,CAAC;AAErB,OAAO,MAAMC,mBAAmB,CAAwB;EAIpDC,WAAWA,CAACC,KAAe,EAAE;IAAA,KAFrBA,KAAK;IAGT,IAAI,CAACA,KAAK,GAAGA,KAAK;EACtB;EAEA,MAAMC,OAAOA,CAACC,GAAmD,EAAiB;IAC9E,MAAMC,eAAgC,GAAG,EAAE;IAC3C,MAAMC,gBAAiC,GAAG,EAAE;IAC5C;IACA,MAAMC,UAAU,GAAGH,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAmE;IAExH,MAAMC,UAAU,GAAIN,GAAG,CAACI,MAAM,CAAC,GAAG,CAAiE;IAEnG,IAAIG,UAAoG,GAAG,IAAIC,GAAG,CAAC,CAAC;IACpH,IAAIC,KAAK,GAAG,CAAC;IACb,MAAMC,KAAK,GAAG,IAAI,CAACZ,KAAK,CAACa,SAAS,CAAC,CAAC,CAACC,IAAI;;IAEzC;IACA,IAAI,CAACd,KAAK,CAACa,SAAS,CAAC,CAAC,CAACE,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAC5C,MAAMC,GAAG,GAAG,IAAI,CAACC,WAAW,CAACR,KAAK,EAAEC,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC;MACpD,MAAMQ,YAAY,GAAG,IAAI,CAACC,UAAU,CAACb,UAAU,EAAEU,GAAG,CAACI,CAAC,EAAEJ,GAAG,CAACK,CAAC,CAAC;MAC9D,MAAMC,KAAK,GAAG,IAAI,CAACC,WAAW,CAACjB,UAAU,EAAEU,GAAG,EAAED,KAAe,CAAC;MAChE,MAAMS,eAAe,GAAG,IAAI,CAACC,mBAAmB,CAACP,YAAY,EAAEF,GAAG,CAAC;MACnE,MAAMU,gBAAgB,GAAG,IAAI,CAACC,oBAAoB,CAACL,KAAK,EAAEN,GAAG,CAAC;MAE9DT,UAAU,CAACqB,GAAG,CAACb,KAAK,EAAE,CAACN,KAAK,EAAE,EAAES,YAAY,CAAC,CAAC;MAC9CjB,eAAe,CAAC4B,IAAI,CAACL,eAAe,CAAC;MACrCtB,gBAAgB,CAAC2B,IAAI,CAACH,gBAAgB,CAAC;IAC3C,CAAC,CAAC;;IAEF;IACA,IAAI,CAAC5B,KAAK,CAACa,SAAS,CAAC,CAAC,CAACE,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAE5C,IAAIe,QAAQ,GAAG,IAAI,CAAChC,KAAK,CAACiC,YAAY,CAAChB,KAAK,CAAC;MAE7C,IAAIe,QAAQ,IAAI,IAAI,IAAIA,QAAQ,CAAClB,IAAI,GAAG,CAAC,EAAE;QAEvC,MAAMoB,KAAK,GAAGzB,UAAU,CAAC0B,GAAG,CAAClB,KAAK,CAAC;QACnC,IAAI,CAACiB,KAAK,EAAE,OAAO,CAAC;;QAEpB,MAAM,CAACvB,KAAK,EAAEyB,WAAW,CAAC,GAAGF,KAAK;QAClC,MAAMG,gBAAgB,GAAG,IAAI,CAAClB,WAAW,CAACR,KAAK,EAAEC,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC;QAEjEoB,QAAQ,CAACjB,OAAO,CAAC,CAACuB,OAAO,EAAEC,OAAO,KAAK;UACnC,MAAMC,WAAW,GAAG/B,UAAU,CAAC0B,GAAG,CAACI,OAAO,CAACE,SAAS,CAAC,CAAC,CAAC;UACvD,IAAI,CAACD,WAAW,EAAE;UAElB,MAAM,CAACE,WAAW,EAAEC,CAAC,CAAC,GAAGH,WAAW;UACpC,MAAMI,eAAe,GAAG,IAAI,CAACzB,WAAW,CAACuB,WAAW,EAAE9B,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC;UAEtE,IAAI,IAAI,CAACiC,gBAAgB,CAAC5B,KAAK,EAAEsB,OAAO,CAACE,SAAS,CAAC,CAAC,CAAC,EAAC;YAClD,MAAMK,UAAU,GAAG,IAAI,CAACC,gBAAgB,CAAC1C,UAAU,EAAEgC,gBAAgB,EAAEO,eAAe,EAAE,IAAI,CAAC;YAC7F;YACA,IAAI,CAACI,eAAe,CAAC3C,UAAU,EAAEyC,UAAU,EAAER,OAAmB,CAAC;UACrE,CAAC,MAED;YACI,MAAMW,YAAY,GAAG,IAAI,CAACC,UAAU,CAAC7C,UAAU,EAAEgC,gBAAgB,EAAEO,eAAe,CAAC;YACnF;YACA,IAAI,CAACI,eAAe,CAAC3C,UAAU,EAAE4C,YAAY,EAA6EX,OAAmB,CAAC;UAClJ;QACJ,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;IAGF,MAAMa,OAAO,CAACC,GAAG,CAAC,CAAC,GAAGjD,eAAe,EAAE,GAAGC,gBAAgB,CAAC,CAAC;EAChE;;EAEA;EACA;EACA4C,eAAeA,CACXK,KAA0D,EAC1DC,UAAmF,EACnFC,IAAc,EAC0C;IAAE;;IAE1D,MAAMC,MAAM,GAAGF,UAAU,CAACtC,IAAI,CAAC,CAAC,YAAYyC,cAAc;IAC1D,MAAMC,aAAuE,GAAG,EAAE;IAElFH,IAAI,CAACxC,OAAO,CAAC,CAAC4C,GAAG,EAAEhD,KAAK,KAAK;MACzB;MACA,MAAMiD,IAAI,GAAGP,KAAK,CAAC/C,MAAM,CAAC,MAAM,CAAC,CAC5BuD,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CACpBA,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAC1BA,KAAK,CAAC,gBAAgB,EAAE,MAAM,CAAC;MAEpC,IAAIL,MAAM,EAAE;QACR,MAAMM,IAAI,GAAGR,UAAoE;QACjF,MAAMS,EAAE,GAAGC,UAAU,CAACF,IAAI,CAACvD,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,MAAM0D,EAAE,GAAGD,UAAU,CAACF,IAAI,CAACvD,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,MAAM2D,EAAE,GAAGF,UAAU,CAACF,IAAI,CAACvD,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,MAAM4D,EAAE,GAAGH,UAAU,CAACF,IAAI,CAACvD,IAAI,CAAC,IAAI,CAAC,CAAC;;QAEtC;QACA,MAAM6D,IAAI,GAAG,CAACL,EAAE,GAAGG,EAAE,IAAI,CAAC;QAC1B,MAAMG,IAAI,GAAG,CAACJ,EAAE,GAAGE,EAAE,IAAI,CAAC,GAAG,EAAE;;QAE/B;QACA,MAAMG,EAAE,GAAGJ,EAAE,GAAGH,EAAE;QAClB,MAAMQ,EAAE,GAAGJ,EAAE,GAAGF,EAAE;QAClB,MAAMO,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACJ,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;QAC/C;QACA,MAAMI,OAAO,GAAGH,UAAU,KAAK,CAAC,GAAG,CAAC,GAAI,CAACD,EAAE,GAAGC,UAAW;QACzD,MAAMI,OAAO,GAAGJ,UAAU,KAAK,CAAC,GAAG,CAAC,GAAI,CAACF,EAAE,GAAGE,UAAW;;QAEzD;QACA,MAAMK,YAAY,GAAG,EAAE,CAAC,CAAC;QACzB,MAAMC,WAAW,GAAG,CAACnE,KAAK,GAAG,CAAC4C,IAAI,CAACwB,MAAM,GAAG,CAAC,IAAI,CAAC,IAAIF,YAAY,CAAC,CAAC;;QAEpEjB,IAAI,CAACrD,IAAI,CAAC,GAAG,EAAE6D,IAAI,GAAGO,OAAO,GAAGG,WAAW,CAAC,CACvCvE,IAAI,CAAC,GAAG,EAAE8D,IAAI,GAAGO,OAAO,GAAGE,WAAW,CAAC,CACvCvE,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BA,IAAI,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CACpCqD,IAAI,CAACD,GAAG,CAAC;MAElB,CAAC,MAAM;QACH,MAAMqB,IAAI,GAAG1B,UAAoE;QACjF,MAAM2B,MAAM,GAAGD,IAAI,CAACzE,IAAI,CAAC,IAAI,CAAC;;QAE9B;QACA,MAAM2E,WAAW,GAAG,EAAE,GAAG,CAACvE,KAAK,GAAG,CAAC4C,IAAI,CAACwB,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE;QAE7DnB,IAAI,CAACtD,MAAM,CAAC,UAAU,CAAC,CAClBC,IAAI,CAAC,YAAY,EAAE,IAAI0E,MAAM,EAAE,CAAC,CAAC;QAAA,CACjC1E,IAAI,CAAC,aAAa,EAAE,GAAG2E,WAAW,GAAG,CAAC,CACtC3E,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BqD,IAAI,CAACD,GAAG,CAAC;MAClB;MACAD,aAAa,CAAC3B,IAAI,CAAC6B,IAAI,CAAC;IAC5B,CAAC,CAAC;IAEF,OAAOF,aAAa,CAAC,CAAC;EAC1B;EAEAb,gBAAgBA,CAACsC,IAAqB,EAAEC,EAAmB,EAAW;IAClE,MAAMC,YAAY,GAAG,IAAI,CAACrF,KAAK,CAACiC,YAAY,CAACkD,IAAI,CAAC;IAClD,MAAMG,UAAU,GAAG,IAAI,CAACtF,KAAK,CAACiC,YAAY,CAACmD,EAAE,CAAC;IAE9C,IAAI,CAACC,YAAY,IAAI,CAACC,UAAU,EAAE,OAAO,KAAK;;IAE9C;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,OAAOD,YAAY,CAACE,GAAG,CAAC,IAAI,CAACvF,KAAK,CAACwF,QAAQ,CAACJ,EAAE,CAAY,CAAC,IAAIE,UAAU,CAACC,GAAG,CAAC,IAAI,CAACvF,KAAK,CAACwF,QAAQ,CAACL,IAAI,CAAY,CAAC;EACvH;EAGApC,gBAAgBA,CACZM,KAA0D,EAC1D8B,IAA8B,EAC9BC,EAA4B,EAC5BK,SAAiB,GAAG,GAAG,EAC+B;IAEtD;IACA,MAAMrB,IAAI,GAAG,CAACe,IAAI,CAAC7D,CAAC,GAAG8D,EAAE,CAAC9D,CAAC,IAAI,CAAC;IAChC,MAAM+C,IAAI,GAAG,CAACc,IAAI,CAAC5D,CAAC,GAAG6D,EAAE,CAAC7D,CAAC,IAAI,CAAC;;IAEhC;IACA,MAAM+C,EAAE,GAAGc,EAAE,CAAC9D,CAAC,GAAG6D,IAAI,CAAC7D,CAAC;IACxB,MAAMiD,EAAE,GAAGa,EAAE,CAAC7D,CAAC,GAAG4D,IAAI,CAAC5D,CAAC;IACxB,MAAMmE,IAAI,GAAGjB,IAAI,CAACC,IAAI,CAACJ,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;IACzC,MAAMI,OAAO,GAAG,CAACJ,EAAE,GAAGkB,SAAS;IAC/B,MAAMb,OAAO,GAAGN,EAAE,GAAGmB,SAAS;IAE9B,MAAME,QAAQ,GAAGvB,IAAI,GAAGO,OAAO;IAC/B,MAAMiB,QAAQ,GAAGvB,IAAI,GAAGO,OAAO;IAE/B,MAAMiB,QAAQ,GAAG,KAAKV,IAAI,CAAC7D,CAAC,IAAI6D,IAAI,CAAC5D,CAAC,MAAMoE,QAAQ,IAAIC,QAAQ,KAAKR,EAAE,CAAC9D,CAAC,IAAI8D,EAAE,CAAC7D,CAAC,EAAE;IAEnF,MAAMuE,QAAQ,GAAG,eAAejG,aAAa,EAAE,EAAE,CAAC,CAAC;;IAEnD,OAAOwD,KAAK,CAAC/C,MAAM,CAAC,MAAM,CAAC,CACtBC,IAAI,CAAC,IAAI,EAAEuF,QAAQ,CAAC,CAAC;IAAA,CACrBvF,IAAI,CAAC,GAAG,EAAEsF,QAAQ,CAAC,CACnBtF,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CACpBA,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBA,IAAI,CAAC,YAAY,EAAE,aAAa,CAAC;EAC1C;EAEA2C,UAAUA,CACN6C,QAA6D,EAC7DC,KAA+B,EAC/BC,GAA6B,EAC7BC,WAAmB,GAAG,OAAO,EAC7BC,WAAmB,GAAG,CAAC,EACvBC,OAAe,GAAG,CAAC,EACmC;IACtD,OAAOL,QAAQ,CAACzF,MAAM,CAAC,MAAM,CAAC,CACzBC,IAAI,CAAC,IAAI,EAAEyF,KAAK,CAAC1E,CAAC,CAAC,CACnBf,IAAI,CAAC,IAAI,EAAEyF,KAAK,CAACzE,CAAC,CAAC,CACnBhB,IAAI,CAAC,IAAI,EAAE0F,GAAG,CAAC3E,CAAC,CAAC,CACjBf,IAAI,CAAC,IAAI,EAAE0F,GAAG,CAAC1E,CAAC,CAAC,CACjBhB,IAAI,CAAC,QAAQ,EAAE2F,WAAW,CAAC,CAC3B3F,IAAI,CAAC,cAAc,EAAE4F,WAAW,CAAC,CACjCtC,KAAK,CAAC,SAAS,EAAEuC,OAAO,CAAC,CACzB7F,IAAI,CAAC,YAAY,EAAE,aAAa,CAAC;EAC1C;EAGAkB,WAAWA,CAACjB,UAA+D,EAAE6F,QAAkC,EAAE1C,GAAW,EAA0D;IAClL,OAAOnD,UAAU,CAACF,MAAM,CAAC,MAAM,CAAC,CAC3BC,IAAI,CAAC,GAAG,EAAE8F,QAAQ,CAAC/E,CAAC,CAAC,CACrBf,IAAI,CAAC,GAAG,EAAE8F,QAAQ,CAAC9E,CAAC,CAAC,CACrBhB,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CACtBA,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BA,IAAI,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CACpCsD,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CACtBA,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAC1BD,IAAI,CAACD,GAAG,CAAC;EAClB;EAGAtC,UAAUA,CAACb,UAA+D,EAAE8F,EAAU,EAAEC,EAAU,EAAEC,CAAS,GAAG,EAAE,EACvGC,SAAiB,GAAG,MAAM,EAAEL,OAAe,GAAG,CAAC,EACE;IAExD,OAAO5F,UAAU,CAACF,MAAM,CAAC,QAAQ,CAAC,CAC7BC,IAAI,CAAC,IAAI,EAAE+F,EAAE,CAAC,CACd/F,IAAI,CAAC,IAAI,EAAEgG,EAAE,CAAC,CACdhG,IAAI,CAAC,GAAG,EAAEiG,CAAC,CAAC,CACZjG,IAAI,CAAC,OAAO,EAAEkG,SAAS,CAAC,CACxB5C,KAAK,CAAC,SAAS,EAAEuC,OAAO,CAAC;EAClC;EAEAzE,mBAAmBA,CACfX,IAA8D,EAC9DqF,QAAkC,EAClCK,QAAgB,GAAG,IAAI,EACV;IACb,OAAO,IAAIvD,OAAO,CAAEwD,OAAO,IAAK;MAC5B3F,IAAI,CAAC4F,UAAU,CAAC,CAAC,CACZF,QAAQ,CAACA,QAAQ,CAAC,CAClBnG,IAAI,CAAC,IAAI,EAAE8F,QAAQ,CAAC/E,CAAC,CAAC,CACtBf,IAAI,CAAC,IAAI,EAAE8F,QAAQ,CAAC9E,CAAC,CAAC,CACtBsC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CACnBtD,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBA,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CACrBsG,EAAE,CAAC,KAAK,EAAE,MAAMF,OAAO,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC;EACN;EAEA9E,oBAAoBA,CAChBL,KAA6D,EAC7D6E,QAAkC,EAClCK,QAAgB,GAAG,IAAI,EACV;IACb,OAAO,IAAIvD,OAAO,CAAEwD,OAAO,IAAK;MAC5BnF,KAAK,CAACoF,UAAU,CAAC,CAAC,CACbF,QAAQ,CAACA,QAAQ,CAAC,CAClB7C,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CACnBtD,IAAI,CAAC,GAAG,EAAE8F,QAAQ,CAAC/E,CAAC,CAAC,CACrBf,IAAI,CAAC,GAAG,EAAE8F,QAAQ,CAAC9E,CAAC,CAAC,CACrBsF,EAAE,CAAC,KAAK,EAAE,MAAMF,OAAO,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC;EACN;;EAGA;EACAxF,WAAWA,CAACR,KAAa,EAAEmG,aAAqB,EAAEC,OAAe,EAAEC,OAAe,EAAEC,MAAc,GAAG,GAAG,EAAE;IACtG,MAAMC,KAAK,GAAI,CAAC,GAAGzC,IAAI,CAAC0C,EAAE,GAAGxG,KAAK,GAAImG,aAAa;;IAEnD;IACA,MAAMxF,CAAC,GAAG2F,MAAM,GAAGxC,IAAI,CAAC2C,GAAG,CAACF,KAAK,CAAC;IAClC,MAAM3F,CAAC,GAAG0F,MAAM,GAAGxC,IAAI,CAAC4C,GAAG,CAACH,KAAK,CAAC;IAElC,OAAO;MAAE5F,CAAC,EAAEA,CAAC,GAAGyF,OAAO;MAAExF,CAAC,EAAEA,CAAC,GAAGyF;IAAQ,CAAC;EAC7C;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}