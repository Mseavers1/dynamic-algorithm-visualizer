{"ast":null,"code":"import * as d3 from \"d3\";\nexport class FAAddInstruction {\n  constructor(index, value, numberOfStates, values, indexStates, color, isStarting, isFinal) {\n    this.value = void 0;\n    this.index = void 0;\n    this.numberOfStates = void 0;\n    this.indexStates = void 0;\n    this.values = void 0;\n    this.colors = void 0;\n    this.isStarting = void 0;\n    this.isFinal = void 0;\n    this.index = index;\n    this.value = value;\n    this.numberOfStates = numberOfStates;\n    this.indexStates = indexStates;\n    this.values = values;\n    this.colors = color;\n    this.isStarting = isStarting;\n    this.isFinal = isFinal;\n  }\n  async process(svg) {\n    const position = this.getPosition(this.index, this.numberOfStates, 350, 200);\n    let nodesGroup = svg.select(\"g.nodes\");\n    let edgesGroup = svg.select(\"g.edges\");\n    if (edgesGroup.empty()) {\n      edgesGroup = svg.append(\"g\").attr(\"class\", \"edges\");\n    }\n    if (nodesGroup.empty()) {\n      nodesGroup = svg.append(\"g\").attr(\"class\", \"nodes\");\n    }\n\n    //let finalNodeElement: <SVGLineElement, unknown, HTMLElement, any> | null = null;\n\n    if (this.isFinal) {\n      alert(\"Test\");\n      const x = nodesGroup.append(\"circle\").style(\"opacity\", 1).attr(\"cx\", position.x).attr(\"cy\", position.y).attr(\"r\", 25).attr(\"stroke\", \"black\").attr(\"class\", \"node\").attr(\"stroke-width\", 2).attr(\"fill\", \"red\");\n    }\n    const nodeElement = nodesGroup.append(\"circle\").attr(\"cx\", 200).attr(\"cy\", 200).attr(\"r\", 20).attr(\"class\", \"node\").style(\"opacity\", 0);\n\n    // Creates the text label on screen\n    const label = nodesGroup.append(\"text\").attr(\"x\", 200).attr(\"y\", 200).attr(\"class\", \"label\").attr(\"text-anchor\", \"middle\").attr(\"alignment-baseline\", \"middle\").style(\"fill\", \"black\").style(\"font-size\", \"20px\").text(this.value);\n    const defs = svg.append(\"defs\");\n    let edges = [];\n    let noTransitionEdges = [];\n    let edgesLabels = [];\n    let paths = [];\n    let pathLabels = [];\n    for (let i = 0; i < this.values.length; i++) {\n      const val = this.values[i];\n      let txt = val.values[0];\n      if (val.values.length > 1) {\n        txt = \"\";\n        let i = 0;\n        for (const v in val.values) {\n          txt += v;\n          if (i < val.values.length - 1) txt += \", \";\n          i += 1;\n        }\n      }\n      const color = this.colors[val.state];\n      const markerId = `arrow-${val.state}`;\n\n      // Check if the marker already exists to avoid duplicates\n      if (d3.select(`#${markerId}`).empty()) {\n        defs.append(\"marker\").attr(\"id\", markerId).attr(\"viewBox\", \"0 0 10 10\").attr(\"refX\", 20).attr(\"refY\", 5).attr(\"markerWidth\", 3).attr(\"markerHeight\", 3).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,0 L10,5 L0,10\").attr(\"fill\", `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a})`);\n      }\n      if (this.isStarting) {\n        const edge = edgesGroup.append(\"line\").attr(\"x1\", position.x).attr(\"y1\", position.y - 50).attr(\"x2\", position.x).attr(\"y2\", position.y).attr(\"stroke\", \"rgba(\" + color.r + \", \" + color.g + \", \" + color.b + \", \" + color.a + \")\").attr(\"stroke-width\", 5).style(\"opacity\", 1).attr(\"marker-end\", `url(#${markerId})`);\n        noTransitionEdges.push(edge);\n      }\n      if (this.indexStates[val.state] != this.index) {\n        const edge = edgesGroup.append(\"line\").attr(\"x1\", position.x).attr(\"y1\", position.y).attr(\"x2\", position.x).attr(\"y2\", position.y).attr(\"stroke\", \"rgba(\" + color.r + \", \" + color.g + \", \" + color.b + \", \" + color.a + \")\").attr(\"stroke-width\", 5).style(\"opacity\", 0).attr(\"marker-end\", `url(#${markerId})`);\n        const label = nodesGroup.append(\"text\").attr(\"x\", position.x).attr(\"y\", position.y).attr(\"class\", \"label\").attr(\"text-anchor\", \"middle\").attr(\"alignment-baseline\", \"middle\").style(\"fill\", \"black\").style(\"font-size\", \"20px\").text(txt);\n        edges.push(edge);\n        edgesLabels.push(label);\n      } else {\n        const loopEdge = edgesGroup.append(\"path\").attr(\"d\", function () {\n          const radius = 0;\n          const angle = Math.PI / 4;\n          const x = position.x;\n          const y = position.y;\n          const arc = `M ${x + radius * Math.cos(angle)} ${y - radius * Math.sin(angle)} \n                    A ${radius} ${radius} 0 1 1 ${x + radius * Math.cos(-angle)} ${y - radius * Math.sin(-angle)} \n                    A ${radius} ${radius} 0 1 1 ${x + radius * Math.cos(angle)} ${y - radius * Math.sin(angle)}`;\n          return arc;\n        }).attr(\"stroke\", \"rgba(\" + color.r + \", \" + color.g + \", \" + color.b + \", \" + color.a + \")\").attr(\"stroke-width\", 5).style(\"opacity\", 1).attr(\"fill\", \"none\");\n        //.attr(\"marker-end\", \"url(#arrow)\");\n\n        const label = nodesGroup.append(\"text\").attr(\"x\", position.x).attr(\"y\", position.y).attr(\"class\", \"label\").attr(\"text-anchor\", \"middle\").attr(\"alignment-baseline\", \"middle\").style(\"fill\", \"black\").style(\"font-size\", \"20px\").text(txt);\n        paths.push(loopEdge);\n        pathLabels.push(label);\n      }\n    }\n    const nodeTransition = nodeElement.transition().duration(1000).style(\"opacity\", 1).attr(\"cx\", position.x).attr(\"cy\", position.y).attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"fill\", \"white\");\n    const labelTransition = label.transition().duration(1000).style(\"opacity\", 1).attr(\"x\", position.x).attr(\"y\", position.y);\n    let edgeTransitionPromises = [];\n    let edgeLabelPromises = [];\n    let pathTransitionPromises = [];\n    let pathLabelPromises = [];\n    if (edges.length > 0) {\n      for (let i = 0; i < edges.length; i++) {\n        const edge = edges[i];\n        const label = edgesLabels[i];\n        const val = this.values[i];\n        const pos = this.getPosition(this.indexStates[val.state], this.numberOfStates, 350, 200);\n        const midX = (pos.x + position.x) / 2;\n        const midY = (pos.y + position.y) / 2;\n        const edgeTransition = edge.transition().duration(1000).style(\"opacity\", 1).attr(\"x2\", pos.x).attr(\"y2\", pos.y);\n        const labelTransition = label.transition().duration(1000).style(\"opacity\", 1).attr(\"x\", midX + 15).attr(\"y\", midY + 15);\n        edgeTransitionPromises.push(edgeTransition.end());\n        edgeLabelPromises.push(labelTransition.end());\n      }\n    }\n    if (paths.length > 0) {\n      for (let i = 0; i < paths.length; i++) {\n        const path = paths[i];\n        const label = pathLabels[i];\n        const pos = this.getPosition(this.index, this.numberOfStates, 350, 200);\n        const midX = (pos.x + position.x) / 2;\n        const midY = (pos.y + position.y) / 2;\n        const loopEdgeTransition = path.transition().duration(1000).style(\"opacity\", 1).attr(\"d\", function () {\n          const radius = 20;\n          const angle = Math.PI / 2;\n          const x = pos.x + radius; // Starting position on the x-axis\n          const y = pos.y; // Starting position on the y-axis\n\n          // Create a new arc path that updates the loop position\n          const arc = `M ${x + radius * Math.cos(angle)} ${y - radius * Math.sin(angle)} \n                    A ${radius} ${radius} 0 1 1 ${x + radius * Math.cos(-angle)} ${y - radius * Math.sin(-angle)} \n                    A ${radius} ${radius} 0 1 1 ${x + radius * Math.cos(angle)} ${y - radius * Math.sin(angle)}`;\n          return arc;\n        });\n        //.attr(\"marker-end\", \"url(#arrow)\");  // Ensure the arrow is placed correctly at the end of the loop\n\n        const labelTransition = label.transition().duration(1000).style(\"opacity\", 1).attr(\"x\", midX + 25).attr(\"y\", midY);\n        pathTransitionPromises.push(loopEdgeTransition.end());\n        pathLabelPromises.push(labelTransition.end());\n      }\n    }\n    await Promise.all([nodeTransition.end(), labelTransition.end(), edgeTransitionPromises, pathTransitionPromises, edgeLabelPromises, pathLabelPromises]);\n  }\n  getPosition(index, numberOfStates, centerX, centerY, radius = 100) {\n    const angle = 2 * Math.PI * index / numberOfStates;\n\n    // Calculate x and y coordinates using polar to Cartesian conversion\n    const x = radius * Math.cos(angle);\n    const y = radius * Math.sin(angle);\n    return {\n      x: x + centerX,\n      y: y + centerY\n    };\n  }\n}","map":{"version":3,"names":["d3","FAAddInstruction","constructor","index","value","numberOfStates","values","indexStates","color","isStarting","isFinal","colors","process","svg","position","getPosition","nodesGroup","select","edgesGroup","empty","append","attr","alert","x","style","y","nodeElement","label","text","defs","edges","noTransitionEdges","edgesLabels","paths","pathLabels","i","length","val","txt","v","state","markerId","r","g","b","a","edge","push","loopEdge","radius","angle","Math","PI","arc","cos","sin","nodeTransition","transition","duration","labelTransition","edgeTransitionPromises","edgeLabelPromises","pathTransitionPromises","pathLabelPromises","pos","midX","midY","edgeTransition","end","path","loopEdgeTransition","Promise","all","centerX","centerY"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/fa_add_instruction.tsx"],"sourcesContent":["import {Instruction} from \"./i_instruction\";\r\nimport {BaseType, Selection} from \"d3\";\r\nimport {Node} from \"../pictures/node\";\r\nimport {stateValues} from \"../algorithms/fa_transition\";\r\nimport * as d3 from \"d3\";\r\n\r\nexport type Color = {\r\n    r: number;\r\n    b: number;\r\n    g: number;\r\n    a: number;\r\n}\r\n\r\nexport class FAAddInstruction implements Instruction {\r\n\r\n    value: number | string;\r\n    index: number;\r\n    numberOfStates: number;\r\n    indexStates: Record<string, number>;\r\n    values: stateValues[];\r\n    colors: Record<string, Color>;\r\n    isStarting: boolean;\r\n    isFinal: boolean;\r\n\r\n    constructor(index: number, value: number | string, numberOfStates: number, values: stateValues[], indexStates: Record<string, number>, color: Record<string, Color>, isStarting: boolean, isFinal: boolean) {\r\n        this.index = index;\r\n        this.value = value;\r\n        this.numberOfStates = numberOfStates;\r\n        this.indexStates = indexStates;\r\n        this.values = values;\r\n        this.colors = color;\r\n        this.isStarting = isStarting;\r\n        this.isFinal = isFinal;\r\n    }\r\n\r\n    async process(svg: Selection<BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n\r\n        const position = this.getPosition(this.index, this.numberOfStates, 350, 200);\r\n\r\n        let nodesGroup = svg.select<SVGGElement>(\"g.nodes\");\r\n\r\n        let edgesGroup = svg.select<SVGGElement>(\"g.edges\");\r\n\r\n        if (edgesGroup.empty()) {\r\n            edgesGroup = svg.append(\"g\").attr(\"class\", \"edges\");\r\n        }\r\n\r\n\r\n        if (nodesGroup.empty()) {\r\n            nodesGroup = svg.append(\"g\").attr(\"class\", \"nodes\");\r\n        }\r\n\r\n        //let finalNodeElement: <SVGLineElement, unknown, HTMLElement, any> | null = null;\r\n\r\n        if (this.isFinal) {\r\n\r\n            alert(\"Test\")\r\n\r\n            const x = nodesGroup.append(\"circle\")\r\n                .style(\"opacity\", 1)\r\n                .attr(\"cx\", position.x)\r\n                .attr(\"cy\", position.y)\r\n                .attr(\"r\", 25)\r\n                .attr(\"stroke\", \"black\")\r\n                .attr(\"class\", \"node\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"red\");\r\n        }\r\n\r\n        const nodeElement = nodesGroup.append(\"circle\")\r\n            .attr(\"cx\", 200)\r\n            .attr(\"cy\", 200)\r\n            .attr(\"r\", 20)\r\n            .attr(\"class\", \"node\")\r\n            .style(\"opacity\", 0);\r\n\r\n        // Creates the text label on screen\r\n        const label = nodesGroup.append(\"text\")\r\n            .attr(\"x\", 200)\r\n            .attr(\"y\", 200)\r\n            .attr(\"class\", \"label\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .attr(\"alignment-baseline\", \"middle\")\r\n            .style(\"fill\", \"black\")\r\n            .style(\"font-size\", \"20px\")\r\n            .text(this.value);\r\n\r\n        const defs = svg.append(\"defs\");\r\n\r\n        let edges: d3.Selection<SVGLineElement, unknown, HTMLElement, any>[] = [];\r\n        let noTransitionEdges: d3.Selection<SVGLineElement, unknown, HTMLElement, any>[] = [];\r\n        let edgesLabels: d3.Selection<SVGTextElement, unknown, HTMLElement, any>[] = [];\r\n        let paths: d3.Selection<SVGPathElement, unknown, HTMLElement, any>[] = []\r\n        let pathLabels: d3.Selection<SVGTextElement, unknown, HTMLElement, any>[] = []\r\n\r\n        for (let i = 0; i < this.values.length; i++) {\r\n\r\n            const val = this.values[i];\r\n\r\n            let txt = val.values[0];\r\n\r\n            if (val.values.length > 1) {\r\n\r\n                txt = \"\";\r\n\r\n                let i = 0\r\n                for (const v in val.values) {\r\n                    txt += v\r\n\r\n                    if (i < val.values.length - 1)\r\n                        txt += \", \"\r\n\r\n                    i += 1\r\n                }\r\n\r\n            }\r\n\r\n            const color = this.colors[val.state];\r\n\r\n            const markerId = `arrow-${val.state}`;\r\n\r\n            // Check if the marker already exists to avoid duplicates\r\n            if (d3.select(`#${markerId}`).empty()) {\r\n                defs.append(\"marker\")\r\n                    .attr(\"id\", markerId)\r\n                    .attr(\"viewBox\", \"0 0 10 10\")\r\n                    .attr(\"refX\", 20)\r\n                    .attr(\"refY\", 5)\r\n                    .attr(\"markerWidth\", 3)\r\n                    .attr(\"markerHeight\", 3)\r\n                    .attr(\"orient\", \"auto\")\r\n                    .append(\"path\")\r\n                    .attr(\"d\", \"M0,0 L10,5 L0,10\")\r\n                    .attr(\"fill\", `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a})`);\r\n            }\r\n\r\n            if (this.isStarting) {\r\n\r\n                const edge = edgesGroup.append(\"line\")\r\n                    .attr(\"x1\", position.x)\r\n                    .attr(\"y1\", position.y - 50)\r\n                    .attr(\"x2\", position.x)\r\n                    .attr(\"y2\", position.y)\r\n                    .attr(\"stroke\", \"rgba(\" + color.r + \", \" + color.g + \", \" + color.b + \", \" + color.a + \")\")\r\n                    .attr(\"stroke-width\", 5)\r\n                    .style(\"opacity\", 1)\r\n                    .attr(\"marker-end\", `url(#${markerId})`);\r\n\r\n                noTransitionEdges.push(edge);\r\n            }\r\n\r\n            if (this.indexStates[val.state] != this.index) {\r\n\r\n                const edge = edgesGroup.append(\"line\")\r\n                    .attr(\"x1\", position.x)\r\n                    .attr(\"y1\", position.y)\r\n                    .attr(\"x2\", position.x)\r\n                    .attr(\"y2\", position.y)\r\n                    .attr(\"stroke\", \"rgba(\" + color.r + \", \" + color.g + \", \" + color.b + \", \" + color.a + \")\")\r\n                    .attr(\"stroke-width\", 5)\r\n                    .style(\"opacity\", 0)\r\n                    .attr(\"marker-end\", `url(#${markerId})`);\r\n\r\n                const label = nodesGroup.append(\"text\")\r\n                    .attr(\"x\", position.x)\r\n                    .attr(\"y\", position.y)\r\n                    .attr(\"class\", \"label\")\r\n                    .attr(\"text-anchor\", \"middle\")\r\n                    .attr(\"alignment-baseline\", \"middle\")\r\n                    .style(\"fill\", \"black\")\r\n                    .style(\"font-size\", \"20px\")\r\n                    .text(txt);\r\n\r\n                edges.push(edge);\r\n                edgesLabels.push(label)\r\n            }\r\n            else {\r\n\r\n                const loopEdge = edgesGroup.append(\"path\")\r\n                    .attr(\"d\", function() {\r\n                        const radius = 0;\r\n                        const angle = Math.PI / 4;\r\n                        const x = position.x;\r\n                        const y = position.y;\r\n\r\n                        const arc = `M ${x + radius * Math.cos(angle)} ${y - radius * Math.sin(angle)} \r\n                    A ${radius} ${radius} 0 1 1 ${x + radius * Math.cos(-angle)} ${y - radius * Math.sin(-angle)} \r\n                    A ${radius} ${radius} 0 1 1 ${x + radius * Math.cos(angle)} ${y - radius * Math.sin(angle)}`;\r\n                        return arc;\r\n                    })\r\n                    .attr(\"stroke\", \"rgba(\" + color.r + \", \" + color.g + \", \" + color.b + \", \" + color.a + \")\")\r\n                    .attr(\"stroke-width\", 5)\r\n                    .style(\"opacity\", 1)\r\n                    .attr(\"fill\", \"none\")\r\n                    //.attr(\"marker-end\", \"url(#arrow)\");\r\n\r\n                const label = nodesGroup.append(\"text\")\r\n                    .attr(\"x\", position.x)\r\n                    .attr(\"y\", position.y)\r\n                    .attr(\"class\", \"label\")\r\n                    .attr(\"text-anchor\", \"middle\")\r\n                    .attr(\"alignment-baseline\", \"middle\")\r\n                    .style(\"fill\", \"black\")\r\n                    .style(\"font-size\", \"20px\")\r\n                    .text(txt);\r\n\r\n                paths.push(loopEdge);\r\n                pathLabels.push(label);\r\n            }\r\n        }\r\n\r\n        const nodeTransition = nodeElement.transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"cx\", position.x)\r\n            .attr(\"cy\", position.y)\r\n            .attr(\"stroke\", \"black\")\r\n            .attr(\"stroke-width\", 2)\r\n            .attr(\"fill\", \"white\");\r\n\r\n        const labelTransition = label.transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"x\", position.x)\r\n            .attr(\"y\", position.y)\r\n\r\n        let edgeTransitionPromises : Promise<void>[] = [];\r\n        let edgeLabelPromises : Promise<void>[] = [];\r\n        let pathTransitionPromises : Promise<void>[] = [];\r\n        let pathLabelPromises : Promise<void>[] = [];\r\n\r\n        if (edges.length > 0) {\r\n\r\n            for (let i = 0; i < edges.length; i++) {\r\n\r\n                const edge = edges[i];\r\n                const label = edgesLabels[i];\r\n\r\n                const val = this.values[i];\r\n\r\n                const pos = this.getPosition(this.indexStates[val.state], this.numberOfStates, 350, 200);\r\n                const midX = (pos.x + position.x) / 2;\r\n                const midY = (pos.y + position.y) / 2;\r\n\r\n                const edgeTransition = edge.transition()\r\n                    .duration(1000)\r\n                    .style(\"opacity\", 1)\r\n                    .attr(\"x2\", pos.x)\r\n                    .attr(\"y2\", pos.y)\r\n\r\n                const labelTransition = label.transition()\r\n                    .duration(1000)\r\n                    .style(\"opacity\", 1)\r\n                    .attr(\"x\", midX + 15)\r\n                    .attr(\"y\", midY + 15)\r\n\r\n                edgeTransitionPromises.push(edgeTransition.end());\r\n                edgeLabelPromises.push(labelTransition.end());\r\n            }\r\n        }\r\n\r\n        if (paths.length > 0) {\r\n\r\n            for (let i = 0; i < paths.length; i++) {\r\n\r\n                const path = paths[i];\r\n                const label = pathLabels[i];\r\n\r\n                const pos = this.getPosition(this.index, this.numberOfStates, 350, 200);\r\n                const midX = (pos.x + position.x) / 2;\r\n                const midY = (pos.y + position.y) / 2;\r\n\r\n                const loopEdgeTransition = path.transition()\r\n                    .duration(1000)\r\n                    .style(\"opacity\", 1)\r\n                    .attr(\"d\", function() {\r\n                        const radius = 20;\r\n                        const angle = Math.PI / 2;\r\n                        const x = pos.x + radius;  // Starting position on the x-axis\r\n                        const y = pos.y;           // Starting position on the y-axis\r\n\r\n                        // Create a new arc path that updates the loop position\r\n                        const arc = `M ${x + radius * Math.cos(angle)} ${y - radius * Math.sin(angle)} \r\n                    A ${radius} ${radius} 0 1 1 ${x + radius * Math.cos(-angle)} ${y - radius * Math.sin(-angle)} \r\n                    A ${radius} ${radius} 0 1 1 ${x + radius * Math.cos(angle)} ${y - radius * Math.sin(angle)}`;\r\n\r\n                        return arc;\r\n                    })\r\n                    //.attr(\"marker-end\", \"url(#arrow)\");  // Ensure the arrow is placed correctly at the end of the loop\r\n\r\n                const labelTransition = label.transition()\r\n                    .duration(1000)\r\n                    .style(\"opacity\", 1)\r\n                    .attr(\"x\", midX + 25)\r\n                    .attr(\"y\", midY)\r\n\r\n                pathTransitionPromises.push(loopEdgeTransition.end())\r\n                pathLabelPromises.push(labelTransition.end())\r\n            }\r\n\r\n        }\r\n\r\n        await Promise.all([nodeTransition.end(), labelTransition.end(), edgeTransitionPromises, pathTransitionPromises, edgeLabelPromises, pathLabelPromises]);\r\n    }\r\n\r\n    getPosition(index: number, numberOfStates: number, centerX: number, centerY: number, radius: number = 100) {\r\n        const angle = (2 * Math.PI * index) / numberOfStates;\r\n\r\n        // Calculate x and y coordinates using polar to Cartesian conversion\r\n        const x = radius * Math.cos(angle);\r\n        const y = radius * Math.sin(angle);\r\n\r\n        return { x: x + centerX, y: y + centerY };\r\n    }\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}