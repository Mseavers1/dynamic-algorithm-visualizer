{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Micha\\\\Documents\\\\GitHub\\\\dynamic-algorithm-visualizer\\\\app\\\\src\\\\components\\\\animations\\\\tree_animation.tsx\",\n  _s = $RefreshSig$();\nimport { animated, useTransition } from \"@react-spring/web\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AnimatedTree = ({\n  tree\n}) => {\n  _s();\n  // Transitions for animating each node\n  const nodeTransitions = useTransition(tree.values, {\n    keys: (item, index) => index,\n    from: {\n      opacity: 0,\n      transform: 'scale(0)'\n    },\n    enter: {\n      opacity: 1,\n      transform: 'scale(1)'\n    },\n    leave: {\n      opacity: 0,\n      transform: 'scale(0)'\n    }\n  });\n\n  // Transitions for animating edges (lines between nodes)\n  const edgeTransitions = useTransition(tree.children || [], {\n    keys: item => item.id,\n    from: {\n      strokeOpacity: 0\n    },\n    enter: {\n      strokeOpacity: 1\n    },\n    leave: {\n      strokeOpacity: 0\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    children: [edgeTransitions((style, item) => /*#__PURE__*/_jsxDEV(animated.line, {\n      x1: data.x,\n      y1: data.y,\n      x2: item.x,\n      y2: item.y,\n      stroke: \"black\",\n      strokeWidth: \"2\",\n      style: style\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }, this)), nodeTransitions((style, item) => /*#__PURE__*/_jsxDEV(animated.g, {\n      style: style,\n      children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: item.x,\n        cy: item.y,\n        r: 30,\n        fill: \"steelblue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: item.x,\n        y: item.y,\n        dy: 5,\n        textAnchor: \"middle\",\n        fill: \"white\",\n        fontSize: \"12\",\n        children: item.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this)), data.children && data.children.map(child => /*#__PURE__*/_jsxDEV(AnimatedTree, {\n      data: child\n    }, child.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n_s(AnimatedTree, \"FMAw/Z7K2gFLQlouuvIJdoGHR/0=\", false, function () {\n  return [useTransition, useTransition];\n});\n_c = AnimatedTree;\nvar _c;\n$RefreshReg$(_c, \"AnimatedTree\");","map":{"version":3,"names":["animated","useTransition","React","jsxDEV","_jsxDEV","AnimatedTree","tree","_s","nodeTransitions","values","keys","item","index","from","opacity","transform","enter","leave","edgeTransitions","children","id","strokeOpacity","style","line","x1","data","x","y1","y","x2","y2","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","g","cx","cy","r","fill","dy","textAnchor","fontSize","label","map","child","_c","$RefreshReg$"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/animations/tree_animation.tsx"],"sourcesContent":["import {animated, useTransition} from \"@react-spring/web\";\r\nimport React from \"react\";\r\nimport {BinaryTree} from \"../structures/binary_tree\";\r\n\r\nexport const AnimatedTree = ({ tree }: { tree: BinaryTree }) => {\r\n\r\n    // Transitions for animating each node\r\n    const nodeTransitions = useTransition(tree.values, {\r\n        keys: (item, index) => index,\r\n        from: { opacity: 0, transform: 'scale(0)' },\r\n        enter: { opacity: 1, transform: 'scale(1)' },\r\n        leave: { opacity: 0, transform: 'scale(0)' },\r\n    });\r\n\r\n    // Transitions for animating edges (lines between nodes)\r\n    const edgeTransitions = useTransition(tree.children || [], {\r\n        keys: (item) => item.id,\r\n        from: { strokeOpacity: 0 },\r\n        enter: { strokeOpacity: 1 },\r\n        leave: { strokeOpacity: 0 },\r\n    });\r\n\r\n    return (\r\n        <g>\r\n            {/* Render the edges (lines) */}\r\n            {edgeTransitions((style, item) => (\r\n                <animated.line\r\n                    x1={data.x}\r\n                    y1={data.y}\r\n                    x2={item.x}\r\n                    y2={item.y}\r\n                    stroke=\"black\"\r\n                    strokeWidth=\"2\"\r\n                    style={style}\r\n                />\r\n            ))}\r\n\r\n            {/* Render the node (circle) */}\r\n            {nodeTransitions((style, item) => (\r\n                <animated.g style={style}>\r\n                    <circle cx={item.x} cy={item.y} r={30} fill=\"steelblue\" />\r\n                    <text x={item.x} y={item.y} dy={5} textAnchor=\"middle\" fill=\"white\" fontSize=\"12\">\r\n                        {item.label}\r\n                    </text>\r\n                </animated.g>\r\n            ))}\r\n\r\n            {/* Recursively render child nodes */}\r\n            {data.children && data.children.map((child) => (\r\n                <AnimatedTree key={child.id} data={child} />\r\n            ))}\r\n        </g>\r\n    );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}