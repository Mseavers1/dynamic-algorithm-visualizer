{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Micha\\\\Documents\\\\GitHub\\\\dynamic-algorithm-visualizer\\\\app\\\\src\\\\components\\\\algorithms\\\\min_heap.tsx\";\nimport { BinaryTree } from \"../structures/binary_tree\";\nimport { TreeAnimator } from \"./animation_testing\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class MinHeap {\n  constructor(isDynamicSize) {\n    this.isDynamicSize = isDynamicSize;\n    this.tree = void 0;\n    this.instructions = [];\n    this.setInstructions = void 0;\n    this.tree = new BinaryTree();\n  }\n  insert(value) {\n    var _this$tree;\n    (_this$tree = this.tree) === null || _this$tree === void 0 ? void 0 : _this$tree.add(value);\n    const newInstruction = {\n      type: 'add',\n      value: value,\n      index: this.tree.length\n    };\n    this.instructions.push(newInstruction);\n    this.heapify(this.tree.length);\n\n    //alert(this.tree?.get_current_height())\n\n    //if (this.isDynamicSize && current_height > this.current_max_height) this.current_max_height = current_height + 1;\n  }\n  delete(value) {}\n  render() {\n    //alert(this.current_max_height);\n\n    const newInstructions = [{\n      type: 'add',\n      value: '1',\n      index: 0\n    }, {\n      type: 'add',\n      value: '2',\n      index: 1\n    }, {\n      type: 'add',\n      value: '3',\n      index: 2\n    }, {\n      type: 'add',\n      value: '4',\n      index: 3\n    }, {\n      type: 'add',\n      value: '5',\n      index: 4\n    }, {\n      type: 'add',\n      value: '6',\n      index: 5\n    }, {\n      type: 'swap',\n      fromIndex: 0,\n      toIndex: 1\n    }];\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      id: \"svg-container\",\n      width: \"500\",\n      height: \"500\",\n      children: /*#__PURE__*/_jsxDEV(TreeAnimator, {\n        instructions: this.instructions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this);\n  }\n  heapify(cur_index) {\n    // At root, do not heapify.\n    if (cur_index == 1) return;\n\n    // Check if parent is less than the current index\n    const cur = this.tree.get(cur_index);\n    const par_index = this.tree.get_parent(cur_index);\n    const par_val = this.tree.get(par_index);\n    if (cur >= par_val) return;\n\n    // If so swap the indexes\n    this.tree.swap(cur_index, par_index);\n    const newInstruction = {\n      type: 'swap',\n      fromIndex: cur_index,\n      toIndex: par_index\n    };\n    this.instructions.push(newInstruction);\n\n    // Heapify on the new cur index\n    this.heapify(par_index);\n  }\n}","map":{"version":3,"names":["BinaryTree","TreeAnimator","React","jsxDEV","_jsxDEV","MinHeap","constructor","isDynamicSize","tree","instructions","setInstructions","insert","value","_this$tree","add","newInstruction","type","index","length","push","heapify","delete","render","newInstructions","fromIndex","toIndex","id","width","height","children","fileName","_jsxFileName","lineNumber","columnNumber","cur_index","cur","get","par_index","get_parent","par_val","swap"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/algorithms/min_heap.tsx"],"sourcesContent":["import { Algorithm } from \"./algorithm_interface\";\r\nimport {BinaryTree} from \"../structures/binary_tree\";\r\n\r\nimport {TreeAnimator} from \"./animation_testing\";\r\nimport {Instruction} from \"./tree_intructions\";\r\nimport React from \"react\";\r\n\r\nexport class MinHeap implements Algorithm {\r\n\r\n    private tree : BinaryTree;\r\n\r\n    private instructions: Instruction[] = [];\r\n    private setInstructions: React.Dispatch<React.SetStateAction<Instruction[]>>;\r\n\r\n    constructor(\r\n        private isDynamicSize: boolean\r\n    ) {\r\n       this.tree = new BinaryTree();\r\n    }\r\n\r\n    insert(value: string | number) : void {\r\n\r\n        this.tree?.add(value);\r\n\r\n        const newInstruction: Instruction = {\r\n            type: 'add',\r\n            value: value,\r\n            index: this.tree.length,\r\n        };\r\n\r\n        this.instructions.push(newInstruction);\r\n\r\n        this.heapify(this.tree.length);\r\n\r\n        //alert(this.tree?.get_current_height())\r\n\r\n        //if (this.isDynamicSize && current_height > this.current_max_height) this.current_max_height = current_height + 1;\r\n\r\n    }\r\n\r\n    delete(value: string | number) : void {\r\n\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        //alert(this.current_max_height);\r\n\r\n        const newInstructions: Instruction[] = [\r\n            { type: 'add', value: '1', index: 0 },\r\n            { type: 'add', value: '2', index: 1 },\r\n            { type: 'add', value: '3', index: 2 },\r\n            { type: 'add', value: '4', index: 3 },\r\n            { type: 'add', value: '5', index: 4 },\r\n            { type: 'add', value: '6', index: 5 },\r\n            { type: 'swap', fromIndex: 0, toIndex: 1 },\r\n        ];\r\n\r\n        return (\r\n            <svg id=\"svg-container\" width=\"500\" height=\"500\">\r\n                <TreeAnimator instructions={this.instructions}/>\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    heapify(cur_index : number): void {\r\n\r\n        // At root, do not heapify.\r\n        if (cur_index == 1) return;\r\n\r\n        // Check if parent is less than the current index\r\n        const cur = this.tree.get(cur_index);\r\n        const par_index = this.tree.get_parent(cur_index);\r\n        const par_val = this.tree.get(par_index);\r\n\r\n        if (cur >= par_val) return;\r\n\r\n        // If so swap the indexes\r\n        this.tree.swap(cur_index, par_index);\r\n\r\n        const newInstruction: Instruction = {\r\n            type: 'swap',\r\n            fromIndex: cur_index,\r\n            toIndex: par_index,\r\n        };\r\n\r\n        this.instructions.push(newInstruction);\r\n\r\n        // Heapify on the new cur index\r\n        this.heapify(par_index);\r\n    }\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}