{"ast":null,"code":"// Counter to generate unique IDs for curved paths\nlet pathIdCounter = 0;\nexport class FAAddAllInstruction {\n  constructor(graph) {\n    this.graph = void 0;\n    this.nodeRadius = 20;\n    // Define a consistent node radius\n    this.layoutCenterX = 350;\n    // Keep layout center as class properties\n    this.layoutCenterY = 200;\n    this.graph = graph;\n  }\n  async process(svg) {\n    const nodeTransitions = [];\n    const labelTransitions = [];\n    const linesGroup = svg.append(\"g\").attr(\"id\", \"lines\");\n    const nodesGroup = svg.append(\"g\");\n    let indexNodes = new Map();\n    let index = 0;\n    const total = this.graph.get_nodes().size;\n\n    // Draw all nodes\n    this.graph.get_nodes().forEach((node, value) => {\n      const pos = this.getPosition(index, total, this.layoutCenterX, this.layoutCenterY);\n      const is_starting_node = this.graph.is_starting_node(value);\n      const is_final_node = this.graph.is_final_node(value); // Get the final node status\n\n      // Create the node(s) and get the selections\n      const nodeSelections = this.createNode(nodesGroup, pos.x, pos.y, this.nodeRadius, \"node\", 0, is_final_node);\n      const label = this.createLabel(nodesGroup, pos, value);\n\n      // Apply transition to both the main circle and the outer ring\n      const node_transition = this.applyNodeTransition(nodeSelections.mainCircle, nodeSelections.outerRing, pos);\n      const label_transition = this.applyLabelTransition(label, pos);\n      indexNodes.set(value, [index++, nodeSelections.mainCircle]);\n      nodeTransitions.push(node_transition);\n      labelTransitions.push(label_transition);\n\n      // If node is a starting state, add a line to it pointing away from the center\n      if (is_starting_node) {\n        const startNodePos = pos;\n\n        // Calculate vector from layout center to starting node\n        const vx = startNodePos.x - this.layoutCenterX;\n        const vy = startNodePos.y - this.layoutCenterY;\n\n        // Normalize the vector\n        const magnitude = Math.sqrt(vx * vx + vy * vy);\n        const unitVx = magnitude === 0 ? 0 : vx / magnitude;\n        const unitVy = magnitude === 0 ? 0 : vy / magnitude;\n        const arrowLength = 50;\n\n        // Calculate the start point of the arrow\n        const arrowStartX = startNodePos.x + unitVx * arrowLength;\n        const arrowStartY = startNodePos.y + unitVy * arrowLength;\n\n        // The end point of the arrow is the starting node position (center)\n        const arrowEndX = startNodePos.x;\n        const arrowEndY = startNodePos.y;\n\n        // Create the starting arrow line, adjusted to end on the node's circumference\n        this.createLine(linesGroup, {\n          x: arrowStartX,\n          y: arrowStartY\n        }, {\n          x: arrowEndX,\n          y: arrowEndY\n        }, this.nodeRadius);\n      }\n    });\n\n    // Draw connectors\n    this.graph.get_nodes().forEach((node, value) => {\n      let pointers = this.graph.get_pointers(value);\n      if (pointers != null && pointers.size > 0) {\n        const entry = indexNodes.get(value);\n        if (!entry) return; // safety check\n\n        const [index, currentNode] = entry;\n        const current_node_pos = this.getPosition(index, total, this.layoutCenterX, this.layoutCenterY);\n        pointers.forEach((weights, pointer) => {\n          const targetEntry = indexNodes.get(pointer.get_value());\n          if (!targetEntry) return;\n          const [targetIndex, _] = targetEntry;\n          const target_node_pos = this.getPosition(targetIndex, total, this.layoutCenterX, this.layoutCenterY);\n          if (value == pointer.get_value()) {\n            // Loop arrow back to self\n\n            // Calculate angle of the node from the layout center\n            const nodeAngle = Math.atan2(current_node_pos.y - this.layoutCenterY, current_node_pos.x - this.layoutCenterX);\n            const loopRadius = 40; // Radius of the loop itself\n            const angleOffset = Math.PI / 6; // Offset angles from the radial direction (e.g., 30 degrees)\n\n            let startAngleRad, endAngleRad;\n\n            // Adjust self-loop position for the starting node to avoid overlap\n            if (this.graph.is_starting_node(value)) {\n              // For the starting node, place the loop slightly below the radial line\n              startAngleRad = nodeAngle + angleOffset;\n              endAngleRad = nodeAngle + 3 * angleOffset; // Offset further for the end\n            } else {\n              // For other nodes, place the loop above the radial line\n              startAngleRad = nodeAngle - angleOffset;\n              endAngleRad = nodeAngle + angleOffset;\n            }\n\n            // Calculate start and end points on the node's circumference\n            const startX = current_node_pos.x + this.nodeRadius * Math.cos(startAngleRad);\n            const startY = current_node_pos.y + this.nodeRadius * Math.sin(startAngleRad);\n            const endX = current_node_pos.x + this.nodeRadius * Math.cos(endAngleRad);\n            const endY = current_node_pos.y + this.nodeRadius * Math.sin(endAngleRad);\n\n            // Calculate control point for the arc\n            // Position the control point further out along the radial direction\n            const controlPointDistance = this.nodeRadius + loopRadius * 2; // Distance from node center\n            const controlX = current_node_pos.x + controlPointDistance * Math.cos(nodeAngle);\n            const controlY = current_node_pos.y + controlPointDistance * Math.sin(nodeAngle);\n\n            // SVG path data for a self-loop using a quadratic bezier curve (Q)\n            const pathData = `M ${startX},${startY} Q ${controlX},${controlY} ${endX},${endY}`;\n            const selfLoopPath = linesGroup.append(\"path\").attr(\"d\", pathData).attr(\"fill\", \"none\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"marker-end\", \"url(#arrow)\"); // Add the arrow marker\n\n            // Create label for the self-loop\n            this.createLineLabel(linesGroup, selfLoopPath, weights);\n          } else if (this.hasMutualPointer(value, pointer.get_value())) {\n            const curvedPath = this.createCurvedLine(linesGroup, current_node_pos, target_node_pos, this.nodeRadius, 0.12);\n            this.createLineLabel(linesGroup, curvedPath, weights);\n          } else {\n            // Create straight line, adjusted to end on the target node's circumference\n            const straightLine = this.createLine(linesGroup, current_node_pos, target_node_pos, this.nodeRadius);\n            this.createLineLabel(linesGroup, straightLine, weights);\n          }\n        });\n      }\n    });\n    await Promise.all([...nodeTransitions, ...labelTransitions]);\n  }\n\n  // Creates a label for a line (edge) {Mostly generated through gpt and gemini -- edited by michael}\n  createLineLabel(group, lineOrPath, txts) {\n    const isLine = lineOrPath.node() instanceof SVGLineElement;\n    const createdLabels = [];\n\n    // Ensure txts is an array and has content\n    if (!Array.isArray(txts) || txts.length === 0) {\n      console.warn(\"createLineLabel called with empty or non-array txts:\", txts);\n      return []; // Return empty array if no labels to create\n    }\n    txts.forEach((txt, index) => {\n      // Append a text element for each weight\n      const text = group.append(\"text\").style(\"fill\", \"red\") // Ensure label is red\n      .style(\"font-size\", \"16px\").style(\"pointer-events\", \"none\");\n      if (isLine) {\n        const line = lineOrPath;\n        const x1 = parseFloat(line.attr(\"x1\"));\n        const y1 = parseFloat(line.attr(\"y1\"));\n        const x2 = parseFloat(line.attr(\"x2\"));\n        const y2 = parseFloat(line.attr(\"y2\"));\n\n        // Calculate midpoint\n        const midX = (x1 + x2) / 2;\n        const midY = (y1 + y2) / 2 - 10; // Slightly offset upwards\n\n        // Calculate perpendicular offset\n        const dx = x2 - x1;\n        const dy = y2 - y1;\n        const lineLength = Math.sqrt(dx * dx + dy * dy);\n        // Add a small check for zero length to avoid division by zero\n        const offsetX = lineLength === 0 ? 0 : -dy / lineLength;\n        const offsetY = lineLength === 0 ? 0 : -dx / lineLength;\n\n        // Adjust position based on the index for multiple labels\n        const labelSpacing = 15; // Adjust this value for desired spacing\n        const totalOffset = (index - (txts.length - 1) / 2) * labelSpacing; // Center the labels around the midpoint\n\n        text.attr(\"x\", midX + offsetX * totalOffset).attr(\"y\", midY + offsetY * totalOffset).attr(\"text-anchor\", \"middle\").attr(\"alignment-baseline\", \"middle\").text(txt);\n      } else {\n        var _path$node;\n        const path = lineOrPath;\n        const pathId = path.attr(\"id\");\n\n        // Ensure the path has an ID\n        if (!pathId) {\n          console.error(\"Path element is missing an ID for textPath.\");\n          text.remove(); // Remove the text element if path has no ID\n          return;\n        }\n\n        // Adjust startOffset for each label along the curve or self-loop\n        // Calculate offset to distribute labels along the path\n        const totalLabelWidth = txts.length * 10; // Estimate total width needed (adjust 10 based on font size)\n        const pathLength = ((_path$node = path.node()) === null || _path$node === void 0 ? void 0 : _path$node.getTotalLength()) || 100; // Get path length or use default\n        const spacing = (pathLength - totalLabelWidth) / (txts.length + 1); // Distribute spacing\n\n        let currentOffset = spacing;\n        if (index > 0) {\n          currentOffset += createdLabels.reduce((sum, prevLabel) => {\n            var _prevLabel$text;\n            const prevTextLength = (((_prevLabel$text = prevLabel.text()) === null || _prevLabel$text === void 0 ? void 0 : _prevLabel$text.length) || 0) * 10; // Estimate previous text length\n            return sum + prevTextLength + spacing;\n          }, 0);\n        }\n\n        // Use textPath element to attach text to the path\n        text.append(\"textPath\").attr(\"xlink:href\", `#${pathId}`)\n        // Use calculated offset along the path\n        .attr(\"startOffset\", currentOffset).attr(\"text-anchor\", \"middle\") // Center text on the offset point\n        .text(txt);\n      }\n      createdLabels.push(text);\n    });\n    return createdLabels;\n  }\n  hasMutualPointer(from, to) {\n    const fromPointers = this.graph.get_pointers(from);\n    const toPointers = this.graph.get_pointers(to);\n    if (!fromPointers || !toPointers) return false;\n    return fromPointers.has(this.graph.get_node(to)) && toPointers.has(this.graph.get_node(from));\n  }\n  createCurvedLine(group, from, to,\n  // 'to' is the center of the target node\n  nodeRadius,\n  // Pass node radius\n  curvature = 0.3) {\n    // Midpoint between from and to (center)\n    const midX = (from.x + to.x) / 2;\n    const midY = (from.y + to.y) / 2;\n\n    // Offset for the curve (perpendicular to the line from -> to)\n    const dx_from_to = to.x - from.x;\n    const dy_from_to = to.y - from.y;\n    const norm_from_to = Math.sqrt(dx_from_to * dx_from_to + dy_from_to * dy_from_to);\n    const offsetX = -dy_from_to * curvature;\n    const offsetY = dx_from_to * curvature;\n    const controlX = midX + offsetX;\n    const controlY = midY + offsetY;\n\n    // Calculate the vector from the control point to the target node center\n    const dx_control_to = to.x - controlX;\n    const dy_control_to = to.y - controlY;\n    const distance_control_to = Math.sqrt(dx_control_to * dx_control_to + dy_control_to * dy_control_to);\n\n    // Calculate the point on the circumference of the target node\n    // Move back from the target node center by the node radius along the vector from control point\n    const adjustedEndX = to.x - dx_control_to / distance_control_to * nodeRadius;\n    const adjustedEndY = to.y - dy_control_to / distance_control_to * nodeRadius;\n\n    // Path data using the adjusted end point\n    const pathData = `M ${from.x} ${from.y} Q ${controlX} ${controlY}, ${adjustedEndX} ${adjustedEndY}`;\n    const uniqueId = `curved-path-${pathIdCounter++}`;\n    return group.append(\"path\").attr(\"id\", uniqueId).attr(\"d\", pathData).attr(\"fill\", \"none\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"marker-end\", \"url(#arrow)\");\n  }\n  createLine(svgGroup, start, end,\n  // 'end' is the center of the target node\n  nodeRadius,\n  // Pass node radius\n  strokeColor = \"black\", strokeWidth = 2, opacity = 1) {\n    // Calculate vector from start to end (center of target node)\n    const dx = end.x - start.x;\n    const dy = end.y - start.y;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n\n    // Calculate the point on the circumference of the target node\n    // Move back from the end point by the node radius\n    const adjustedEndX = end.x - dx / distance * nodeRadius;\n    const adjustedEndY = end.y - dy / distance * nodeRadius;\n    return svgGroup.append(\"line\").attr(\"x1\", start.x).attr(\"y1\", start.y).attr(\"x2\", adjustedEndX) // Use adjusted end point\n    .attr(\"y2\", adjustedEndY) // Use adjusted end point\n    .attr(\"stroke\", strokeColor).attr(\"stroke-width\", strokeWidth).style(\"opacity\", opacity).attr(\"marker-end\", \"url(#arrow)\");\n  }\n  createLabel(nodesGroup, position, txt) {\n    return nodesGroup.append(\"text\").attr(\"x\", position.x).attr(\"y\", position.y).attr(\"class\", \"label\").attr(\"text-anchor\", \"middle\").attr(\"alignment-baseline\", \"middle\").style(\"fill\", \"black\").style(\"font-size\", \"20px\").text(txt);\n  }\n  createNode(nodesGroup, cx, cy, r = 20, className = \"node\", initialOpacity = 0, isFinalNode = false) {\n    // Create the main node circle\n    const mainCircle = nodesGroup.append(\"circle\").attr(\"cx\", cx).attr(\"cy\", cy).attr(\"r\", r).attr(\"class\", className).style(\"opacity\", initialOpacity);\n    let outerRing = undefined;\n\n    // If it's a final node, add a second circle with a larger radius\n    if (isFinalNode) {\n      const outerRadius = r + 5;\n      outerRing = nodesGroup.append(\"circle\").attr(\"cx\", cx).attr(\"cy\", cy).attr(\"r\", outerRadius).attr(\"class\", className + \" final-node-ring\").style(\"fill\", \"none\").style(\"stroke\", \"black\").style(\"stroke-width\", 2).style(\"opacity\", initialOpacity);\n    }\n\n    // Return an object containing both selections\n    return {\n      mainCircle,\n      outerRing\n    };\n  }\n  applyNodeTransition(mainCircle, outerRing,\n  // Accept the optional outer ring\n  position, duration = 1000) {\n    return new Promise(resolve => {\n      const mainCircleTransition = mainCircle.transition().duration(duration).attr(\"cx\", position.x).attr(\"cy\", position.y).style(\"opacity\", 1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"fill\", \"white\");\n\n      // If an outer ring exists, apply the same transition to it\n      if (outerRing) {\n        outerRing.transition().duration(duration).attr(\"cx\", position.x).attr(\"cy\", position.y).style(\"opacity\", 1);\n      }\n      mainCircleTransition.on(\"end\", () => resolve());\n    });\n  }\n  applyLabelTransition(label, position, duration = 1000) {\n    return new Promise(resolve => {\n      label.transition().duration(duration).style(\"opacity\", 1).attr(\"x\", position.x).attr(\"y\", position.y).on(\"end\", () => resolve());\n    });\n  }\n\n  // Gets the position in a shaped form\n  getPosition(index, numberOfNodes, centerX, centerY, radius = 150) {\n    const angle = 2 * Math.PI * index / numberOfNodes;\n\n    // Calculate x and y coordinates using polar to Cartesian conversion\n    const x = radius * Math.cos(angle);\n    const y = radius * Math.sin(angle);\n    return {\n      x: x + centerX,\n      y: y + centerY\n    };\n  }\n}","map":{"version":3,"names":["pathIdCounter","FAAddAllInstruction","constructor","graph","nodeRadius","layoutCenterX","layoutCenterY","process","svg","nodeTransitions","labelTransitions","linesGroup","append","attr","nodesGroup","indexNodes","Map","index","total","get_nodes","size","forEach","node","value","pos","getPosition","is_starting_node","is_final_node","nodeSelections","createNode","x","y","label","createLabel","node_transition","applyNodeTransition","mainCircle","outerRing","label_transition","applyLabelTransition","set","push","startNodePos","vx","vy","magnitude","Math","sqrt","unitVx","unitVy","arrowLength","arrowStartX","arrowStartY","arrowEndX","arrowEndY","createLine","pointers","get_pointers","entry","get","currentNode","current_node_pos","weights","pointer","targetEntry","get_value","targetIndex","_","target_node_pos","nodeAngle","atan2","loopRadius","angleOffset","PI","startAngleRad","endAngleRad","startX","cos","startY","sin","endX","endY","controlPointDistance","controlX","controlY","pathData","selfLoopPath","createLineLabel","hasMutualPointer","curvedPath","createCurvedLine","straightLine","Promise","all","group","lineOrPath","txts","isLine","SVGLineElement","createdLabels","Array","isArray","length","console","warn","txt","text","style","line","x1","parseFloat","y1","x2","y2","midX","midY","dx","dy","lineLength","offsetX","offsetY","labelSpacing","totalOffset","_path$node","path","pathId","error","remove","totalLabelWidth","pathLength","getTotalLength","spacing","currentOffset","reduce","sum","prevLabel","_prevLabel$text","prevTextLength","from","to","fromPointers","toPointers","has","get_node","curvature","dx_from_to","dy_from_to","norm_from_to","dx_control_to","dy_control_to","distance_control_to","adjustedEndX","adjustedEndY","uniqueId","svgGroup","start","end","strokeColor","strokeWidth","opacity","distance","position","cx","cy","r","className","initialOpacity","isFinalNode","undefined","outerRadius","duration","resolve","mainCircleTransition","transition","on","numberOfNodes","centerX","centerY","radius","angle"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/fa_add_all_instruction.tsx"],"sourcesContent":["import {Instruction} from \"./i_instruction\";\r\nimport {BaseType, Selection} from \"d3\";\r\nimport {FA_Graph} from \"../structures/fa_graph\";\r\nimport {FA_Node} from \"../structures/fa_node\";\r\n\r\n// Counter to generate unique IDs for curved paths\r\nlet pathIdCounter = 0;\r\n\r\nexport class FAAddAllInstruction implements Instruction {\r\n\r\n    private graph: FA_Graph;\r\n    private nodeRadius: number = 20; // Define a consistent node radius\r\n    private layoutCenterX = 350; // Keep layout center as class properties\r\n    private layoutCenterY = 200;\r\n\r\n    constructor(graph: FA_Graph) {\r\n        this.graph = graph;\r\n    }\r\n\r\n    async process(svg: Selection<BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n        const nodeTransitions: Promise<void>[] = [];\r\n        const labelTransitions: Promise<void>[] = [];\r\n        const linesGroup = svg.append(\"g\").attr(\"id\", \"lines\") as unknown as d3.Selection<SVGGElement, unknown, null, undefined>;\r\n\r\n        const nodesGroup = (svg.append(\"g\") as unknown) as Selection<SVGGElement, unknown, null, undefined>;\r\n\r\n        let indexNodes: Map<string | number, [number, d3.Selection<SVGCircleElement, unknown, null, undefined>]> = new Map();\r\n        let index = 0;\r\n        const total = this.graph.get_nodes().size;\r\n\r\n        // Draw all nodes\r\n        this.graph.get_nodes().forEach((node, value) => {\r\n            const pos = this.getPosition(index, total, this.layoutCenterX, this.layoutCenterY);\r\n            const is_starting_node = this.graph.is_starting_node(value);\r\n            const is_final_node = this.graph.is_final_node(value); // Get the final node status\r\n\r\n            // Create the node(s) and get the selections\r\n            const nodeSelections = this.createNode(nodesGroup, pos.x, pos.y, this.nodeRadius, \"node\", 0, is_final_node);\r\n\r\n            const label = this.createLabel(nodesGroup, pos, value as string)\r\n\r\n            // Apply transition to both the main circle and the outer ring\r\n            const node_transition = this.applyNodeTransition(nodeSelections.mainCircle, nodeSelections.outerRing, pos);\r\n            const label_transition = this.applyLabelTransition(label, pos);\r\n\r\n            indexNodes.set(value, [index++, nodeSelections.mainCircle]);\r\n            nodeTransitions.push(node_transition);\r\n            labelTransitions.push(label_transition);\r\n\r\n            // If node is a starting state, add a line to it pointing away from the center\r\n            if (is_starting_node) {\r\n                const startNodePos = pos;\r\n\r\n                // Calculate vector from layout center to starting node\r\n                const vx = startNodePos.x - this.layoutCenterX;\r\n                const vy = startNodePos.y - this.layoutCenterY;\r\n\r\n                // Normalize the vector\r\n                const magnitude = Math.sqrt(vx * vx + vy * vy);\r\n                const unitVx = magnitude === 0 ? 0 : vx / magnitude;\r\n                const unitVy = magnitude === 0 ? 0 : vy / magnitude;\r\n\r\n                const arrowLength = 50;\r\n\r\n                // Calculate the start point of the arrow\r\n                const arrowStartX = startNodePos.x + unitVx * arrowLength;\r\n                const arrowStartY = startNodePos.y + unitVy * arrowLength;\r\n\r\n                // The end point of the arrow is the starting node position (center)\r\n                const arrowEndX = startNodePos.x;\r\n                const arrowEndY = startNodePos.y;\r\n\r\n                // Create the starting arrow line, adjusted to end on the node's circumference\r\n                this.createLine(linesGroup, {x: arrowStartX, y: arrowStartY}, {x: arrowEndX, y: arrowEndY}, this.nodeRadius);\r\n            }\r\n        });\r\n\r\n        // Draw connectors\r\n        this.graph.get_nodes().forEach((node, value) => {\r\n\r\n            let pointers = this.graph.get_pointers(value);\r\n\r\n            if (pointers != null && pointers.size > 0) {\r\n\r\n                const entry = indexNodes.get(value);\r\n                if (!entry) return; // safety check\r\n\r\n                const [index, currentNode] = entry;\r\n                const current_node_pos = this.getPosition(index, total, this.layoutCenterX, this.layoutCenterY);\r\n\r\n                pointers.forEach((weights, pointer) => {\r\n                    const targetEntry = indexNodes.get(pointer.get_value());\r\n                    if (!targetEntry) return;\r\n\r\n                    const [targetIndex, _] = targetEntry;\r\n                    const target_node_pos = this.getPosition(targetIndex, total, this.layoutCenterX, this.layoutCenterY);\r\n\r\n                    if (value == pointer.get_value()) {\r\n                        // Loop arrow back to self\r\n\r\n                        // Calculate angle of the node from the layout center\r\n                        const nodeAngle = Math.atan2(current_node_pos.y - this.layoutCenterY, current_node_pos.x - this.layoutCenterX);\r\n\r\n                        const loopRadius = 40; // Radius of the loop itself\r\n                        const angleOffset = Math.PI / 6; // Offset angles from the radial direction (e.g., 30 degrees)\r\n\r\n                        let startAngleRad, endAngleRad;\r\n\r\n                        // Adjust self-loop position for the starting node to avoid overlap\r\n                        if (this.graph.is_starting_node(value)) {\r\n                            // For the starting node, place the loop slightly below the radial line\r\n                            startAngleRad = nodeAngle + angleOffset;\r\n                            endAngleRad = nodeAngle + 3 * angleOffset; // Offset further for the end\r\n                        } else {\r\n                            // For other nodes, place the loop above the radial line\r\n                            startAngleRad = nodeAngle - angleOffset;\r\n                            endAngleRad = nodeAngle + angleOffset;\r\n                        }\r\n\r\n\r\n                        // Calculate start and end points on the node's circumference\r\n                        const startX = current_node_pos.x + this.nodeRadius * Math.cos(startAngleRad);\r\n                        const startY = current_node_pos.y + this.nodeRadius * Math.sin(startAngleRad);\r\n                        const endX = current_node_pos.x + this.nodeRadius * Math.cos(endAngleRad);\r\n                        const endY = current_node_pos.y + this.nodeRadius * Math.sin(endAngleRad);\r\n\r\n                        // Calculate control point for the arc\r\n                        // Position the control point further out along the radial direction\r\n                        const controlPointDistance = this.nodeRadius + loopRadius * 2; // Distance from node center\r\n                        const controlX = current_node_pos.x + controlPointDistance * Math.cos(nodeAngle);\r\n                        const controlY = current_node_pos.y + controlPointDistance * Math.sin(nodeAngle);\r\n\r\n                        // SVG path data for a self-loop using a quadratic bezier curve (Q)\r\n                        const pathData = `M ${startX},${startY} Q ${controlX},${controlY} ${endX},${endY}`;\r\n\r\n\r\n                        const selfLoopPath = linesGroup.append(\"path\")\r\n                            .attr(\"d\", pathData)\r\n                            .attr(\"fill\", \"none\")\r\n                            .attr(\"stroke\", \"black\")\r\n                            .attr(\"stroke-width\", 2)\r\n                            .attr(\"marker-end\", \"url(#arrow)\"); // Add the arrow marker\r\n\r\n                        // Create label for the self-loop\r\n                        this.createLineLabel(linesGroup, selfLoopPath, weights as string[]);\r\n                    }\r\n                    else if (this.hasMutualPointer(value, pointer.get_value())){\r\n                        const curvedPath = this.createCurvedLine(linesGroup, current_node_pos, target_node_pos, this.nodeRadius, 0.12);\r\n                        this.createLineLabel(linesGroup, curvedPath, weights as string[]);\r\n                    }\r\n                    else\r\n                    {\r\n                        // Create straight line, adjusted to end on the target node's circumference\r\n                        const straightLine = this.createLine(linesGroup, current_node_pos, target_node_pos, this.nodeRadius);\r\n                        this.createLineLabel(linesGroup, straightLine as d3.Selection<SVGLineElement | SVGPathElement, unknown, null, undefined>, weights as string[]);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n\r\n        await Promise.all([...nodeTransitions, ...labelTransitions]);\r\n    }\r\n\r\n    // Creates a label for a line (edge) {Mostly generated through gpt and gemini -- edited by michael}\r\n    createLineLabel(\r\n        group: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n        lineOrPath: d3.Selection<SVGLineElement | SVGPathElement, unknown, null, undefined>,\r\n        txts: string[]\r\n    ): d3.Selection<SVGTextElement, unknown, null, undefined>[] {\r\n\r\n        const isLine = lineOrPath.node() instanceof SVGLineElement;\r\n        const createdLabels: d3.Selection<SVGTextElement, unknown, null, undefined>[] = [];\r\n\r\n        // Ensure txts is an array and has content\r\n        if (!Array.isArray(txts) || txts.length === 0) {\r\n            console.warn(\"createLineLabel called with empty or non-array txts:\", txts);\r\n            return []; // Return empty array if no labels to create\r\n        }\r\n\r\n\r\n        txts.forEach((txt, index) => {\r\n            // Append a text element for each weight\r\n            const text = group.append(\"text\")\r\n                .style(\"fill\", \"red\") // Ensure label is red\r\n                .style(\"font-size\", \"16px\")\r\n                .style(\"pointer-events\", \"none\");\r\n\r\n            if (isLine) {\r\n                const line = lineOrPath as d3.Selection<SVGLineElement, unknown, null, undefined>;\r\n                const x1 = parseFloat(line.attr(\"x1\"));\r\n                const y1 = parseFloat(line.attr(\"y1\"));\r\n                const x2 = parseFloat(line.attr(\"x2\"));\r\n                const y2 = parseFloat(line.attr(\"y2\"));\r\n\r\n                // Calculate midpoint\r\n                const midX = (x1 + x2) / 2;\r\n                const midY = (y1 + y2) / 2 - 10; // Slightly offset upwards\r\n\r\n                // Calculate perpendicular offset\r\n                const dx = x2 - x1;\r\n                const dy = y2 - y1;\r\n                const lineLength = Math.sqrt(dx * dx + dy * dy);\r\n                // Add a small check for zero length to avoid division by zero\r\n                const offsetX = lineLength === 0 ? 0 : (-dy / lineLength);\r\n                const offsetY = lineLength === 0 ? 0 : (-dx / lineLength);\r\n\r\n                // Adjust position based on the index for multiple labels\r\n                const labelSpacing = 15; // Adjust this value for desired spacing\r\n                const totalOffset = (index - (txts.length - 1) / 2) * labelSpacing; // Center the labels around the midpoint\r\n\r\n                text.attr(\"x\", midX + offsetX * totalOffset)\r\n                    .attr(\"y\", midY + offsetY * totalOffset)\r\n                    .attr(\"text-anchor\", \"middle\")\r\n                    .attr(\"alignment-baseline\", \"middle\")\r\n                    .text(txt);\r\n\r\n            } else {\r\n                const path = lineOrPath as d3.Selection<SVGPathElement, unknown, null, undefined>;\r\n                const pathId = path.attr(\"id\");\r\n\r\n                // Ensure the path has an ID\r\n                if (!pathId) {\r\n                    console.error(\"Path element is missing an ID for textPath.\");\r\n                    text.remove(); // Remove the text element if path has no ID\r\n                    return;\r\n                }\r\n\r\n                // Adjust startOffset for each label along the curve or self-loop\r\n                // Calculate offset to distribute labels along the path\r\n                const totalLabelWidth = txts.length * 10; // Estimate total width needed (adjust 10 based on font size)\r\n                const pathLength = path.node()?.getTotalLength() || 100; // Get path length or use default\r\n                const spacing = (pathLength - totalLabelWidth) / (txts.length + 1); // Distribute spacing\r\n\r\n                let currentOffset = spacing;\r\n                if (index > 0) {\r\n                    currentOffset += createdLabels.reduce((sum, prevLabel) => {\r\n                        const prevTextLength = (prevLabel.text()?.length || 0) * 10; // Estimate previous text length\r\n                        return sum + prevTextLength + spacing;\r\n                    }, 0);\r\n                }\r\n\r\n                // Use textPath element to attach text to the path\r\n                text.append(\"textPath\")\r\n                    .attr(\"xlink:href\", `#${pathId}`)\r\n                    // Use calculated offset along the path\r\n                    .attr(\"startOffset\", currentOffset)\r\n                    .attr(\"text-anchor\", \"middle\") // Center text on the offset point\r\n                    .text(txt);\r\n            }\r\n            createdLabels.push(text);\r\n        });\r\n\r\n        return createdLabels;\r\n    }\r\n\r\n    hasMutualPointer(from: string | number, to: string | number): boolean {\r\n        const fromPointers = this.graph.get_pointers(from);\r\n        const toPointers = this.graph.get_pointers(to);\r\n\r\n        if (!fromPointers || !toPointers) return false;\r\n\r\n        return fromPointers.has(this.graph.get_node(to) as FA_Node) && toPointers.has(this.graph.get_node(from) as FA_Node);\r\n    }\r\n\r\n\r\n    createCurvedLine(\r\n        group: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n        from: { x: number, y: number },\r\n        to: { x: number, y: number }, // 'to' is the center of the target node\r\n        nodeRadius: number, // Pass node radius\r\n        curvature: number = 0.3\r\n    ): d3.Selection<SVGPathElement, unknown, null, undefined> {\r\n\r\n        // Midpoint between from and to (center)\r\n        const midX = (from.x + to.x) / 2;\r\n        const midY = (from.y + to.y) / 2;\r\n\r\n        // Offset for the curve (perpendicular to the line from -> to)\r\n        const dx_from_to = to.x - from.x;\r\n        const dy_from_to = to.y - from.y;\r\n        const norm_from_to = Math.sqrt(dx_from_to * dx_from_to + dy_from_to * dy_from_to);\r\n        const offsetX = -dy_from_to * curvature;\r\n        const offsetY = dx_from_to * curvature;\r\n\r\n        const controlX = midX + offsetX;\r\n        const controlY = midY + offsetY;\r\n\r\n        // Calculate the vector from the control point to the target node center\r\n        const dx_control_to = to.x - controlX;\r\n        const dy_control_to = to.y - controlY;\r\n        const distance_control_to = Math.sqrt(dx_control_to * dx_control_to + dy_control_to * dy_control_to);\r\n\r\n        // Calculate the point on the circumference of the target node\r\n        // Move back from the target node center by the node radius along the vector from control point\r\n        const adjustedEndX = to.x - (dx_control_to / distance_control_to) * nodeRadius;\r\n        const adjustedEndY = to.y - (dy_control_to / distance_control_to) * nodeRadius;\r\n\r\n\r\n        // Path data using the adjusted end point\r\n        const pathData = `M ${from.x} ${from.y} Q ${controlX} ${controlY}, ${adjustedEndX} ${adjustedEndY}`;\r\n\r\n        const uniqueId = `curved-path-${pathIdCounter++}`;\r\n\r\n        return group.append(\"path\")\r\n            .attr(\"id\", uniqueId)\r\n            .attr(\"d\", pathData)\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke\", \"black\")\r\n            .attr(\"stroke-width\", 2)\r\n            .attr(\"marker-end\", \"url(#arrow)\");\r\n    }\r\n\r\n    createLine(\r\n        svgGroup: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n        start: { x: number; y: number },\r\n        end: { x: number; y: number }, // 'end' is the center of the target node\r\n        nodeRadius: number, // Pass node radius\r\n        strokeColor: string = \"black\",\r\n        strokeWidth: number = 2,\r\n        opacity: number = 1\r\n    ): d3.Selection<SVGLineElement, unknown, null, undefined> {\r\n\r\n        // Calculate vector from start to end (center of target node)\r\n        const dx = end.x - start.x;\r\n        const dy = end.y - start.y;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n        // Calculate the point on the circumference of the target node\r\n        // Move back from the end point by the node radius\r\n        const adjustedEndX = end.x - (dx / distance) * nodeRadius;\r\n        const adjustedEndY = end.y - (dy / distance) * nodeRadius;\r\n\r\n        return svgGroup.append(\"line\")\r\n            .attr(\"x1\", start.x)\r\n            .attr(\"y1\", start.y)\r\n            .attr(\"x2\", adjustedEndX) // Use adjusted end point\r\n            .attr(\"y2\", adjustedEndY) // Use adjusted end point\r\n            .attr(\"stroke\", strokeColor)\r\n            .attr(\"stroke-width\", strokeWidth)\r\n            .style(\"opacity\", opacity)\r\n            .attr(\"marker-end\", \"url(#arrow)\");\r\n    }\r\n\r\n\r\n    createLabel(nodesGroup: d3.Selection<SVGGElement, unknown, null, undefined>, position: { x: number, y: number }, txt: string): d3.Selection<SVGTextElement, unknown, null, undefined> {\r\n        return nodesGroup.append(\"text\")\r\n            .attr(\"x\", position.x)\r\n            .attr(\"y\", position.y)\r\n            .attr(\"class\", \"label\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .attr(\"alignment-baseline\", \"middle\")\r\n            .style(\"fill\", \"black\")\r\n            .style(\"font-size\", \"20px\")\r\n            .text(txt);\r\n    }\r\n\r\n\r\n    createNode(\r\n        nodesGroup: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n        cx: number,\r\n        cy: number,\r\n        r: number = 20,\r\n        className: string = \"node\",\r\n        initialOpacity: number = 0,\r\n        isFinalNode: boolean = false\r\n    ): { mainCircle: d3.Selection<SVGCircleElement, unknown, null, undefined>, outerRing?: d3.Selection<SVGCircleElement, unknown, null, undefined> } {\r\n\r\n        // Create the main node circle\r\n        const mainCircle = nodesGroup.append(\"circle\")\r\n            .attr(\"cx\", cx)\r\n            .attr(\"cy\", cy)\r\n            .attr(\"r\", r)\r\n            .attr(\"class\", className)\r\n            .style(\"opacity\", initialOpacity);\r\n\r\n        let outerRing: d3.Selection<SVGCircleElement, unknown, null, undefined> | undefined = undefined;\r\n\r\n        // If it's a final node, add a second circle with a larger radius\r\n        if (isFinalNode) {\r\n            const outerRadius = r + 5;\r\n            outerRing = nodesGroup.append(\"circle\")\r\n                .attr(\"cx\", cx)\r\n                .attr(\"cy\", cy)\r\n                .attr(\"r\", outerRadius)\r\n                .attr(\"class\", className + \" final-node-ring\")\r\n                .style(\"fill\", \"none\")\r\n                .style(\"stroke\", \"black\")\r\n                .style(\"stroke-width\", 2)\r\n                .style(\"opacity\", initialOpacity);\r\n        }\r\n\r\n        // Return an object containing both selections\r\n        return { mainCircle, outerRing };\r\n    }\r\n\r\n    applyNodeTransition(\r\n        mainCircle: d3.Selection<SVGCircleElement, unknown, null, undefined>,\r\n        outerRing: d3.Selection<SVGCircleElement, unknown, null, undefined> | undefined, // Accept the optional outer ring\r\n        position: { x: number; y: number },\r\n        duration: number = 1000\r\n    ): Promise<void> {\r\n        return new Promise((resolve) => {\r\n\r\n            const mainCircleTransition = mainCircle.transition()\r\n                .duration(duration)\r\n                .attr(\"cx\", position.x)\r\n                .attr(\"cy\", position.y)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"stroke\", \"black\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"white\");\r\n\r\n            // If an outer ring exists, apply the same transition to it\r\n            if (outerRing) {\r\n                outerRing.transition()\r\n                    .duration(duration)\r\n                    .attr(\"cx\", position.x)\r\n                    .attr(\"cy\", position.y)\r\n                    .style(\"opacity\", 1);\r\n            }\r\n\r\n            mainCircleTransition.on(\"end\", () => resolve());\r\n        });\r\n    }\r\n\r\n    applyLabelTransition(\r\n        label: d3.Selection<SVGTextElement, unknown, null, undefined>,\r\n        position: { x: number; y: number },\r\n        duration: number = 1000\r\n    ): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            label.transition()\r\n                .duration(duration)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"x\", position.x)\r\n                .attr(\"y\", position.y)\r\n                .on(\"end\", () => resolve());\r\n        });\r\n    }\r\n\r\n\r\n    // Gets the position in a shaped form\r\n    getPosition(index: number, numberOfNodes: number, centerX: number, centerY: number, radius: number = 150) {\r\n        const angle = (2 * Math.PI * index) / numberOfNodes;\r\n\r\n        // Calculate x and y coordinates using polar to Cartesian conversion\r\n        const x = radius * Math.cos(angle);\r\n        const y = radius * Math.sin(angle);\r\n\r\n        return { x: x + centerX, y: y + centerY };\r\n    }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}