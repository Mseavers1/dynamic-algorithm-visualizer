{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Micha\\\\Documents\\\\GitHub\\\\dynamic-algorithm-visualizer\\\\app\\\\src\\\\components\\\\animator.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { MinHeap } from \"./algorithms/min_heap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Animator = () => {\n  _s();\n  const {\n    algorithmType\n  } = useParams();\n  let algorithm = RetrieveAlgorithm(algorithmType);\n  if (!algorithm) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 17\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Algorithm Animator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), algorithm.display()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n_s(Animator, \"aZWhmPHY2T7OkkM3F08UBTZ3mqA=\", false, function () {\n  return [useParams];\n});\n_c = Animator;\nconst RetrieveAlgorithm = algorithmName => {\n  if (algorithmName === \"min-heap\") {\n    return new MinHeap();\n  }\n  return null;\n};\n_c2 = RetrieveAlgorithm;\nexport default Animator;\nvar _c, _c2;\n$RefreshReg$(_c, \"Animator\");\n$RefreshReg$(_c2, \"RetrieveAlgorithm\");","map":{"version":3,"names":["React","useParams","MinHeap","jsxDEV","_jsxDEV","Animator","_s","algorithmType","algorithm","RetrieveAlgorithm","fileName","_jsxFileName","lineNumber","columnNumber","children","display","_c","algorithmName","_c2","$RefreshReg$"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/animator.tsx"],"sourcesContent":["import React from \"react\";\r\nimport {Algorithm} from \"./algorithms/algorithm_interface\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nimport {MinHeap} from \"./algorithms/min_heap\";\r\n\r\nconst Animator: React.FC = () => {\r\n\r\n    const {algorithmType} = useParams<{algorithmType: string}>();\r\n\r\n    let algorithm: Algorithm | null = RetrieveAlgorithm(algorithmType);\r\n\r\n    if (!algorithm) {\r\n        return (<div></div>);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Algorithm Animator</h1>\r\n            {algorithm.display()}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst RetrieveAlgorithm = (algorithmName : string | undefined): Algorithm | null => {\r\n\r\n    if (algorithmName === \"min-heap\") {\r\n        return new MinHeap();\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default Animator;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAAQC,SAAS,QAAO,kBAAkB;AAE1C,SAAQC,OAAO,QAAO,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAE7B,MAAM;IAACC;EAAa,CAAC,GAAGN,SAAS,CAA0B,CAAC;EAE5D,IAAIO,SAA2B,GAAGC,iBAAiB,CAACF,aAAa,CAAC;EAElE,IAAI,CAACC,SAAS,EAAE;IACZ,oBAAQJ,OAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAU,CAAC;EACvB;EAEA,oBACIT,OAAA;IAAAU,QAAA,gBACIV,OAAA;MAAAU,QAAA,EAAI;IAAkB;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC1BL,SAAS,CAACO,OAAO,CAAC,CAAC;EAAA;IAAAL,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnB,CAAC;AAEd,CAAC;AAACP,EAAA,CAhBID,QAAkB;EAAA,QAEIJ,SAAS;AAAA;AAAAe,EAAA,GAF/BX,QAAkB;AAkBxB,MAAMI,iBAAiB,GAAIQ,aAAkC,IAAuB;EAEhF,IAAIA,aAAa,KAAK,UAAU,EAAE;IAC9B,OAAO,IAAIf,OAAO,CAAC,CAAC;EACxB;EAEA,OAAO,IAAI;AACf,CAAC;AAAAgB,GAAA,GAPKT,iBAAiB;AASvB,eAAeJ,QAAQ;AAAC,IAAAW,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}