{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Micha\\\\Documents\\\\GitHub\\\\dynamic-algorithm-visualizer\\\\app\\\\src\\\\components\\\\animations\\\\tree_animation.tsx\",\n  _s = $RefreshSig$();\nimport { animated, useTransition } from \"@react-spring/web\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AnimatedTree = ({\n  tree\n}) => {\n  _s();\n  // Transitions for animating each node in the array\n  const nodeTransitions = useTransition(tree.values, {\n    keys: (item, index) => index,\n    // Use index as key for each node\n    from: {\n      opacity: 0,\n      transform: 'scale(0)'\n    },\n    enter: {\n      opacity: 1,\n      transform: 'scale(1)'\n    },\n    leave: {\n      opacity: 0,\n      transform: 'scale(0)'\n    }\n  });\n\n  // Function to determine the position of each node (e.g., x and y)\n  const getNodePosition = index => {\n    const x = 100 + index * 150; // Example horizontal position\n    const y = 100; // All nodes aligned at the same vertical position\n    return {\n      x,\n      y\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    children: nodeTransitions((style, node, index) => {\n      const {\n        x,\n        y\n      } = getNodePosition(index); // Get position for each node\n      return /*#__PURE__*/_jsxDEV(animated.g, {\n        style: style,\n        children: [index > 0 && /*#__PURE__*/_jsxDEV(animated.line, {\n          x1: getNodePosition(Math.floor((index - 1) / 2)).x // Parent's x\n          ,\n          y1: getNodePosition(Math.floor((index - 1) / 2)).y // Parent's y\n          ,\n          x2: x,\n          y2: y,\n          stroke: \"black\",\n          strokeWidth: \"2\",\n          style: {\n            strokeOpacity: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: x,\n          cy: y,\n          r: 30,\n          fill: \"steelblue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: x,\n          y: y,\n          dy: 5,\n          textAnchor: \"middle\",\n          fill: \"white\",\n          fontSize: \"12\",\n          children: node\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n_s(AnimatedTree, \"7q9XJ/T8qFFFTlXCAVzO9hMqO4s=\", false, function () {\n  return [useTransition];\n});\n_c = AnimatedTree;\nvar _c;\n$RefreshReg$(_c, \"AnimatedTree\");","map":{"version":3,"names":["animated","useTransition","React","jsxDEV","_jsxDEV","AnimatedTree","tree","_s","nodeTransitions","values","keys","item","index","from","opacity","transform","enter","leave","getNodePosition","x","y","children","style","node","g","line","x1","Math","floor","y1","x2","y2","stroke","strokeWidth","strokeOpacity","fileName","_jsxFileName","lineNumber","columnNumber","cx","cy","r","fill","dy","textAnchor","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/animations/tree_animation.tsx"],"sourcesContent":["import { animated, useTransition } from \"@react-spring/web\";\r\nimport React from \"react\";\r\nimport { BinaryTree } from \"../structures/binary_tree\";\r\n\r\nexport const AnimatedTree = ({ tree }: { tree: BinaryTree }) => {\r\n\r\n    // Transitions for animating each node in the array\r\n    const nodeTransitions = useTransition(tree.values, {\r\n        keys: (item, index) => index, // Use index as key for each node\r\n        from: { opacity: 0, transform: 'scale(0)' },\r\n        enter: { opacity: 1, transform: 'scale(1)' },\r\n        leave: { opacity: 0, transform: 'scale(0)' },\r\n    });\r\n\r\n    // Function to determine the position of each node (e.g., x and y)\r\n    const getNodePosition = (index: number) => {\r\n        const x = 100 + index * 150; // Example horizontal position\r\n        const y = 100; // All nodes aligned at the same vertical position\r\n        return { x, y };\r\n    };\r\n\r\n    return (\r\n        <g>\r\n            {/* Render the animated nodes */}\r\n            {nodeTransitions((style, node, index) => {\r\n                const { x, y } = getNodePosition(index); // Get position for each node\r\n                return (\r\n                    <animated.g key={index} style={style}>\r\n                        {/* Render edges (lines) */}\r\n                        {index > 0 && (\r\n                            <animated.line\r\n                                x1={getNodePosition(Math.floor((index - 1) / 2)).x} // Parent's x\r\n                                y1={getNodePosition(Math.floor((index - 1) / 2)).y} // Parent's y\r\n                                x2={x}\r\n                                y2={y}\r\n                                stroke=\"black\"\r\n                                strokeWidth=\"2\"\r\n                                style={{ strokeOpacity: 1 }}\r\n                            />\r\n                        )}\r\n\r\n                        {/* Render node (circle) */}\r\n                        <circle cx={x} cy={y} r={30} fill=\"steelblue\" />\r\n                        <text x={x} y={y} dy={5} textAnchor=\"middle\" fill=\"white\" fontSize=\"12\">\r\n                            {node}\r\n                        </text>\r\n                    </animated.g>\r\n                );\r\n            })}\r\n        </g>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}