{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Micha\\\\Documents\\\\GitHub\\\\dynamic-algorithm-visualizer\\\\app\\\\src\\\\components\\\\algorithms\\\\min_heap.tsx\",\n  _s = $RefreshSig$();\nimport { animated, useTransition } from \"@react-spring/web\";\nimport { BinaryTree } from \"../structures/binary_tree\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class MinHeap {\n  constructor(isDynamicSize) {\n    this.isDynamicSize = isDynamicSize;\n    this.tree = void 0;\n    this.animationType = \"none\";\n    this.tree = new BinaryTree();\n  }\n  insert(value) {\n    var _this$tree;\n    (_this$tree = this.tree) === null || _this$tree === void 0 ? void 0 : _this$tree.add(value);\n    this.animationType = \"spawn\"; // Set to \"spawn\" when a new node is inserted\n    this.heapify(this.tree.length);\n  }\n  delete(value) {\n    // Delete logic (not implemented yet)\n  }\n  render() {\n    alert(this.tree.values);\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"500\",\n      height: \"500\",\n      children: /*#__PURE__*/_jsxDEV(AnimatedTree, {\n        values: this.tree.values,\n        height: 1,\n        animationType: this.animationType,\n        lastInsertedIndex: this.tree.length > 0 ? this.tree.length - 1 : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this);\n  }\n  heapify(cur_index) {\n    if (cur_index == 1) return;\n    const cur = this.tree.get(cur_index);\n    const par_index = this.tree.get_parent(cur_index);\n    const par_val = this.tree.get(par_index);\n    if (cur >= par_val) return;\n    this.tree.swap(cur_index, par_index);\n    this.animationType = \"swap\"; // Set to \"swap\" during heapify\n\n    this.heapify(par_index);\n  }\n}\nconst AnimatedTree = ({\n  values,\n  height,\n  animationType,\n  lastInsertedIndex\n}) => {\n  _s();\n  const nodeTransitions = useTransition(values.map((value, i) => ({\n    value,\n    index: i\n  })), {\n    keys: item => `${item.value}-${item.index}`,\n    from: item => ({\n      opacity: 0,\n      transform: animationType === \"spawn\" && lastInsertedIndex === item.index ? \"translate(300px, -100px) scale(0.5)\" : \"scale(0)\"\n    }),\n    enter: {\n      opacity: 1,\n      transform: \"scale(1)\"\n    },\n    leave: {\n      opacity: 0,\n      transform: \"scale(0)\"\n    },\n    config: {\n      duration: 1000\n    }\n  });\n  const getNodePosition = index => {\n    if (index < 0 || isNaN(index)) return {\n      x: 0,\n      y: 0\n    };\n    if (index === 0) return {\n      x: 250,\n      y: 50\n    };\n    const depth = Math.floor(Math.log2(index + 1));\n    let xSpacingMulti = 1;\n    if (height > 1) xSpacingMulti = 2;\n    const xSpacing = 200 * xSpacingMulti / (depth + 1);\n    const ySpacing = 80;\n    const parentIndex = Math.floor((index - 1) / 2);\n    const parentPos = getNodePosition(parentIndex);\n    const isLeftChild = index % 2 === 1;\n    const xOffset = isLeftChild ? -xSpacing : xSpacing;\n    return {\n      x: parentPos.x + xOffset,\n      y: parentPos.y + ySpacing\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    children: [nodeTransitions((style, {\n      value,\n      index\n    }) => {\n      if (index === 0) return null;\n      const {\n        x,\n        y\n      } = getNodePosition(index);\n      const parentIndex = Math.floor((index - 1) / 2);\n      const parentPos = getNodePosition(parentIndex);\n      return /*#__PURE__*/_jsxDEV(animated.line, {\n        x1: parentPos.x,\n        y1: parentPos.y,\n        x2: x,\n        y2: y,\n        stroke: \"black\",\n        strokeWidth: \"2\",\n        style: {\n          strokeOpacity: 1\n        }\n      }, `line-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this);\n    }), nodeTransitions((style, {\n      value,\n      index\n    }) => {\n      const {\n        x,\n        y\n      } = getNodePosition(index);\n      return /*#__PURE__*/_jsxDEV(animated.g, {\n        style: style,\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: x,\n          cy: y,\n          r: 30,\n          fill: \"steelblue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: x,\n          y: y,\n          dy: 5,\n          textAnchor: \"middle\",\n          fill: \"white\",\n          fontSize: \"12\",\n          children: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }, this)]\n      }, `node-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n_s(AnimatedTree, \"7q9XJ/T8qFFFTlXCAVzO9hMqO4s=\", false, function () {\n  return [useTransition];\n});\n_c = AnimatedTree;\nvar _c;\n$RefreshReg$(_c, \"AnimatedTree\");","map":{"version":3,"names":["animated","useTransition","BinaryTree","jsxDEV","_jsxDEV","MinHeap","constructor","isDynamicSize","tree","animationType","insert","value","_this$tree","add","heapify","length","delete","render","alert","values","width","height","children","AnimatedTree","lastInsertedIndex","fileName","_jsxFileName","lineNumber","columnNumber","cur_index","cur","get","par_index","get_parent","par_val","swap","_s","nodeTransitions","map","i","index","keys","item","from","opacity","transform","enter","leave","config","duration","getNodePosition","isNaN","x","y","depth","Math","floor","log2","xSpacingMulti","xSpacing","ySpacing","parentIndex","parentPos","isLeftChild","xOffset","style","line","x1","y1","x2","y2","stroke","strokeWidth","strokeOpacity","g","cx","cy","r","fill","dy","textAnchor","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/algorithms/min_heap.tsx"],"sourcesContent":["import {animated, useTransition} from \"@react-spring/web\";\r\nimport {BinaryTree} from \"../structures/binary_tree\";\r\nimport {Algorithm} from \"./algorithm_interface\";\r\n\r\nexport class MinHeap implements Algorithm {\r\n    private tree : BinaryTree;\r\n    private animationType: \"spawn\" | \"swap\" | \"none\" = \"none\";\r\n\r\n    constructor(private isDynamicSize: boolean) {\r\n        this.tree = new BinaryTree();\r\n    }\r\n\r\n    insert(value: string | number): void {\r\n        this.tree?.add(value);\r\n        this.animationType = \"spawn\"; // Set to \"spawn\" when a new node is inserted\r\n        this.heapify(this.tree.length);\r\n    }\r\n\r\n    delete(value: string | number): void {\r\n        // Delete logic (not implemented yet)\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        alert(this.tree.values)\r\n\r\n        return (\r\n            <svg width=\"500\" height=\"500\">\r\n                <AnimatedTree\r\n                    values={this.tree.values}\r\n                    height={1}\r\n                    animationType={this.animationType}\r\n                    lastInsertedIndex={this.tree.length > 0 ? this.tree.length - 1 : null}\r\n                />\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    heapify(cur_index: number): void {\r\n        if (cur_index == 1) return;\r\n\r\n        const cur = this.tree.get(cur_index);\r\n        const par_index = this.tree.get_parent(cur_index);\r\n        const par_val = this.tree.get(par_index);\r\n\r\n        if (cur >= par_val) return;\r\n\r\n        this.tree.swap(cur_index, par_index);\r\n        this.animationType = \"swap\"; // Set to \"swap\" during heapify\r\n\r\n        this.heapify(par_index);\r\n    }\r\n}\r\n\r\nconst AnimatedTree = ({values, height, animationType, lastInsertedIndex}: { values: (string | number)[], height: number, animationType: \"spawn\" | \"swap\" | \"none\", lastInsertedIndex: number | null}) => {\r\n    const nodeTransitions = useTransition(\r\n        values.map((value, i) => ({ value, index: i })),\r\n        {\r\n            keys: (item) => `${item.value}-${item.index}`,\r\n            from: (item: { value: string | number; index: number }) => ({\r\n                opacity: 0,\r\n                transform:\r\n                    animationType === \"spawn\" && lastInsertedIndex === item.index\r\n                        ? \"translate(300px, -100px) scale(0.5)\"\r\n                        : \"scale(0)\",\r\n            }),\r\n            enter: { opacity: 1, transform: \"scale(1)\" },\r\n            leave: { opacity: 0, transform: \"scale(0)\" },\r\n            config: { duration: 1000 },\r\n        }\r\n    );\r\n\r\n    const getNodePosition = (index: number): { x: number, y: number } => {\r\n        if (index < 0 || isNaN(index)) return { x: 0, y: 0 };\r\n        if (index === 0) return { x: 250, y: 50 };\r\n\r\n        const depth = Math.floor(Math.log2(index + 1));\r\n        let xSpacingMulti = 1;\r\n        if (height > 1) xSpacingMulti = 2;\r\n\r\n        const xSpacing = (200 * xSpacingMulti) / (depth + 1);\r\n        const ySpacing = 80;\r\n\r\n        const parentIndex = Math.floor((index - 1) / 2);\r\n        const parentPos = getNodePosition(parentIndex);\r\n        const isLeftChild = index % 2 === 1;\r\n        const xOffset = isLeftChild ? -xSpacing : xSpacing;\r\n\r\n        return { x: parentPos.x + xOffset, y: parentPos.y + ySpacing };\r\n    };\r\n\r\n    return (\r\n        <g>\r\n            {nodeTransitions((style, { value, index }) => {\r\n                if (index === 0) return null;\r\n                const { x, y } = getNodePosition(index);\r\n                const parentIndex = Math.floor((index - 1) / 2);\r\n                const parentPos = getNodePosition(parentIndex);\r\n\r\n                return (\r\n                    <animated.line\r\n                        key={`line-${index}`}\r\n                        x1={parentPos.x}\r\n                        y1={parentPos.y}\r\n                        x2={x}\r\n                        y2={y}\r\n                        stroke=\"black\"\r\n                        strokeWidth=\"2\"\r\n                        style={{ strokeOpacity: 1 }}\r\n                    />\r\n                );\r\n            })}\r\n\r\n            {nodeTransitions((style, { value, index }) => {\r\n                const { x, y } = getNodePosition(index);\r\n\r\n                return (\r\n                    <animated.g key={`node-${index}`} style={style}>\r\n                        <circle cx={x} cy={y} r={30} fill=\"steelblue\" />\r\n                        <text x={x} y={y} dy={5} textAnchor=\"middle\" fill=\"white\" fontSize=\"12\">\r\n                            {value}\r\n                        </text>\r\n                    </animated.g>\r\n                );\r\n            })}\r\n        </g>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}