{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Micha\\\\Documents\\\\GitHub\\\\dynamic-algorithm-visualizer\\\\app\\\\src\\\\components\\\\algorithms\\\\min_heap.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialTreeData = {\n  id: \"1\",\n  label: \"Root\",\n  x: 250,\n  y: 50,\n  children: [{\n    id: \"2\",\n    label: \"Child 1\",\n    x: 150,\n    y: 150,\n    children: [{\n      id: \"3\",\n      label: \"Child 1.1\",\n      x: 100,\n      y: 250,\n      children: []\n    }]\n  }, {\n    id: \"3\",\n    label: \"Child 2\",\n    x: 350,\n    y: 150,\n    children: []\n  }]\n};\nexport class MinHeap {\n  constructor(treeData, setTreeData) {\n    this.treeData = void 0;\n    this.setTreeData = void 0;\n    this.treeData = treeData;\n    this.setTreeData = setTreeData;\n  }\n  insert(value) {\n    const newChild = {\n      id: String(Date.now()),\n      // Unique ID for the new child node\n      label: value,\n      x: 200,\n      y: 200,\n      children: []\n    };\n\n    // Adding a new child to the root node (or customize logic)\n    const updatedTree = this.addChild(this.treeData, newChild);\n    this.setTreeData(updatedTree);\n  }\n  addChild(node, newChild) {\n    if (node.id === \"1\") {\n      // Assuming we add to the root for simplicity\n      const updatedChildren = [...node.children, newChild];\n      return {\n        ...node,\n        children: updatedChildren\n      };\n    }\n    if (node.children) {\n      return {\n        ...node,\n        children: node.children.map(child => this.addChild(child, newChild))\n      };\n    }\n    return node;\n  }\n  display() {\n    return /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"500\",\n      height: \"500\",\n      children: /*#__PURE__*/_jsxDEV(AnimatedTree, {\n        data: this.treeData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["initialTreeData","id","label","x","y","children","MinHeap","constructor","treeData","setTreeData","insert","value","newChild","String","Date","now","updatedTree","addChild","node","updatedChildren","map","child","display","_jsxDEV","width","height","AnimatedTree","data","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/algorithms/min_heap.tsx"],"sourcesContent":["import { Algorithm } from \"./algorithm_interface\";\r\nimport { useState } from \"react\";\r\nimport { useTransition, animated } from '@react-spring/web';\r\n\r\ninterface TreeNode {\r\n    id: string;\r\n    label: string | number;\r\n    x: number;\r\n    y: number;\r\n    children: TreeNode[];\r\n}\r\n\r\nconst initialTreeData: TreeNode = {\r\n    id: \"1\",\r\n    label: \"Root\",\r\n    x: 250,\r\n    y: 50,\r\n    children: [\r\n        {\r\n            id: \"2\",\r\n            label: \"Child 1\",\r\n            x: 150,\r\n            y: 150,\r\n            children: [\r\n                { id: \"3\", label: \"Child 1.1\", x: 100, y: 250, children: [] }\r\n            ]\r\n        },\r\n        {\r\n            id: \"3\",\r\n            label: \"Child 2\",\r\n            x: 350,\r\n            y: 150,\r\n            children: []\r\n        }\r\n    ]\r\n};\r\n\r\nexport class MinHeap implements Algorithm {\r\n    treeData: TreeNode;\r\n    setTreeData: React.Dispatch<React.SetStateAction<TreeNode>>;\r\n\r\n    constructor(treeData: TreeNode, setTreeData: React.Dispatch<React.SetStateAction<TreeNode>>) {\r\n        this.treeData = treeData;\r\n        this.setTreeData = setTreeData;\r\n    }\r\n\r\n    insert(value: number | string) {\r\n        const newChild: TreeNode = {\r\n            id: String(Date.now()), // Unique ID for the new child node\r\n            label: value,\r\n            x: 200,\r\n            y: 200,\r\n            children: [],\r\n        };\r\n\r\n        // Adding a new child to the root node (or customize logic)\r\n        const updatedTree = this.addChild(this.treeData, newChild);\r\n        this.setTreeData(updatedTree);\r\n    }\r\n\r\n    addChild(node: TreeNode, newChild: TreeNode): TreeNode {\r\n        if (node.id === \"1\") { // Assuming we add to the root for simplicity\r\n            const updatedChildren = [...node.children, newChild];\r\n            return { ...node, children: updatedChildren };\r\n        }\r\n\r\n        if (node.children) {\r\n            return { ...node, children: node.children.map(child => this.addChild(child, newChild)) };\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    display(): JSX.Element {\r\n        return (\r\n            <svg width=\"500\" height=\"500\">\r\n                <AnimatedTree data={this.treeData} />\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n"],"mappings":";;AAYA,MAAMA,eAAyB,GAAG;EAC9BC,EAAE,EAAE,GAAG;EACPC,KAAK,EAAE,MAAM;EACbC,CAAC,EAAE,GAAG;EACNC,CAAC,EAAE,EAAE;EACLC,QAAQ,EAAE,CACN;IACIJ,EAAE,EAAE,GAAG;IACPC,KAAK,EAAE,SAAS;IAChBC,CAAC,EAAE,GAAG;IACNC,CAAC,EAAE,GAAG;IACNC,QAAQ,EAAE,CACN;MAAEJ,EAAE,EAAE,GAAG;MAAEC,KAAK,EAAE,WAAW;MAAEC,CAAC,EAAE,GAAG;MAAEC,CAAC,EAAE,GAAG;MAAEC,QAAQ,EAAE;IAAG,CAAC;EAErE,CAAC,EACD;IACIJ,EAAE,EAAE,GAAG;IACPC,KAAK,EAAE,SAAS;IAChBC,CAAC,EAAE,GAAG;IACNC,CAAC,EAAE,GAAG;IACNC,QAAQ,EAAE;EACd,CAAC;AAET,CAAC;AAED,OAAO,MAAMC,OAAO,CAAsB;EAItCC,WAAWA,CAACC,QAAkB,EAAEC,WAA2D,EAAE;IAAA,KAH7FD,QAAQ;IAAA,KACRC,WAAW;IAGP,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,WAAW,GAAGA,WAAW;EAClC;EAEAC,MAAMA,CAACC,KAAsB,EAAE;IAC3B,MAAMC,QAAkB,GAAG;MACvBX,EAAE,EAAEY,MAAM,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;MAAE;MACxBb,KAAK,EAAES,KAAK;MACZR,CAAC,EAAE,GAAG;MACNC,CAAC,EAAE,GAAG;MACNC,QAAQ,EAAE;IACd,CAAC;;IAED;IACA,MAAMW,WAAW,GAAG,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACT,QAAQ,EAAEI,QAAQ,CAAC;IAC1D,IAAI,CAACH,WAAW,CAACO,WAAW,CAAC;EACjC;EAEAC,QAAQA,CAACC,IAAc,EAAEN,QAAkB,EAAY;IACnD,IAAIM,IAAI,CAACjB,EAAE,KAAK,GAAG,EAAE;MAAE;MACnB,MAAMkB,eAAe,GAAG,CAAC,GAAGD,IAAI,CAACb,QAAQ,EAAEO,QAAQ,CAAC;MACpD,OAAO;QAAE,GAAGM,IAAI;QAAEb,QAAQ,EAAEc;MAAgB,CAAC;IACjD;IAEA,IAAID,IAAI,CAACb,QAAQ,EAAE;MACf,OAAO;QAAE,GAAGa,IAAI;QAAEb,QAAQ,EAAEa,IAAI,CAACb,QAAQ,CAACe,GAAG,CAACC,KAAK,IAAI,IAAI,CAACJ,QAAQ,CAACI,KAAK,EAAET,QAAQ,CAAC;MAAE,CAAC;IAC5F;IAEA,OAAOM,IAAI;EACf;EAEAI,OAAOA,CAAA,EAAgB;IACnB,oBACIC,OAAA;MAAKC,KAAK,EAAC,KAAK;MAACC,MAAM,EAAC,KAAK;MAAApB,QAAA,eACzBkB,OAAA,CAACG,YAAY;QAACC,IAAI,EAAE,IAAI,CAACnB;MAAS;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC;EAEd;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}