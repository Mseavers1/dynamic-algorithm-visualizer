{"ast":null,"code":"export class FAAddInstruction {\n  constructor(index, value, numberOfStates, values, indexStates) {\n    this.value = void 0;\n    this.index = void 0;\n    this.numberOfStates = void 0;\n    this.indexStates = void 0;\n    this.values = void 0;\n    this.index = index;\n    this.value = value;\n    this.numberOfStates = numberOfStates;\n    this.indexStates = indexStates;\n    this.values = values;\n  }\n  async process(svg) {\n    const position = this.getPosition(this.index, this.numberOfStates, 350, 200);\n    let nodesGroup = svg.select(\"g.nodes\");\n    let edgesGroup = svg.select(\"g.edges\");\n    if (edgesGroup.empty()) {\n      edgesGroup = svg.append(\"g\").attr(\"class\", \"edges\");\n    }\n    if (nodesGroup.empty()) {\n      nodesGroup = svg.append(\"g\").attr(\"class\", \"nodes\");\n    }\n    const nodeElement = nodesGroup.append(\"circle\").attr(\"cx\", 200).attr(\"cy\", 200).attr(\"r\", 20).attr(\"class\", \"node\").style(\"opacity\", 0);\n\n    // Creates the text label on screen\n    const label = nodesGroup.append(\"text\").attr(\"x\", 200).attr(\"y\", 200).attr(\"class\", \"label\").attr(\"text-anchor\", \"middle\").attr(\"alignment-baseline\", \"middle\").style(\"fill\", \"white\").style(\"font-size\", \"12px\").text(this.value);\n    const defs = svg.append(\"defs\");\n    defs.append(\"marker\").attr(\"id\", \"arrow\").attr(\"viewBox\", \"0 0 10 10\").attr(\"refX\", 20).attr(\"refY\", 5).attr(\"markerWidth\", 3).attr(\"markerHeight\", 3).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,0 L10,5 L0,10\") // Path of the arrowhead\n    .attr(\"fill\", \"black\"); // Arrow color\n\n    let edges = [];\n    let paths = [];\n    for (let i = 0; i < this.values.length; i++) {\n      const val = this.values[i];\n      if (this.indexStates[val.state] != this.index) {\n        const edge = edgesGroup.append(\"line\").attr(\"x1\", position.x).attr(\"y1\", position.y).attr(\"x2\", position.x).attr(\"y2\", position.y).attr(\"stroke\", \"black\").attr(\"stroke-width\", 5).style(\"opacity\", 0).attr(\"marker-end\", \"url(#arrow)\");\n        edges.push(edge);\n      } else {\n        const loopEdge = edgesGroup.append(\"path\").attr(\"d\", function () {\n          // Create a path that loops back to itself\n          const radius = 50; // Adjust the radius to your liking\n          const angle = Math.PI / 0; // Adjust the angle for the curve\n          const x = position.x;\n          const y = position.y;\n\n          // Create a circular arc with an arrowhead\n          const arc = `M ${x + radius * Math.cos(angle)} ${y - radius * Math.sin(angle)} \n                    A ${radius} ${radius} 0 1 1 ${x + radius * Math.cos(-angle)} ${y - radius * Math.sin(-angle)} \n                    A ${radius} ${radius} 0 1 1 ${x + radius * Math.cos(angle)} ${y - radius * Math.sin(angle)}`;\n          return arc;\n        }).attr(\"stroke\", \"black\").attr(\"stroke-width\", 5).style(\"opacity\", 1).attr(\"fill\", \"none\").attr(\"marker-end\", \"url(#arrow)\");\n        paths.push(loopEdge);\n      }\n    }\n    const nodeTransition = nodeElement.transition().duration(1000).style(\"opacity\", 1).attr(\"cx\", position.x).attr(\"cy\", position.y);\n    const labelTransition = label.transition().duration(1000).style(\"opacity\", 1).attr(\"x\", position.x).attr(\"y\", position.y);\n    let edgeTransitionPromises = [];\n    let pathTransitionPromises = [];\n    if (edges.length > 0) {\n      let skippedIndexed = 0;\n      for (let i = 0; i < edges.length; i++) {\n        const edge = edges[i];\n        const val = this.values[i];\n        const pos = this.getPosition(this.indexStates[val.state], this.numberOfStates, 350, 200);\n        const edgeTransition = edge.transition().duration(1000).style(\"opacity\", 1).attr(\"x2\", pos.x).attr(\"y2\", pos.y);\n        edgeTransitionPromises.push(edgeTransition.end());\n      }\n    }\n    if (paths.length > 0) {\n      for (let i = 0; i < paths.length; i++) {\n        const path = paths[i];\n        const pos = this.getPosition(this.index, this.numberOfStates, 350, 200);\n        const loopEdgeTransition = path.transition().duration(1000).style(\"opacity\", 1).attr(\"d\", function () {\n          const radius = 50;\n          const angle = Math.PI / 4;\n          const x = pos.x;\n          const y = pos.y;\n\n          // Create a new arc path that updates the loop position\n          const arc = `M ${x + radius * Math.cos(angle)} ${y - radius * Math.sin(angle)} \n                    A ${radius} ${radius} 0 1 1 ${x + radius * Math.cos(-angle)} ${y - radius * Math.sin(-angle)} \n                    A ${radius} ${radius} 0 1 1 ${x + radius * Math.cos(angle)} ${y - radius * Math.sin(angle)}`;\n          return arc;\n        });\n        pathTransitionPromises.push(loopEdgeTransition.end());\n      }\n    }\n    await Promise.all([nodeTransition.end(), labelTransition.end(), edgeTransitionPromises, pathTransitionPromises]);\n  }\n  getPosition(index, numberOfStates, centerX, centerY, radius = 100) {\n    const angle = 2 * Math.PI * index / numberOfStates;\n\n    // Calculate x and y coordinates using polar to Cartesian conversion\n    const x = radius * Math.cos(angle);\n    const y = radius * Math.sin(angle);\n    return {\n      x: x + centerX,\n      y: y + centerY\n    };\n  }\n}","map":{"version":3,"names":["FAAddInstruction","constructor","index","value","numberOfStates","values","indexStates","process","svg","position","getPosition","nodesGroup","select","edgesGroup","empty","append","attr","nodeElement","style","label","text","defs","edges","paths","i","length","val","state","edge","x","y","push","loopEdge","radius","angle","Math","PI","arc","cos","sin","nodeTransition","transition","duration","labelTransition","edgeTransitionPromises","pathTransitionPromises","skippedIndexed","pos","edgeTransition","end","path","loopEdgeTransition","Promise","all","centerX","centerY"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/fa_add_instruction.tsx"],"sourcesContent":["import {Instruction} from \"./i_instruction\";\r\nimport {BaseType, Selection} from \"d3\";\r\nimport {Node} from \"../pictures/node\";\r\nimport {stateValues} from \"../algorithms/fa_transition\";\r\nimport * as d3 from \"d3\";\r\n\r\nexport class FAAddInstruction implements Instruction {\r\n\r\n    value: number | string;\r\n    index: number;\r\n    numberOfStates: number;\r\n    indexStates: Record<string, number>;\r\n    values: stateValues[];\r\n\r\n    constructor(index: number, value: number | string, numberOfStates: number, values: stateValues[], indexStates: Record<string, number>) {\r\n        this.index = index;\r\n        this.value = value;\r\n        this.numberOfStates = numberOfStates;\r\n        this.indexStates = indexStates;\r\n        this.values = values;\r\n    }\r\n\r\n    async process(svg: Selection<BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n\r\n        const position = this.getPosition(this.index, this.numberOfStates, 350, 200);\r\n\r\n        let nodesGroup = svg.select<SVGGElement>(\"g.nodes\");\r\n\r\n        let edgesGroup = svg.select<SVGGElement>(\"g.edges\");\r\n\r\n        if (edgesGroup.empty()) {\r\n            edgesGroup = svg.append(\"g\").attr(\"class\", \"edges\");\r\n        }\r\n\r\n\r\n        if (nodesGroup.empty()) {\r\n            nodesGroup = svg.append(\"g\").attr(\"class\", \"nodes\");\r\n        }\r\n\r\n        const nodeElement = nodesGroup.append(\"circle\")\r\n            .attr(\"cx\", 200)\r\n            .attr(\"cy\", 200)\r\n            .attr(\"r\", 20)\r\n            .attr(\"class\", \"node\")\r\n            .style(\"opacity\", 0);\r\n\r\n        // Creates the text label on screen\r\n        const label = nodesGroup.append(\"text\")\r\n            .attr(\"x\", 200)\r\n            .attr(\"y\", 200)\r\n            .attr(\"class\", \"label\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .attr(\"alignment-baseline\", \"middle\")\r\n            .style(\"fill\", \"white\")\r\n            .style(\"font-size\", \"12px\")\r\n            .text(this.value);\r\n\r\n        const defs = svg.append(\"defs\");\r\n\r\n        defs.append(\"marker\")\r\n            .attr(\"id\", \"arrow\")\r\n            .attr(\"viewBox\", \"0 0 10 10\")\r\n            .attr(\"refX\", 20)\r\n            .attr(\"refY\", 5)\r\n            .attr(\"markerWidth\", 3)\r\n            .attr(\"markerHeight\", 3)\r\n            .attr(\"orient\", \"auto\")\r\n            .append(\"path\")\r\n            .attr(\"d\", \"M0,0 L10,5 L0,10\") // Path of the arrowhead\r\n            .attr(\"fill\", \"black\"); // Arrow color\r\n\r\n        let edges: d3.Selection<SVGLineElement, unknown, HTMLElement, any>[] = [];\r\n        let paths: d3.Selection<SVGPathElement, unknown, HTMLElement, any>[] = []\r\n\r\n        for (let i = 0; i < this.values.length; i++) {\r\n\r\n            const val = this.values[i];\r\n\r\n            if (this.indexStates[val.state] != this.index) {\r\n\r\n                const edge = edgesGroup.append(\"line\")\r\n                    .attr(\"x1\", position.x)\r\n                    .attr(\"y1\", position.y)\r\n                    .attr(\"x2\", position.x)\r\n                    .attr(\"y2\", position.y)\r\n                    .attr(\"stroke\", \"black\")\r\n                    .attr(\"stroke-width\", 5)\r\n                    .style(\"opacity\", 0)\r\n                    .attr(\"marker-end\", \"url(#arrow)\");\r\n\r\n                edges.push(edge);\r\n            }\r\n            else {\r\n\r\n                const loopEdge = edgesGroup.append(\"path\")\r\n                    .attr(\"d\", function() {\r\n                        // Create a path that loops back to itself\r\n                        const radius = 50; // Adjust the radius to your liking\r\n                        const angle = Math.PI / 0; // Adjust the angle for the curve\r\n                        const x = position.x;\r\n                        const y = position.y;\r\n\r\n                        // Create a circular arc with an arrowhead\r\n                        const arc = `M ${x + radius * Math.cos(angle)} ${y - radius * Math.sin(angle)} \r\n                    A ${radius} ${radius} 0 1 1 ${x + radius * Math.cos(-angle)} ${y - radius * Math.sin(-angle)} \r\n                    A ${radius} ${radius} 0 1 1 ${x + radius * Math.cos(angle)} ${y - radius * Math.sin(angle)}`;\r\n                        return arc;\r\n                    })\r\n                    .attr(\"stroke\", \"black\")\r\n                    .attr(\"stroke-width\", 5)\r\n                    .style(\"opacity\", 1)\r\n                    .attr(\"fill\", \"none\")\r\n                    .attr(\"marker-end\", \"url(#arrow)\");\r\n\r\n                paths.push(loopEdge);\r\n            }\r\n        }\r\n\r\n        const nodeTransition = nodeElement.transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"cx\", position.x)\r\n            .attr(\"cy\", position.y)\r\n\r\n        const labelTransition = label.transition()\r\n            .duration(1000)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"x\", position.x)\r\n            .attr(\"y\", position.y)\r\n\r\n        let edgeTransitionPromises : Promise<void>[] = [];\r\n        let pathTransitionPromises : Promise<void>[] = [];\r\n\r\n        if (edges.length > 0) {\r\n\r\n            let skippedIndexed = 0;\r\n\r\n            for (let i = 0; i < edges.length; i++) {\r\n                const edge = edges[i];\r\n                const val = this.values[i];\r\n\r\n                const pos = this.getPosition(this.indexStates[val.state], this.numberOfStates, 350, 200);\r\n\r\n                const edgeTransition = edge.transition()\r\n                    .duration(1000)\r\n                    .style(\"opacity\", 1)\r\n                    .attr(\"x2\", pos.x)\r\n                    .attr(\"y2\", pos.y);\r\n\r\n                edgeTransitionPromises.push(edgeTransition.end());\r\n            }\r\n        }\r\n\r\n        if (paths.length > 0) {\r\n\r\n            for (let i = 0; i < paths.length; i++) {\r\n                const path = paths[i];\r\n                const pos = this.getPosition(this.index, this.numberOfStates, 350, 200);\r\n\r\n                const loopEdgeTransition = path.transition()\r\n                    .duration(1000)\r\n                    .style(\"opacity\", 1)\r\n                    .attr(\"d\", function() {\r\n                        const radius = 50;\r\n                        const angle = Math.PI / 4;\r\n                        const x = pos.x;\r\n                        const y = pos.y;\r\n\r\n                        // Create a new arc path that updates the loop position\r\n                        const arc = `M ${x + radius * Math.cos(angle)} ${y - radius * Math.sin(angle)} \r\n                    A ${radius} ${radius} 0 1 1 ${x + radius * Math.cos(-angle)} ${y - radius * Math.sin(-angle)} \r\n                    A ${radius} ${radius} 0 1 1 ${x + radius * Math.cos(angle)} ${y - radius * Math.sin(angle)}`;\r\n                        return arc;\r\n                    });\r\n\r\n                pathTransitionPromises.push(loopEdgeTransition.end())\r\n            }\r\n\r\n        }\r\n\r\n        await Promise.all([nodeTransition.end(), labelTransition.end(), edgeTransitionPromises, pathTransitionPromises]);\r\n    }\r\n\r\n    getPosition(index: number, numberOfStates: number, centerX: number, centerY: number, radius: number = 100) {\r\n        const angle = (2 * Math.PI * index) / numberOfStates;\r\n\r\n        // Calculate x and y coordinates using polar to Cartesian conversion\r\n        const x = radius * Math.cos(angle);\r\n        const y = radius * Math.sin(angle);\r\n\r\n        return { x: x + centerX, y: y + centerY };\r\n    }\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}