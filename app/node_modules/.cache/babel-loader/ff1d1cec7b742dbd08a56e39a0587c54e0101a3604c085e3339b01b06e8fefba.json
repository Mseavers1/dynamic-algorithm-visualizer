{"ast":null,"code":"export class FAAddAllInstruction {\n  constructor(graph) {\n    this.graph = void 0;\n    this.graph = graph;\n  }\n  async process(svg) {\n    const nodeTransitions = [];\n    const labelTransitions = [];\n    const linesGroup = svg.append(\"g\").attr(\"id\", \"lines\");\n    const nodesGroup = svg.append(\"g\");\n    let indexNodes = new Map();\n    let index = 0;\n    const total = this.graph.get_nodes().size;\n\n    // Draw all nodes\n    this.graph.get_nodes().forEach((node, value) => {\n      const pos = this.getPosition(index, total, 350, 200);\n      const current_node = this.createNode(nodesGroup, pos.x, pos.y);\n      const label = this.createLabel(nodesGroup, pos, value);\n      const node_transition = this.applyNodeTransition(current_node, pos);\n      const label_transition = this.applyLabelTransition(label, pos);\n      indexNodes.set(value, [index++, current_node]);\n      nodeTransitions.push(node_transition);\n      labelTransitions.push(label_transition);\n    });\n\n    // Draw connectors\n    this.graph.get_nodes().forEach((node, value) => {\n      let pointers = this.graph.get_pointers(value);\n      if (pointers != null && pointers.size > 0) {\n        const entry = indexNodes.get(value);\n        if (!entry) return; // safety check\n\n        const [index, currentNode] = entry;\n        const current_node_pos = this.getPosition(index, total, 350, 200);\n        pointers.forEach((weights, pointer) => {\n          const targetEntry = indexNodes.get(pointer.get_value());\n          if (!targetEntry) return;\n          const [targetIndex, _] = targetEntry;\n          const target_node_pos = this.getPosition(targetIndex, total, 350, 200);\n          if (this.hasMutualPointer(value, pointer.get_value())) {\n            const curvedPath = this.createCurvedLine(linesGroup, current_node_pos, target_node_pos, 0.1);\n            this.createLineLabel(linesGroup, curvedPath, weights.join(\", \"));\n          } else {\n            this.createLine(linesGroup, current_node_pos, target_node_pos);\n            //this.createLineLabel(linesGroup, current_node_pos, target_node_pos, \"Test\")\n          }\n        });\n      }\n    });\n    await Promise.all([...nodeTransitions, ...labelTransitions]);\n  }\n\n  // Creates a label for a line (edge)\n  createLineLabel(group, lineOrPath, txt) {\n    // Check if the element is a line or a path\n    const isLine = lineOrPath.node() instanceof SVGLineElement;\n    if (isLine) {\n      // For straight lines, place the text near the midpoint with an offset\n      const line = lineOrPath;\n      const x1 = parseFloat(line.attr(\"x1\"));\n      const y1 = parseFloat(line.attr(\"y1\"));\n      const x2 = parseFloat(line.attr(\"x2\"));\n      const y2 = parseFloat(line.attr(\"y2\"));\n\n      // Calculate midpoint\n      const midX = (x1 + x2) / 2;\n      const midY = (y1 + y2) / 2;\n\n      // Calculate perpendicular offset\n      const dx = x2 - x1;\n      const dy = y2 - y1;\n      const lineLength = Math.sqrt(dx * dx + dy * dy);\n      const offsetX = -dy / lineLength * 10; // Offset by 10 pixels perpendicular to the line\n      const offsetY = dx / lineLength * 10;\n\n      // Append text element\n      return group.append(\"text\").attr(\"x\", midX + offsetX).attr(\"y\", midY + offsetY).attr(\"text-anchor\", \"middle\") // Center the text horizontally\n      .attr(\"alignment-baseline\", \"middle\") // Center the text vertically\n      .style(\"fill\", \"black\").style(\"font-size\", \"12px\") // Smaller font size for edge labels\n      .style(\"pointer-events\", \"none\") // Prevent text from interfering with mouse events\n      .text(txt);\n    } else {\n      // For curved paths, use textPath to place text along the curve\n      const path = lineOrPath;\n      const pathId = path.attr(\"id\"); // Get the unique ID of the path\n\n      // Append text element with textPath\n      const text = group.append(\"text\").style(\"fill\", \"black\").style(\"font-size\", \"12px\") // Smaller font size for edge labels\n      .style(\"pointer-events\", \"none\"); // Prevent text from interfering with mouse events\n\n      // Append textPath and link it to the curved path using its ID\n      text.append(\"textPath\").attr(\"xlink:href\", `#${pathId}`) // Link to the path element\n      .attr(\"startOffset\", \"50%\") // Start the text at the midpoint of the path\n      .attr(\"text-anchor\", \"middle\") // Center the text along the path\n      .text(txt);\n      return text;\n    }\n  }\n  hasMutualPointer(from, to) {\n    const fromPointers = this.graph.get_pointers(from);\n    const toPointers = this.graph.get_pointers(to);\n    if (!fromPointers || !toPointers) return false;\n    console.log(\"From Node:\", this.graph.get_node(from));\n    console.log(\"To Node:\", this.graph.get_node(to));\n    console.log(\"From Pointers:\", fromPointers);\n    console.log(\"To Pointers:\", toPointers);\n    console.log(\"From has To?\", fromPointers.has(this.graph.get_node(to)));\n    console.log(\"To has From?\", toPointers.has(this.graph.get_node(from)));\n    return fromPointers.has(this.graph.get_node(to)) && toPointers.has(this.graph.get_node(from));\n  }\n  createCurvedLine(group, from, to, curvature = 0.3) {\n    // Midpoint between from and to\n    const midX = (from.x + to.x) / 2;\n    const midY = (from.y + to.y) / 2;\n\n    // Offset for the curve (perpendicular to the line)\n    const dx = to.x - from.x;\n    const dy = to.y - from.y;\n    const norm = Math.sqrt(dx * dx + dy * dy);\n    const offsetX = -dy * curvature;\n    const offsetY = dx * curvature;\n    const controlX = midX + offsetX;\n    const controlY = midY + offsetY;\n    const pathData = `M ${from.x} ${from.y} Q ${controlX} ${controlY}, ${to.x} ${to.y}`;\n    return group.append(\"path\").attr(\"d\", pathData).attr(\"fill\", \"none\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"marker-end\", \"url(#arrow)\");\n  }\n  createLine(svgGroup, start, end, strokeColor = \"black\", strokeWidth = 2, opacity = 1) {\n    return svgGroup.append(\"line\").attr(\"x1\", start.x).attr(\"y1\", start.y).attr(\"x2\", end.x).attr(\"y2\", end.y).attr(\"stroke\", strokeColor).attr(\"stroke-width\", strokeWidth).style(\"opacity\", opacity).attr(\"marker-end\", \"url(#arrow)\");\n  }\n  createLabel(nodesGroup, position, txt) {\n    return nodesGroup.append(\"text\").attr(\"x\", position.x).attr(\"y\", position.y).attr(\"class\", \"label\").attr(\"text-anchor\", \"middle\").attr(\"alignment-baseline\", \"middle\").style(\"fill\", \"black\").style(\"font-size\", \"20px\").text(txt);\n  }\n  createNode(nodesGroup, cx, cy, r = 20, className = \"node\", opacity = 0) {\n    return nodesGroup.append(\"circle\").attr(\"cx\", cx).attr(\"cy\", cy).attr(\"r\", r).attr(\"class\", className).style(\"opacity\", opacity);\n  }\n  applyNodeTransition(node, position, duration = 1000) {\n    return new Promise(resolve => {\n      node.transition().duration(duration).attr(\"cx\", position.x).attr(\"cy\", position.y).style(\"opacity\", 1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"fill\", \"white\").on(\"end\", () => resolve());\n    });\n  }\n  applyLabelTransition(label, position, duration = 1000) {\n    return new Promise(resolve => {\n      label.transition().duration(duration).style(\"opacity\", 1).attr(\"x\", position.x).attr(\"y\", position.y).on(\"end\", () => resolve());\n    });\n  }\n\n  // Gets the position in a shaped form\n  getPosition(index, numberOfNodes, centerX, centerY, radius = 150) {\n    const angle = 2 * Math.PI * index / numberOfNodes;\n\n    // Calculate x and y coordinates using polar to Cartesian conversion\n    const x = radius * Math.cos(angle);\n    const y = radius * Math.sin(angle);\n    return {\n      x: x + centerX,\n      y: y + centerY\n    };\n  }\n}","map":{"version":3,"names":["FAAddAllInstruction","constructor","graph","process","svg","nodeTransitions","labelTransitions","linesGroup","append","attr","nodesGroup","indexNodes","Map","index","total","get_nodes","size","forEach","node","value","pos","getPosition","current_node","createNode","x","y","label","createLabel","node_transition","applyNodeTransition","label_transition","applyLabelTransition","set","push","pointers","get_pointers","entry","get","currentNode","current_node_pos","weights","pointer","targetEntry","get_value","targetIndex","_","target_node_pos","hasMutualPointer","curvedPath","createCurvedLine","createLineLabel","join","createLine","Promise","all","group","lineOrPath","txt","isLine","SVGLineElement","line","x1","parseFloat","y1","x2","y2","midX","midY","dx","dy","lineLength","Math","sqrt","offsetX","offsetY","style","text","path","pathId","from","to","fromPointers","toPointers","console","log","get_node","has","curvature","norm","controlX","controlY","pathData","svgGroup","start","end","strokeColor","strokeWidth","opacity","position","cx","cy","r","className","duration","resolve","transition","on","numberOfNodes","centerX","centerY","radius","angle","PI","cos","sin"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/fa_add_all_instruction.tsx"],"sourcesContent":["import {Instruction} from \"./i_instruction\";\r\nimport {BaseType, Selection} from \"d3\";\r\nimport {FA_Graph} from \"../structures/fa_graph\";\r\nimport {FA_Node} from \"../structures/fa_node\";\r\n\r\nexport class FAAddAllInstruction implements Instruction {\r\n\r\n    private graph: FA_Graph;\r\n\r\n    constructor(graph: FA_Graph) {\r\n        this.graph = graph;\r\n    }\r\n\r\n    async process(svg: Selection<BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n        const nodeTransitions: Promise<void>[] = [];\r\n        const labelTransitions: Promise<void>[] = [];\r\n        const linesGroup = svg.append(\"g\").attr(\"id\", \"lines\") as unknown as d3.Selection<SVGGElement, unknown, null, undefined>;\r\n\r\n        const nodesGroup = (svg.append(\"g\") as unknown) as Selection<SVGGElement, unknown, null, undefined>;\r\n\r\n        let indexNodes: Map<string | number, [number, d3.Selection<SVGCircleElement, unknown, null, undefined>]> = new Map();\r\n        let index = 0;\r\n        const total = this.graph.get_nodes().size;\r\n\r\n        // Draw all nodes\r\n        this.graph.get_nodes().forEach((node, value) => {\r\n            const pos = this.getPosition(index, total, 350, 200);\r\n            const current_node = this.createNode(nodesGroup, pos.x, pos.y);\r\n            const label = this.createLabel(nodesGroup, pos, value as string)\r\n            const node_transition = this.applyNodeTransition(current_node, pos);\r\n            const label_transition = this.applyLabelTransition(label, pos);\r\n\r\n            indexNodes.set(value, [index++, current_node]);\r\n            nodeTransitions.push(node_transition);\r\n            labelTransitions.push(label_transition);\r\n        });\r\n\r\n        // Draw connectors\r\n        this.graph.get_nodes().forEach((node, value) => {\r\n\r\n            let pointers = this.graph.get_pointers(value);\r\n\r\n            if (pointers != null && pointers.size > 0) {\r\n\r\n                const entry = indexNodes.get(value);\r\n                if (!entry) return; // safety check\r\n\r\n                const [index, currentNode] = entry;\r\n                const current_node_pos = this.getPosition(index, total, 350, 200);\r\n\r\n                pointers.forEach((weights, pointer) => {\r\n                    const targetEntry = indexNodes.get(pointer.get_value());\r\n                    if (!targetEntry) return;\r\n\r\n                    const [targetIndex, _] = targetEntry;\r\n                    const target_node_pos = this.getPosition(targetIndex, total, 350, 200);\r\n\r\n                    if (this.hasMutualPointer(value, pointer.get_value())){\r\n                        const curvedPath = this.createCurvedLine(linesGroup, current_node_pos, target_node_pos, 0.1)\r\n                        this.createLineLabel(linesGroup, curvedPath, weights.join(\", \"));\r\n                    }\r\n                    else\r\n                    {\r\n                        this.createLine(linesGroup, current_node_pos, target_node_pos);\r\n                        //this.createLineLabel(linesGroup, current_node_pos, target_node_pos, \"Test\")\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n\r\n        await Promise.all([...nodeTransitions, ...labelTransitions]);\r\n    }\r\n\r\n    // Creates a label for a line (edge)\r\n    createLineLabel(\r\n        group: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n        lineOrPath: d3.Selection<SVGLineElement | SVGPathElement, unknown, null, undefined>,\r\n        txt: string\r\n    ): d3.Selection<SVGTextElement, unknown, null, undefined> {\r\n\r\n        // Check if the element is a line or a path\r\n        const isLine = lineOrPath.node() instanceof SVGLineElement;\r\n\r\n        if (isLine) {\r\n            // For straight lines, place the text near the midpoint with an offset\r\n            const line = lineOrPath as d3.Selection<SVGLineElement, unknown, null, undefined>;\r\n            const x1 = parseFloat(line.attr(\"x1\"));\r\n            const y1 = parseFloat(line.attr(\"y1\"));\r\n            const x2 = parseFloat(line.attr(\"x2\"));\r\n            const y2 = parseFloat(line.attr(\"y2\"));\r\n\r\n            // Calculate midpoint\r\n            const midX = (x1 + x2) / 2;\r\n            const midY = (y1 + y2) / 2;\r\n\r\n            // Calculate perpendicular offset\r\n            const dx = x2 - x1;\r\n            const dy = y2 - y1;\r\n            const lineLength = Math.sqrt(dx * dx + dy * dy);\r\n            const offsetX = (-dy / lineLength) * 10; // Offset by 10 pixels perpendicular to the line\r\n            const offsetY = (dx / lineLength) * 10;\r\n\r\n            // Append text element\r\n            return group.append(\"text\")\r\n                .attr(\"x\", midX + offsetX)\r\n                .attr(\"y\", midY + offsetY)\r\n                .attr(\"text-anchor\", \"middle\") // Center the text horizontally\r\n                .attr(\"alignment-baseline\", \"middle\") // Center the text vertically\r\n                .style(\"fill\", \"black\")\r\n                .style(\"font-size\", \"12px\") // Smaller font size for edge labels\r\n                .style(\"pointer-events\", \"none\") // Prevent text from interfering with mouse events\r\n                .text(txt);\r\n\r\n        } else {\r\n            // For curved paths, use textPath to place text along the curve\r\n            const path = lineOrPath as d3.Selection<SVGPathElement, unknown, null, undefined>;\r\n            const pathId = path.attr(\"id\"); // Get the unique ID of the path\r\n\r\n            // Append text element with textPath\r\n            const text = group.append(\"text\")\r\n                .style(\"fill\", \"black\")\r\n                .style(\"font-size\", \"12px\") // Smaller font size for edge labels\r\n                .style(\"pointer-events\", \"none\"); // Prevent text from interfering with mouse events\r\n\r\n            // Append textPath and link it to the curved path using its ID\r\n            text.append(\"textPath\")\r\n                .attr(\"xlink:href\", `#${pathId}`) // Link to the path element\r\n                .attr(\"startOffset\", \"50%\") // Start the text at the midpoint of the path\r\n                .attr(\"text-anchor\", \"middle\") // Center the text along the path\r\n                .text(txt);\r\n\r\n            return text;\r\n        }\r\n    }\r\n\r\n    hasMutualPointer(from: string | number, to: string | number): boolean {\r\n        const fromPointers = this.graph.get_pointers(from);\r\n        const toPointers = this.graph.get_pointers(to);\r\n\r\n        if (!fromPointers || !toPointers) return false;\r\n\r\n        console.log(\"From Node:\", this.graph.get_node(from));\r\n        console.log(\"To Node:\", this.graph.get_node(to));\r\n\r\n        console.log(\"From Pointers:\", fromPointers);\r\n        console.log(\"To Pointers:\", toPointers);\r\n\r\n        console.log(\"From has To?\", fromPointers.has(this.graph.get_node(to) as FA_Node));\r\n        console.log(\"To has From?\", toPointers.has(this.graph.get_node(from) as FA_Node));\r\n\r\n        return fromPointers.has(this.graph.get_node(to) as FA_Node) && toPointers.has(this.graph.get_node(from) as FA_Node);\r\n    }\r\n\r\n\r\n    createCurvedLine(\r\n        group: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n        from: { x: number, y: number },\r\n        to: { x: number, y: number },\r\n        curvature: number = 0.3\r\n    ): d3.Selection<SVGPathElement, unknown, null, undefined> {\r\n\r\n        // Midpoint between from and to\r\n        const midX = (from.x + to.x) / 2;\r\n        const midY = (from.y + to.y) / 2;\r\n\r\n        // Offset for the curve (perpendicular to the line)\r\n        const dx = to.x - from.x;\r\n        const dy = to.y - from.y;\r\n        const norm = Math.sqrt(dx * dx + dy * dy);\r\n        const offsetX = -dy * curvature;\r\n        const offsetY = dx * curvature;\r\n\r\n        const controlX = midX + offsetX;\r\n        const controlY = midY + offsetY;\r\n\r\n        const pathData = `M ${from.x} ${from.y} Q ${controlX} ${controlY}, ${to.x} ${to.y}`;\r\n\r\n        return group.append(\"path\")\r\n            .attr(\"d\", pathData)\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke\", \"black\")\r\n            .attr(\"stroke-width\", 2)\r\n            .attr(\"marker-end\", \"url(#arrow)\");\r\n    }\r\n\r\n    createLine(\r\n        svgGroup: d3.Selection<SVGGElement, unknown, null, undefined>,\r\n        start: { x: number; y: number },\r\n        end: { x: number; y: number },\r\n        strokeColor: string = \"black\",\r\n        strokeWidth: number = 2,\r\n        opacity: number = 1\r\n    ): d3.Selection<SVGLineElement, unknown, null, undefined> {\r\n        return svgGroup.append(\"line\")\r\n            .attr(\"x1\", start.x)\r\n            .attr(\"y1\", start.y)\r\n            .attr(\"x2\", end.x)\r\n            .attr(\"y2\", end.y)\r\n            .attr(\"stroke\", strokeColor)\r\n            .attr(\"stroke-width\", strokeWidth)\r\n            .style(\"opacity\", opacity)\r\n            .attr(\"marker-end\", \"url(#arrow)\");\r\n    }\r\n\r\n\r\n    createLabel(nodesGroup: d3.Selection<SVGGElement, unknown, null, undefined>, position: { x: number, y: number }, txt: string): d3.Selection<SVGTextElement, unknown, null, undefined> {\r\n        return nodesGroup.append(\"text\")\r\n            .attr(\"x\", position.x)\r\n            .attr(\"y\", position.y)\r\n            .attr(\"class\", \"label\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .attr(\"alignment-baseline\", \"middle\")\r\n            .style(\"fill\", \"black\")\r\n            .style(\"font-size\", \"20px\")\r\n            .text(txt);\r\n    }\r\n\r\n\r\n    createNode(nodesGroup: d3.Selection<SVGGElement, unknown, null, undefined>, cx: number, cy: number, r: number = 20,\r\n                                        className: string = \"node\", opacity: number = 0\r\n    ): d3.Selection<SVGCircleElement, unknown, null, undefined> {\r\n\r\n        return nodesGroup.append(\"circle\")\r\n            .attr(\"cx\", cx)\r\n            .attr(\"cy\", cy)\r\n            .attr(\"r\", r)\r\n            .attr(\"class\", className)\r\n            .style(\"opacity\", opacity);\r\n    }\r\n\r\n    applyNodeTransition(\r\n        node: d3.Selection<SVGCircleElement, unknown, null, undefined>,\r\n        position: { x: number; y: number },\r\n        duration: number = 1000\r\n    ): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            node.transition()\r\n                .duration(duration)\r\n                .attr(\"cx\", position.x)\r\n                .attr(\"cy\", position.y)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"stroke\", \"black\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"white\")\r\n                .on(\"end\", () => resolve());\r\n        });\r\n    }\r\n\r\n    applyLabelTransition(\r\n        label: d3.Selection<SVGTextElement, unknown, null, undefined>,\r\n        position: { x: number; y: number },\r\n        duration: number = 1000\r\n    ): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            label.transition()\r\n                .duration(duration)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"x\", position.x)\r\n                .attr(\"y\", position.y)\r\n                .on(\"end\", () => resolve());\r\n        });\r\n    }\r\n\r\n\r\n    // Gets the position in a shaped form\r\n    getPosition(index: number, numberOfNodes: number, centerX: number, centerY: number, radius: number = 150) {\r\n        const angle = (2 * Math.PI * index) / numberOfNodes;\r\n\r\n        // Calculate x and y coordinates using polar to Cartesian conversion\r\n        const x = radius * Math.cos(angle);\r\n        const y = radius * Math.sin(angle);\r\n\r\n        return { x: x + centerX, y: y + centerY };\r\n    }\r\n\r\n}"],"mappings":"AAKA,OAAO,MAAMA,mBAAmB,CAAwB;EAIpDC,WAAWA,CAACC,KAAe,EAAE;IAAA,KAFrBA,KAAK;IAGT,IAAI,CAACA,KAAK,GAAGA,KAAK;EACtB;EAEA,MAAMC,OAAOA,CAACC,GAAmD,EAAiB;IAC9E,MAAMC,eAAgC,GAAG,EAAE;IAC3C,MAAMC,gBAAiC,GAAG,EAAE;IAC5C,MAAMC,UAAU,GAAGH,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAmE;IAExH,MAAMC,UAAU,GAAIN,GAAG,CAACI,MAAM,CAAC,GAAG,CAAiE;IAEnG,IAAIG,UAAoG,GAAG,IAAIC,GAAG,CAAC,CAAC;IACpH,IAAIC,KAAK,GAAG,CAAC;IACb,MAAMC,KAAK,GAAG,IAAI,CAACZ,KAAK,CAACa,SAAS,CAAC,CAAC,CAACC,IAAI;;IAEzC;IACA,IAAI,CAACd,KAAK,CAACa,SAAS,CAAC,CAAC,CAACE,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAC5C,MAAMC,GAAG,GAAG,IAAI,CAACC,WAAW,CAACR,KAAK,EAAEC,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC;MACpD,MAAMQ,YAAY,GAAG,IAAI,CAACC,UAAU,CAACb,UAAU,EAAEU,GAAG,CAACI,CAAC,EAAEJ,GAAG,CAACK,CAAC,CAAC;MAC9D,MAAMC,KAAK,GAAG,IAAI,CAACC,WAAW,CAACjB,UAAU,EAAEU,GAAG,EAAED,KAAe,CAAC;MAChE,MAAMS,eAAe,GAAG,IAAI,CAACC,mBAAmB,CAACP,YAAY,EAAEF,GAAG,CAAC;MACnE,MAAMU,gBAAgB,GAAG,IAAI,CAACC,oBAAoB,CAACL,KAAK,EAAEN,GAAG,CAAC;MAE9DT,UAAU,CAACqB,GAAG,CAACb,KAAK,EAAE,CAACN,KAAK,EAAE,EAAES,YAAY,CAAC,CAAC;MAC9CjB,eAAe,CAAC4B,IAAI,CAACL,eAAe,CAAC;MACrCtB,gBAAgB,CAAC2B,IAAI,CAACH,gBAAgB,CAAC;IAC3C,CAAC,CAAC;;IAEF;IACA,IAAI,CAAC5B,KAAK,CAACa,SAAS,CAAC,CAAC,CAACE,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAE5C,IAAIe,QAAQ,GAAG,IAAI,CAAChC,KAAK,CAACiC,YAAY,CAAChB,KAAK,CAAC;MAE7C,IAAIe,QAAQ,IAAI,IAAI,IAAIA,QAAQ,CAAClB,IAAI,GAAG,CAAC,EAAE;QAEvC,MAAMoB,KAAK,GAAGzB,UAAU,CAAC0B,GAAG,CAAClB,KAAK,CAAC;QACnC,IAAI,CAACiB,KAAK,EAAE,OAAO,CAAC;;QAEpB,MAAM,CAACvB,KAAK,EAAEyB,WAAW,CAAC,GAAGF,KAAK;QAClC,MAAMG,gBAAgB,GAAG,IAAI,CAAClB,WAAW,CAACR,KAAK,EAAEC,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC;QAEjEoB,QAAQ,CAACjB,OAAO,CAAC,CAACuB,OAAO,EAAEC,OAAO,KAAK;UACnC,MAAMC,WAAW,GAAG/B,UAAU,CAAC0B,GAAG,CAACI,OAAO,CAACE,SAAS,CAAC,CAAC,CAAC;UACvD,IAAI,CAACD,WAAW,EAAE;UAElB,MAAM,CAACE,WAAW,EAAEC,CAAC,CAAC,GAAGH,WAAW;UACpC,MAAMI,eAAe,GAAG,IAAI,CAACzB,WAAW,CAACuB,WAAW,EAAE9B,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC;UAEtE,IAAI,IAAI,CAACiC,gBAAgB,CAAC5B,KAAK,EAAEsB,OAAO,CAACE,SAAS,CAAC,CAAC,CAAC,EAAC;YAClD,MAAMK,UAAU,GAAG,IAAI,CAACC,gBAAgB,CAAC1C,UAAU,EAAEgC,gBAAgB,EAAEO,eAAe,EAAE,GAAG,CAAC;YAC5F,IAAI,CAACI,eAAe,CAAC3C,UAAU,EAAEyC,UAAU,EAAER,OAAO,CAACW,IAAI,CAAC,IAAI,CAAC,CAAC;UACpE,CAAC,MAED;YACI,IAAI,CAACC,UAAU,CAAC7C,UAAU,EAAEgC,gBAAgB,EAAEO,eAAe,CAAC;YAC9D;UACJ;QACJ,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;IAGF,MAAMO,OAAO,CAACC,GAAG,CAAC,CAAC,GAAGjD,eAAe,EAAE,GAAGC,gBAAgB,CAAC,CAAC;EAChE;;EAEA;EACA4C,eAAeA,CACXK,KAA0D,EAC1DC,UAAmF,EACnFC,GAAW,EAC2C;IAEtD;IACA,MAAMC,MAAM,GAAGF,UAAU,CAACtC,IAAI,CAAC,CAAC,YAAYyC,cAAc;IAE1D,IAAID,MAAM,EAAE;MACR;MACA,MAAME,IAAI,GAAGJ,UAAoE;MACjF,MAAMK,EAAE,GAAGC,UAAU,CAACF,IAAI,CAACnD,IAAI,CAAC,IAAI,CAAC,CAAC;MACtC,MAAMsD,EAAE,GAAGD,UAAU,CAACF,IAAI,CAACnD,IAAI,CAAC,IAAI,CAAC,CAAC;MACtC,MAAMuD,EAAE,GAAGF,UAAU,CAACF,IAAI,CAACnD,IAAI,CAAC,IAAI,CAAC,CAAC;MACtC,MAAMwD,EAAE,GAAGH,UAAU,CAACF,IAAI,CAACnD,IAAI,CAAC,IAAI,CAAC,CAAC;;MAEtC;MACA,MAAMyD,IAAI,GAAG,CAACL,EAAE,GAAGG,EAAE,IAAI,CAAC;MAC1B,MAAMG,IAAI,GAAG,CAACJ,EAAE,GAAGE,EAAE,IAAI,CAAC;;MAE1B;MACA,MAAMG,EAAE,GAAGJ,EAAE,GAAGH,EAAE;MAClB,MAAMQ,EAAE,GAAGJ,EAAE,GAAGF,EAAE;MAClB,MAAMO,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACJ,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;MAC/C,MAAMI,OAAO,GAAI,CAACJ,EAAE,GAAGC,UAAU,GAAI,EAAE,CAAC,CAAC;MACzC,MAAMI,OAAO,GAAIN,EAAE,GAAGE,UAAU,GAAI,EAAE;;MAEtC;MACA,OAAOf,KAAK,CAAC/C,MAAM,CAAC,MAAM,CAAC,CACtBC,IAAI,CAAC,GAAG,EAAEyD,IAAI,GAAGO,OAAO,CAAC,CACzBhE,IAAI,CAAC,GAAG,EAAE0D,IAAI,GAAGO,OAAO,CAAC,CACzBjE,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;MAAA,CAC9BA,IAAI,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CAAC;MAAA,CACrCkE,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CACtBA,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;MAAA,CAC3BA,KAAK,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;MAAA,CAChCC,IAAI,CAACnB,GAAG,CAAC;IAElB,CAAC,MAAM;MACH;MACA,MAAMoB,IAAI,GAAGrB,UAAoE;MACjF,MAAMsB,MAAM,GAAGD,IAAI,CAACpE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;;MAEhC;MACA,MAAMmE,IAAI,GAAGrB,KAAK,CAAC/C,MAAM,CAAC,MAAM,CAAC,CAC5BmE,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CACtBA,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;MAAA,CAC3BA,KAAK,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC,CAAC;;MAEtC;MACAC,IAAI,CAACpE,MAAM,CAAC,UAAU,CAAC,CAClBC,IAAI,CAAC,YAAY,EAAE,IAAIqE,MAAM,EAAE,CAAC,CAAC;MAAA,CACjCrE,IAAI,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;MAAA,CAC3BA,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;MAAA,CAC9BmE,IAAI,CAACnB,GAAG,CAAC;MAEd,OAAOmB,IAAI;IACf;EACJ;EAEA7B,gBAAgBA,CAACgC,IAAqB,EAAEC,EAAmB,EAAW;IAClE,MAAMC,YAAY,GAAG,IAAI,CAAC/E,KAAK,CAACiC,YAAY,CAAC4C,IAAI,CAAC;IAClD,MAAMG,UAAU,GAAG,IAAI,CAAChF,KAAK,CAACiC,YAAY,CAAC6C,EAAE,CAAC;IAE9C,IAAI,CAACC,YAAY,IAAI,CAACC,UAAU,EAAE,OAAO,KAAK;IAE9CC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAClF,KAAK,CAACmF,QAAQ,CAACN,IAAI,CAAC,CAAC;IACpDI,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAClF,KAAK,CAACmF,QAAQ,CAACL,EAAE,CAAC,CAAC;IAEhDG,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEH,YAAY,CAAC;IAC3CE,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,UAAU,CAAC;IAEvCC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEH,YAAY,CAACK,GAAG,CAAC,IAAI,CAACpF,KAAK,CAACmF,QAAQ,CAACL,EAAE,CAAY,CAAC,CAAC;IACjFG,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,UAAU,CAACI,GAAG,CAAC,IAAI,CAACpF,KAAK,CAACmF,QAAQ,CAACN,IAAI,CAAY,CAAC,CAAC;IAEjF,OAAOE,YAAY,CAACK,GAAG,CAAC,IAAI,CAACpF,KAAK,CAACmF,QAAQ,CAACL,EAAE,CAAY,CAAC,IAAIE,UAAU,CAACI,GAAG,CAAC,IAAI,CAACpF,KAAK,CAACmF,QAAQ,CAACN,IAAI,CAAY,CAAC;EACvH;EAGA9B,gBAAgBA,CACZM,KAA0D,EAC1DwB,IAA8B,EAC9BC,EAA4B,EAC5BO,SAAiB,GAAG,GAAG,EAC+B;IAEtD;IACA,MAAMrB,IAAI,GAAG,CAACa,IAAI,CAACvD,CAAC,GAAGwD,EAAE,CAACxD,CAAC,IAAI,CAAC;IAChC,MAAM2C,IAAI,GAAG,CAACY,IAAI,CAACtD,CAAC,GAAGuD,EAAE,CAACvD,CAAC,IAAI,CAAC;;IAEhC;IACA,MAAM2C,EAAE,GAAGY,EAAE,CAACxD,CAAC,GAAGuD,IAAI,CAACvD,CAAC;IACxB,MAAM6C,EAAE,GAAGW,EAAE,CAACvD,CAAC,GAAGsD,IAAI,CAACtD,CAAC;IACxB,MAAM+D,IAAI,GAAGjB,IAAI,CAACC,IAAI,CAACJ,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;IACzC,MAAMI,OAAO,GAAG,CAACJ,EAAE,GAAGkB,SAAS;IAC/B,MAAMb,OAAO,GAAGN,EAAE,GAAGmB,SAAS;IAE9B,MAAME,QAAQ,GAAGvB,IAAI,GAAGO,OAAO;IAC/B,MAAMiB,QAAQ,GAAGvB,IAAI,GAAGO,OAAO;IAE/B,MAAMiB,QAAQ,GAAG,KAAKZ,IAAI,CAACvD,CAAC,IAAIuD,IAAI,CAACtD,CAAC,MAAMgE,QAAQ,IAAIC,QAAQ,KAAKV,EAAE,CAACxD,CAAC,IAAIwD,EAAE,CAACvD,CAAC,EAAE;IAEnF,OAAO8B,KAAK,CAAC/C,MAAM,CAAC,MAAM,CAAC,CACtBC,IAAI,CAAC,GAAG,EAAEkF,QAAQ,CAAC,CACnBlF,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CACpBA,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBA,IAAI,CAAC,YAAY,EAAE,aAAa,CAAC;EAC1C;EAEA2C,UAAUA,CACNwC,QAA6D,EAC7DC,KAA+B,EAC/BC,GAA6B,EAC7BC,WAAmB,GAAG,OAAO,EAC7BC,WAAmB,GAAG,CAAC,EACvBC,OAAe,GAAG,CAAC,EACmC;IACtD,OAAOL,QAAQ,CAACpF,MAAM,CAAC,MAAM,CAAC,CACzBC,IAAI,CAAC,IAAI,EAAEoF,KAAK,CAACrE,CAAC,CAAC,CACnBf,IAAI,CAAC,IAAI,EAAEoF,KAAK,CAACpE,CAAC,CAAC,CACnBhB,IAAI,CAAC,IAAI,EAAEqF,GAAG,CAACtE,CAAC,CAAC,CACjBf,IAAI,CAAC,IAAI,EAAEqF,GAAG,CAACrE,CAAC,CAAC,CACjBhB,IAAI,CAAC,QAAQ,EAAEsF,WAAW,CAAC,CAC3BtF,IAAI,CAAC,cAAc,EAAEuF,WAAW,CAAC,CACjCrB,KAAK,CAAC,SAAS,EAAEsB,OAAO,CAAC,CACzBxF,IAAI,CAAC,YAAY,EAAE,aAAa,CAAC;EAC1C;EAGAkB,WAAWA,CAACjB,UAA+D,EAAEwF,QAAkC,EAAEzC,GAAW,EAA0D;IAClL,OAAO/C,UAAU,CAACF,MAAM,CAAC,MAAM,CAAC,CAC3BC,IAAI,CAAC,GAAG,EAAEyF,QAAQ,CAAC1E,CAAC,CAAC,CACrBf,IAAI,CAAC,GAAG,EAAEyF,QAAQ,CAACzE,CAAC,CAAC,CACrBhB,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CACtBA,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BA,IAAI,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CACpCkE,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CACtBA,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAC1BC,IAAI,CAACnB,GAAG,CAAC;EAClB;EAGAlC,UAAUA,CAACb,UAA+D,EAAEyF,EAAU,EAAEC,EAAU,EAAEC,CAAS,GAAG,EAAE,EAC9EC,SAAiB,GAAG,MAAM,EAAEL,OAAe,GAAG,CAAC,EACvB;IAExD,OAAOvF,UAAU,CAACF,MAAM,CAAC,QAAQ,CAAC,CAC7BC,IAAI,CAAC,IAAI,EAAE0F,EAAE,CAAC,CACd1F,IAAI,CAAC,IAAI,EAAE2F,EAAE,CAAC,CACd3F,IAAI,CAAC,GAAG,EAAE4F,CAAC,CAAC,CACZ5F,IAAI,CAAC,OAAO,EAAE6F,SAAS,CAAC,CACxB3B,KAAK,CAAC,SAAS,EAAEsB,OAAO,CAAC;EAClC;EAEApE,mBAAmBA,CACfX,IAA8D,EAC9DgF,QAAkC,EAClCK,QAAgB,GAAG,IAAI,EACV;IACb,OAAO,IAAIlD,OAAO,CAAEmD,OAAO,IAAK;MAC5BtF,IAAI,CAACuF,UAAU,CAAC,CAAC,CACZF,QAAQ,CAACA,QAAQ,CAAC,CAClB9F,IAAI,CAAC,IAAI,EAAEyF,QAAQ,CAAC1E,CAAC,CAAC,CACtBf,IAAI,CAAC,IAAI,EAAEyF,QAAQ,CAACzE,CAAC,CAAC,CACtBkD,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CACnBlE,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CACvBA,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBA,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CACrBiG,EAAE,CAAC,KAAK,EAAE,MAAMF,OAAO,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC;EACN;EAEAzE,oBAAoBA,CAChBL,KAA6D,EAC7DwE,QAAkC,EAClCK,QAAgB,GAAG,IAAI,EACV;IACb,OAAO,IAAIlD,OAAO,CAAEmD,OAAO,IAAK;MAC5B9E,KAAK,CAAC+E,UAAU,CAAC,CAAC,CACbF,QAAQ,CAACA,QAAQ,CAAC,CAClB5B,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CACnBlE,IAAI,CAAC,GAAG,EAAEyF,QAAQ,CAAC1E,CAAC,CAAC,CACrBf,IAAI,CAAC,GAAG,EAAEyF,QAAQ,CAACzE,CAAC,CAAC,CACrBiF,EAAE,CAAC,KAAK,EAAE,MAAMF,OAAO,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC;EACN;;EAGA;EACAnF,WAAWA,CAACR,KAAa,EAAE8F,aAAqB,EAAEC,OAAe,EAAEC,OAAe,EAAEC,MAAc,GAAG,GAAG,EAAE;IACtG,MAAMC,KAAK,GAAI,CAAC,GAAGxC,IAAI,CAACyC,EAAE,GAAGnG,KAAK,GAAI8F,aAAa;;IAEnD;IACA,MAAMnF,CAAC,GAAGsF,MAAM,GAAGvC,IAAI,CAAC0C,GAAG,CAACF,KAAK,CAAC;IAClC,MAAMtF,CAAC,GAAGqF,MAAM,GAAGvC,IAAI,CAAC2C,GAAG,CAACH,KAAK,CAAC;IAElC,OAAO;MAAEvF,CAAC,EAAEA,CAAC,GAAGoF,OAAO;MAAEnF,CAAC,EAAEA,CAAC,GAAGoF;IAAQ,CAAC;EAC7C;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}