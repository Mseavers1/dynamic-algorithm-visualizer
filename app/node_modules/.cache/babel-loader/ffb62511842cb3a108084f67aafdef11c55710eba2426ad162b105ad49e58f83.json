{"ast":null,"code":"export class FAAddAllInstruction {\n  constructor(graph) {\n    this.graph = void 0;\n    this.graph = graph;\n  }\n  async process(svg) {\n    const nodeTransitions = [];\n    const labelTransitions = [];\n    const nodesGroup = svg.append(\"g\");\n    let index = 0;\n    const total = this.graph.get_nodes().size;\n    this.graph.get_nodes().forEach((node, value) => {\n      const pos = this.getPosition(index++, total, 350, 200);\n      const current_node = this.createNode(nodesGroup, pos.x, pos.y);\n      const label = this.createLabel(nodesGroup, pos, value);\n      const node_transition = this.applyNodeTransition(current_node, pos);\n      const label_transition = this.applyLabelTransition(label, pos);\n      nodeTransitions.push(node_transition);\n      labelTransitions.push(label_transition);\n    });\n    await Promise.all(nodeTransitions, labelTransitions);\n  }\n  createLabel(nodesGroup, position, txt) {\n    return nodesGroup.append(\"text\").attr(\"x\", position.x).attr(\"y\", position.y).attr(\"class\", \"label\").attr(\"text-anchor\", \"middle\").attr(\"alignment-baseline\", \"middle\").style(\"fill\", \"black\").style(\"font-size\", \"20px\").text(txt);\n  }\n  createNode(nodesGroup, cx, cy, r = 20, className = \"node\", opacity = 0) {\n    return nodesGroup.append(\"circle\").attr(\"cx\", cx).attr(\"cy\", cy).attr(\"r\", r).attr(\"class\", className).style(\"opacity\", opacity);\n  }\n  applyNodeTransition(node, position, duration = 1000) {\n    return new Promise(resolve => {\n      node.transition().duration(duration).attr(\"cx\", position.x).attr(\"cy\", position.y).style(\"opacity\", 1).attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"fill\", \"white\").on(\"end\", () => resolve());\n    });\n  }\n  applyLabelTransition(label, position, duration = 1000) {\n    return label.transition().duration(duration).style(\"opacity\", 1).attr(\"x\", position.x).attr(\"y\", position.y).on(\"end\", () => resolve());\n  }\n\n  // Gets the position in a shaped form\n  getPosition(index, numberOfNodes, centerX, centerY, radius = 100) {\n    const angle = 2 * Math.PI * index / numberOfNodes;\n\n    // Calculate x and y coordinates using polar to Cartesian conversion\n    const x = radius * Math.cos(angle);\n    const y = radius * Math.sin(angle);\n    return {\n      x: x + centerX,\n      y: y + centerY\n    };\n  }\n}","map":{"version":3,"names":["FAAddAllInstruction","constructor","graph","process","svg","nodeTransitions","labelTransitions","nodesGroup","append","index","total","get_nodes","size","forEach","node","value","pos","getPosition","current_node","createNode","x","y","label","createLabel","node_transition","applyNodeTransition","label_transition","applyLabelTransition","push","Promise","all","position","txt","attr","style","text","cx","cy","r","className","opacity","duration","resolve","transition","on","numberOfNodes","centerX","centerY","radius","angle","Math","PI","cos","sin"],"sources":["C:/Users/Micha/Documents/GitHub/dynamic-algorithm-visualizer/app/src/components/Instructions/fa_add_all_instruction.tsx"],"sourcesContent":["import {Instruction} from \"./i_instruction\";\r\nimport {BaseType, Selection} from \"d3\";\r\nimport {FA_Graph} from \"../structures/fa_graph\";\r\n\r\nexport class FAAddAllInstruction implements Instruction {\r\n\r\n    private graph: FA_Graph;\r\n\r\n    constructor(graph: FA_Graph) {\r\n        this.graph = graph;\r\n    }\r\n\r\n    async process(svg: Selection<BaseType, unknown, HTMLElement, any>): Promise<void> {\r\n        const nodeTransitions: Promise<void>[] = [];\r\n        const labelTransitions: Promise<void>[] = [];\r\n\r\n        const nodesGroup = (svg.append(\"g\") as unknown) as Selection<SVGGElement, unknown, null, undefined>;\r\n\r\n        let index = 0;\r\n        const total = this.graph.get_nodes().size;\r\n\r\n        this.graph.get_nodes().forEach((node, value) => {\r\n            const pos = this.getPosition(index++, total, 350, 200);\r\n            const current_node = this.createNode(nodesGroup, pos.x, pos.y);\r\n            const label = this.createLabel(nodesGroup, pos, value as string)\r\n            const node_transition = this.applyNodeTransition(current_node, pos);\r\n            const label_transition = this.applyLabelTransition(label, pos);\r\n            nodeTransitions.push(node_transition);\r\n            labelTransitions.push(label_transition);\r\n        });\r\n\r\n        await Promise.all(nodeTransitions, labelTransitions);\r\n    }\r\n\r\n    createLabel(nodesGroup: d3.Selection<SVGGElement, unknown, null, undefined>, position: { x: number, y: number }, txt: string): d3.Selection<SVGTextElement, unknown, null, undefined> {\r\n        return nodesGroup.append(\"text\")\r\n            .attr(\"x\", position.x)\r\n            .attr(\"y\", position.y)\r\n            .attr(\"class\", \"label\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .attr(\"alignment-baseline\", \"middle\")\r\n            .style(\"fill\", \"black\")\r\n            .style(\"font-size\", \"20px\")\r\n            .text(txt);\r\n    }\r\n\r\n\r\n    createNode(nodesGroup: d3.Selection<SVGGElement, unknown, null, undefined>, cx: number, cy: number, r: number = 20,\r\n                                        className: string = \"node\", opacity: number = 0\r\n    ): d3.Selection<SVGCircleElement, unknown, null, undefined> {\r\n\r\n        return nodesGroup.append(\"circle\")\r\n            .attr(\"cx\", cx)\r\n            .attr(\"cy\", cy)\r\n            .attr(\"r\", r)\r\n            .attr(\"class\", className)\r\n            .style(\"opacity\", opacity);\r\n    }\r\n\r\n    applyNodeTransition(\r\n        node: d3.Selection<SVGCircleElement, unknown, null, undefined>,\r\n        position: { x: number; y: number },\r\n        duration: number = 1000\r\n    ): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            node.transition()\r\n                .duration(duration)\r\n                .attr(\"cx\", position.x)\r\n                .attr(\"cy\", position.y)\r\n                .style(\"opacity\", 1)\r\n                .attr(\"stroke\", \"black\")\r\n                .attr(\"stroke-width\", 2)\r\n                .attr(\"fill\", \"white\")\r\n                .on(\"end\", () => resolve());\r\n        });\r\n    }\r\n\r\n    applyLabelTransition(\r\n        label: d3.Selection<SVGTextElement, unknown, null, undefined>,\r\n        position: { x: number; y: number },\r\n        duration: number = 1000\r\n    ): d3.Transition<SVGTextElement, unknown, null, undefined> {\r\n        return label.transition()\r\n            .duration(duration)\r\n            .style(\"opacity\", 1)\r\n            .attr(\"x\", position.x)\r\n            .attr(\"y\", position.y)\r\n            .on(\"end\", () => resolve());\r\n    }\r\n\r\n\r\n\r\n\r\n    // Gets the position in a shaped form\r\n    getPosition(index: number, numberOfNodes: number, centerX: number, centerY: number, radius: number = 100) {\r\n        const angle = (2 * Math.PI * index) / numberOfNodes;\r\n\r\n        // Calculate x and y coordinates using polar to Cartesian conversion\r\n        const x = radius * Math.cos(angle);\r\n        const y = radius * Math.sin(angle);\r\n\r\n        return { x: x + centerX, y: y + centerY };\r\n    }\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}